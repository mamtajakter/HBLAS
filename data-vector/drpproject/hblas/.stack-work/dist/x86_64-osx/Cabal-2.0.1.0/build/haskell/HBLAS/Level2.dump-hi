
==================== FINAL INTERFACE ====================
2020-05-29 02:44:57.758171 UTC

interface hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j:HBLAS.Level2 8022
  interface hash: 07a637b0f268f5d7f864122a51809643
  ABI hash: c5a307eaa5e2c2ce0eef2ca8ee7bbc09
  export-list hash: 117ae5b04b7ce89721d730338ac12926
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e131b62417e854f9475d855932e64176
  sig of: Nothing
  used TH splices: False
  where
exports:
  HBLAS.Level2.gemv
  HBLAS.Level2.gemv'
  HBLAS.Level2.ger
  HBLAS.Level2.getLowerTotalMatrix
  HBLAS.Level2.getLowerTotalRow
  HBLAS.Level2.getUpperTotalMatrix
  HBLAS.Level2.getUpperTotalRow
  HBLAS.Level2.getXYTranspose
  HBLAS.Level2.symv
  HBLAS.Level2.symvLower
  HBLAS.Level2.symvUpper
  HBLAS.Level2.syr
  HBLAS.Level2.syr2
  HBLAS.Level2.syr2Lower1
  HBLAS.Level2.syr2Lower2
  HBLAS.Level2.syr2Upper1
  HBLAS.Level2.syr2Upper2
  HBLAS.Level2.syrLower
  HBLAS.Level2.syrUpper
  HBLAS.Level2.trmv
  HBLAS.Level2.trmvHelper
  HBLAS.Level2.trmvLower
  HBLAS.Level2.trmvUpper
  HBLAS.Level2.trsv
  HBLAS.Level2.trsvHelper
  HBLAS.Level2.trsvLower
  HBLAS.Level2.trsvUpper
module dependencies: HBLAS.Level1
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 loop-0.3.0 matrix-0.3.5.0
                      primitive-0.6.3.0 transformers-0.5.2.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  HBLAS.Level1 ec0b881173ac095ab1cc72fb181a5237
  exports: 4c861864bed5d0d8a0812532912d422f
  axpy b9d114063b2f7a09c1e5219b8bad00cc
  dot 99113c388a51cc98be3bffd21381e9d8
  scal b0d9a7ce4470cb5cf0a169770f504b06
import  -/  matrix-0.3.5.0:Data.Matrix 26e07bbf230d6ad3e3caf27287213599
import  -/  vector-0.12.0.1:Data.Vector 05d09acb6f8f89c1df7193ef513155f3
addDependentFile "/Users/mamtajakter/.stack/programs/x86_64-osx/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
dcd481a959e968a8877d13131bd975b2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HBLAS.Level2.$trModule3
                   HBLAS.Level2.$trModule1) -}
27b2a3a84908b43962cb120a5b2baf5d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.Level2.$trModule2) -}
3ce99e7ab061fc4b931e4fa9ea39dac0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HBLAS.Level2"#) -}
0a73f6d8e2b3c111b5d825d7e5135de4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.Level2.$trModule4) -}
4ed83f8b6319eb5f790f893dd5f20705
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j"#) -}
1e701c03f9508295819952343c03f37a
  $wger ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U><L,U><L,U><L,U><S,U><L,U><L,U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Data.Vector.Vector n))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# n)
                   (w1 :: Data.Vector.Vector n)
                   (w2 :: n) ->
                 case w2 of alpha1 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww4
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                         let {
                           f :: n -> n = GHC.Num.* @ n w alpha1
                         } in
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ww4) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv1
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ n
                                                 ww5
                                                 (GHC.Prim.+# ww3 sc1) of ds3 { Unit# ipv2 ->
                                          f ipv2 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv1
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                  (# ipv2
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv3 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of ww6 { Data.Vector.Vector ww7 ww8 ww9 ->
                 case HBLAS.Level2.$wgetXYTranspose
                        @ n
                        w
                        ww7
                        ww8
                        ww9
                        w1 of v2 { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector (Data.Vector.Vector n) #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Vector (Data.Vector.Vector n) #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ (Data.Vector.Vector n)
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    n#
                                    (Data.Vector.Mutable.uninitialised @ (Data.Vector.Vector n))
                                    s1
                                      `cast`
                                    (Nth:2
                                         (Nth:2
                                              (Trans
                                                   (<GHC.ST.STRep
                                                       GHC.Prim.RealWorld
                                                       (Data.Primitive.Array.MutableArray
                                                          (Control.Monad.Primitive.PrimState
                                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                                          (Data.Vector.Vector n))>_R
                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     (Data.Vector.Vector n)>_R))
                                                   (((GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                     ->_R ((#,#)
                                                             <'GHC.Types.TupleRep '[]>_R
                                                             <'GHC.Types.LiftedRep>_R
                                                             (GHC.Prim.State#
                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                             <Data.Primitive.Array.MutableArray
                                                                (Control.Monad.Primitive.PrimState
                                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                                                (Data.Vector.Vector n)>_R)_R)
                                                    ->_R <GHC.ST.ST
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               (Data.Vector.Vector
                                                                  n))>_R)))) of ds2 { (#,#) ipv6 ipv7 ->
                             letrec {
                               $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> Data.Vector.Vector n
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.Int#
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                 <join 5> {- Arity: 5,
                                             Strictness: <S,U><L,1*U(U,U,U)><S,U><L,U><L,U> -}
                               = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                                   (sc1 :: Data.Vector.Vector n)
                                   (sc2 :: GHC.Prim.Int#)
                                   (sc3 :: GHC.Prim.Int#)
                                   (sc4 :: GHC.Prim.Int#) ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.>=# sc2 ipv4) of wild {
                                   GHC.Types.False
                                   -> case GHC.Prim.writeArray#
                                             @ (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                             @ (Data.Vector.Vector n)
                                             ipv7
                                             sc4
                                             (case sc1 of v1 { Data.Vector.Vector ipv8 ipv9 ipv10 ->
                                              case GHC.Prim.indexArray#
                                                     @ (Data.Vector.Vector n)
                                                     ipv5
                                                     (GHC.Prim.+# ipv sc2) of ds3 { Unit# ipv11 ->
                                              case ipv11 of v3 { Data.Vector.Vector ipv12 ipv13 ipv14 ->
                                              case GHC.Magic.runRW#
                                                     @ ('GHC.Types.TupleRep
                                                          '['GHC.Types.TupleRep '[],
                                                            'GHC.Types.LiftedRep])
                                                     @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          Data.Vector.Vector n #)
                                                     (\ (s2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                      let {
                                                        $j1 :: GHC.Prim.Int#
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     Data.Vector.Vector n #)
                                                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                                                        = \ (n#1 :: GHC.Prim.Int#)[OneShot] ->
                                                          case GHC.Prim.newArray#
                                                                 @ n
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 n#1
                                                                 (Data.Vector.Mutable.uninitialised
                                                                    @ n)
                                                                 s2
                                                                   `cast`
                                                                 (Nth:2
                                                                      (Nth:2
                                                                           (Trans
                                                                                (<GHC.ST.STRep
                                                                                    GHC.Prim.RealWorld
                                                                                    (Data.Primitive.Array.MutableArray
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                       n)>_R
                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R))
                                                                                (((GHC.Prim.State#
                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                  ->_R ((#,#)
                                                                                          <'GHC.Types.TupleRep
                                                                                             '[]>_R
                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                          (GHC.Prim.State#
                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                          <Data.Primitive.Array.MutableArray
                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                (GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld))
                                                                                             n>_R)_R)
                                                                                 ->_R <GHC.ST.ST
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R)))) of ds4 { (#,#) ipv15 ipv16 ->
                                                          letrec {
                                                            $s$wfoldlM'_loop1 :: GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                                 -> n
                                                                                 -> GHC.Prim.Int#
                                                                                 -> GHC.Prim.Int#
                                                                                 -> GHC.Prim.Int#
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       Data.Vector.Vector
                                                                                         n #)
                                                              <join 5> {- Arity: 5,
                                                                          Strictness: <S,U><L,U><S,U><L,U><L,U> -}
                                                            = \ (sc5 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)
                                                                (sc6 :: n)
                                                                (sc7 :: GHC.Prim.Int#)
                                                                (sc8 :: GHC.Prim.Int#)
                                                                (sc9 :: GHC.Prim.Int#) ->
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.>=#
                                                                        sc7
                                                                        ipv13) of wild1 {
                                                                GHC.Types.False
                                                                -> case GHC.Prim.writeArray#
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          @ n
                                                                          ipv16
                                                                          sc9
                                                                          (case GHC.Prim.indexArray#
                                                                                  @ n
                                                                                  ipv14
                                                                                  (GHC.Prim.+#
                                                                                     ipv12
                                                                                     sc7) of ds5 { Unit# ipv17 ->
                                                                           GHC.Num.+
                                                                             @ n
                                                                             w
                                                                             sc6
                                                                             ipv17 })
                                                                          sc5
                                                                            `cast`
                                                                          (Nth:2
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             ()>_R
                                                                                          ->_R Sym (GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <()>_R))
                                                                                         (((GHC.Prim.State#
                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   <()>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R)))) of s'# { DEFAULT ->
                                                                   case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.>=#
                                                                             sc8
                                                                             ipv9) of wild2 {
                                                                     GHC.Types.False
                                                                     -> case GHC.Prim.indexArray#
                                                                               @ n
                                                                               ipv10
                                                                               (GHC.Prim.+#
                                                                                  ipv8
                                                                                  sc8) of ds5 { Unit# ipv17 ->
                                                                        $s$wfoldlM'_loop1
                                                                          s'#
                                                                            `cast`
                                                                          (Nth:2
                                                                               (Nth:3
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (((GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        <()>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R)
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R
                                                                                               ->_R GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <()>_R)))))
                                                                          ipv17
                                                                          (GHC.Prim.+# sc7 1#)
                                                                          (GHC.Prim.+# sc8 1#)
                                                                          (GHC.Prim.+# sc9 1#) }
                                                                     GHC.Types.True
                                                                     -> case GHC.Prim.unsafeFreezeArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               @ n
                                                                               ipv16
                                                                               s'# of ds5 { (#,#) ipv17 ipv18 ->
                                                                        (# ipv17
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.Array
                                                                                                           n)>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R))))),
                                                                           Data.Vector.Vector
                                                                             @ n
                                                                             0#
                                                                             (GHC.Prim.+# sc9 1#)
                                                                             ipv18 #) } } }
                                                                GHC.Types.True
                                                                -> case GHC.Prim.unsafeFreezeArray#
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          @ n
                                                                          ipv16
                                                                          sc5
                                                                            `cast`
                                                                          (Nth:2
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.Array.Array
                                                                                                n)>_R
                                                                                          ->_R Sym (GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <Data.Primitive.Array.Array
                                                                                                           n>_R))
                                                                                         (((GHC.Prim.State#
                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   <Data.Primitive.Array.Array
                                                                                                      n>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.Array.Array
                                                                                                     n)>_R)))) of ds5 { (#,#) ipv17 ipv18 ->
                                                                   (# ipv17
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))))),
                                                                      Data.Vector.Vector
                                                                        @ n
                                                                        0#
                                                                        sc9
                                                                        ipv18 #) } }
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.>=# 0# ipv9) of wild1 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.indexArray#
                                                                      @ n
                                                                      ipv10
                                                                      ipv8 of ds5 { Unit# ipv17 ->
                                                               $s$wfoldlM'_loop1
                                                                 ipv15
                                                                   `cast`
                                                                 (Nth:2
                                                                      (Nth:3
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (((GHC.Prim.State#
                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)))))
                                                                 ipv17
                                                                 0#
                                                                 1#
                                                                 0# }
                                                            GHC.Types.True
                                                            -> case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv16
                                                                      ipv15 of ds5 { (#,#) ipv17 ipv18 ->
                                                               (# ipv17
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    0#
                                                                    ipv18 #) } } }
                                                      } in
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.<=# ipv9 ipv13) of wild2 {
                                                        GHC.Types.False -> $j1 ipv13
                                                        GHC.Types.True
                                                        -> $j1 ipv9 }) of ds4 { (#,#) ipv15 ipv16 ->
                                              ipv16 } } } })
                                             sc
                                               `cast`
                                             (Nth:2
                                                  (Nth:2
                                                       (Trans
                                                            (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <()>_R))
                                                            (((GHC.Prim.State#
                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                      <()>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     GHC.Prim.RealWorld
                                                                     ()>_R)))) of s'# { DEFAULT ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# sc3 ww1) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ (Data.Vector.Vector n)
                                                  ww2
                                                  (GHC.Prim.+# ww sc3) of ds3 { Unit# ipv8 ->
                                           $s$wfoldlM'_loop
                                             s'#
                                               `cast`
                                             (Nth:2
                                                  (Nth:3
                                                       (Nth:2
                                                            (Trans
                                                                 (((GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   ->_R ((#,#)
                                                                           <'GHC.Types.TupleRep
                                                                              '[]>_R
                                                                           <'GHC.Types.LiftedRep>_R
                                                                           (GHC.Prim.State#
                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                           <()>_R)_R)
                                                                  ->_R <GHC.ST.ST
                                                                          GHC.Prim.RealWorld ()>_R)
                                                                 (<GHC.ST.STRep
                                                                     GHC.Prim.RealWorld ()>_R
                                                                  ->_R GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <()>_R)))))
                                             ipv8
                                             (GHC.Prim.+# sc2 1#)
                                             (GHC.Prim.+# sc3 1#)
                                             (GHC.Prim.+# sc4 1#) }
                                        GHC.Types.True
                                        -> case GHC.Prim.unsafeFreezeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ (Data.Vector.Vector n)
                                                  ipv7
                                                  s'# of ds4 { (#,#) ipv8 ipv9 ->
                                           (# ipv8
                                                `cast`
                                              (Nth:2
                                                   (Nth:3
                                                        (Nth:2
                                                             (Trans
                                                                  (((GHC.Prim.State#
                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                    ->_R ((#,#)
                                                                            <'GHC.Types.TupleRep
                                                                               '[]>_R
                                                                            <'GHC.Types.LiftedRep>_R
                                                                            (GHC.Prim.State#
                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                            <Data.Primitive.Array.Array
                                                                               (Data.Vector.Vector
                                                                                  n)>_R)_R)
                                                                   ->_R <GHC.ST.ST
                                                                           GHC.Prim.RealWorld
                                                                           (Data.Primitive.Array.Array
                                                                              (Data.Vector.Vector
                                                                                 n))>_R)
                                                                  (<GHC.ST.STRep
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Primitive.Array.Array
                                                                         (Data.Vector.Vector n))>_R
                                                                   ->_R GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <Data.Primitive.Array.Array
                                                                               (Data.Vector.Vector
                                                                                  n)>_R))))),
                                              Data.Vector.Vector
                                                @ (Data.Vector.Vector n)
                                                0#
                                                (GHC.Prim.+# sc4 1#)
                                                ipv9 #) } } }
                                   GHC.Types.True
                                   -> case GHC.Prim.unsafeFreezeArray#
                                             @ (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                             @ (Data.Vector.Vector n)
                                             ipv7
                                             sc
                                               `cast`
                                             (Nth:2
                                                  (Nth:2
                                                       (Trans
                                                            (<GHC.ST.STRep
                                                                GHC.Prim.RealWorld
                                                                (Data.Primitive.Array.Array
                                                                   (Data.Vector.Vector n))>_R
                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <Data.Primitive.Array.Array
                                                                              (Data.Vector.Vector
                                                                                 n)>_R))
                                                            (((GHC.Prim.State#
                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                      <Data.Primitive.Array.Array
                                                                         (Data.Vector.Vector
                                                                            n)>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     GHC.Prim.RealWorld
                                                                     (Data.Primitive.Array.Array
                                                                        (Data.Vector.Vector
                                                                           n))>_R)))) of ds4 { (#,#) ipv8 ipv9 ->
                                      (# ipv8
                                           `cast`
                                         (Nth:2
                                              (Nth:3
                                                   (Nth:2
                                                        (Trans
                                                             (((GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N))_R
                                                               ->_R ((#,#)
                                                                       <'GHC.Types.TupleRep '[]>_R
                                                                       <'GHC.Types.LiftedRep>_R
                                                                       (GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       <Data.Primitive.Array.Array
                                                                          (Data.Vector.Vector
                                                                             n)>_R)_R)
                                                              ->_R <GHC.ST.ST
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Primitive.Array.Array
                                                                         (Data.Vector.Vector n))>_R)
                                                             (<GHC.ST.STRep
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    (Data.Vector.Vector n))>_R
                                                              ->_R GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          (Data.Vector.Vector
                                                                             n)>_R))))),
                                         Data.Vector.Vector
                                           @ (Data.Vector.Vector n)
                                           0#
                                           sc4
                                           ipv9 #) } }
                             } in
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# 0# ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.indexArray#
                                         @ (Data.Vector.Vector n)
                                         ww2
                                         ww of ds3 { Unit# ipv8 ->
                                  $s$wfoldlM'_loop
                                    ipv6
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     (Data.Vector.Vector n)>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    (Data.Vector.Vector n))>_R)
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               (Data.Vector.Vector n))>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     (Data.Vector.Vector n)>_R)))))
                                    ipv8
                                    0#
                                    1#
                                    0# }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ (Data.Vector.Vector n)
                                         ipv7
                                         ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                                  (# ipv8
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      (Data.Vector.Vector n)>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array
                                                                     (Data.Vector.Vector n))>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array
                                                                (Data.Vector.Vector n))>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      (Data.Vector.Vector
                                                                         n)>_R))))),
                                     Data.Vector.Vector @ (Data.Vector.Vector n) 0# 0# ipv9 #) } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww1 ipv4) of wild2 {
                           GHC.Types.False -> $j ipv4
                           GHC.Types.True -> $j ww1 }) of ds2 { (#,#) ipv6 ipv7 ->
                 ipv7 } } } } }) -}
fe7a6bed7d8adde3f778fee611881402
  $wgetLowerTotalMatrix ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(U,U,U)><S,U><S,U>, Inline: [0] -}
f61c62e9936d9db11a7ba3cb0086df3b
  $wgetLowerTotalRow ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 7,
     Strictness: <L,U(U,U,U)><S,U><S,U><S,U><S,U><L,U(U)><S,U>,
     Inline: [0] -}
b9737f54c284949832c376c420232814
  $wgetUpperTotalMatrix ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(U,U,U)><S,U><S,U>, Inline: [0] -}
09d5aa2dba17bf53c6d60842057a84ec
  $wgetUpperTotalRow ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 7,
     Strictness: <L,U(U,U,U)><S,U><S,U><S,U><S,U><L,1*U(1*U)><S,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww3 ww4) of wild {
                   GHC.Types.False
                   -> case w1 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case GHC.Magic.runRW#
                                  @ ('GHC.Types.TupleRep
                                       '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                  @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   let {
                                     x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ww1
                                   } in
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x1 1#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# x1 ww1) of wild5 {
                                          GHC.Types.False
                                          -> case GHC.Prim.newArray#
                                                    @ n
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    x1
                                                    (Data.Vector.Mutable.uninitialised @ n)
                                                    s1
                                                      `cast`
                                                    (Nth:2
                                                         (Nth:2
                                                              (Trans
                                                                   (<GHC.ST.STRep
                                                                       GHC.Prim.RealWorld
                                                                       (Data.Primitive.Array.MutableArray
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n)>_R
                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <Data.Primitive.Array.MutableArray
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                     n>_R))
                                                                   (((GHC.Prim.State#
                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                     ->_R ((#,#)
                                                                             <'GHC.Types.TupleRep
                                                                                '[]>_R
                                                                             <'GHC.Types.LiftedRep>_R
                                                                             (GHC.Prim.State#
                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                             <Data.Primitive.Array.MutableArray
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                                n>_R)_R)
                                                                    ->_R <GHC.ST.ST
                                                                            GHC.Prim.RealWorld
                                                                            (Data.Primitive.Array.MutableArray
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                             case GHC.Prim.writeArray#
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    @ n
                                                    ipv1
                                                    0#
                                                    (let {
                                                       file :: GHC.Prim.Addr#
                                                       = "./Data/Vector/Generic.hs"#
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=# ww3 0#) of wild3 {
                                                       GHC.Types.False
                                                       -> case w of v2 { Data.Vector.Vector ipv2 ipv3 ipv4 ->
                                                          case HBLAS.Level2.getUpperTotalRow2
                                                                 @ n
                                                                 ipv3
                                                                 ww3
                                                                 file
                                                          ret_ty n
                                                          of {} }
                                                       GHC.Types.True
                                                       -> case w of v2 { Data.Vector.Vector ipv2 ipv3 ipv4 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# ww3 ipv3) of wild7 {
                                                            GHC.Types.False
                                                            -> case HBLAS.Level2.getUpperTotalRow2
                                                                      @ n
                                                                      ipv3
                                                                      ww3
                                                                      file
                                                               ret_ty n
                                                               of {}
                                                            GHC.Types.True
                                                            -> case GHC.Prim.indexArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      (GHC.Prim.+#
                                                                         ipv2
                                                                         ww3) of ds3 { Unit# ipv5 ->
                                                               case ipv5 of ww5 { Data.Vector.Vector ww6 ww7 ww8 ->
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=#
                                                                         wild2
                                                                         0#) of wild8 {
                                                                 GHC.Types.False
                                                                 -> HBLAS.Level2.getUpperTotalRow1
                                                                      @ n
                                                                      ww7
                                                                      wild2
                                                                      file
                                                                 GHC.Types.True
                                                                 -> case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.<#
                                                                              wild2
                                                                              ww7) of wild9 {
                                                                      GHC.Types.False
                                                                      -> HBLAS.Level2.getUpperTotalRow1
                                                                           @ n
                                                                           ww7
                                                                           wild2
                                                                           file
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.indexArray#
                                                                                @ n
                                                                                ww8
                                                                                (GHC.Prim.+#
                                                                                   ww6
                                                                                   wild2) of ds1 { Unit# ipv6 ->
                                                                         ipv6 } } } } } } } })
                                                    ipv of s'# { DEFAULT ->
                                             case GHC.Prim.copyArray#
                                                    @ n
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    ww2
                                                    ww
                                                    ipv1
                                                    1#
                                                    ww1
                                                    s'# of s'#1 { DEFAULT ->
                                             case GHC.Prim.unsafeFreezeArray#
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    @ n
                                                    ipv1
                                                    s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                             (# ipv2
                                                  `cast`
                                                (Nth:2
                                                     (Nth:3
                                                          (Nth:2
                                                               (Trans
                                                                    (((GHC.Prim.State#
                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                      ->_R ((#,#)
                                                                              <'GHC.Types.TupleRep
                                                                                 '[]>_R
                                                                              <'GHC.Types.LiftedRep>_R
                                                                              (GHC.Prim.State#
                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                              <Data.Primitive.Array.Array
                                                                                 n>_R)_R)
                                                                     ->_R <GHC.ST.ST
                                                                             GHC.Prim.RealWorld
                                                                             (Data.Primitive.Array.Array
                                                                                n)>_R)
                                                                    (<GHC.ST.STRep
                                                                        GHC.Prim.RealWorld
                                                                        (Data.Primitive.Array.Array
                                                                           n)>_R
                                                                     ->_R GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <Data.Primitive.Array.Array
                                                                                 n>_R))))),
                                                Data.Vector.Vector
                                                  @ n
                                                  0#
                                                  (GHC.Prim.+# 1# ww1)
                                                  ipv3 #) } } } }
                                          GHC.Types.True
                                          -> case Data.Vector.Fusion.Bundle.Size.$wlvl5 x1
                                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.Vector n #)
                                             of {} }
                                     GHC.Types.True
                                     -> case Data.Vector.Fusion.Bundle.Size.$wlvl5 x1
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Vector.Vector n #)
                                        of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                           case ipv2 of ww5 { Data.Vector.Vector ww6 ww7 ww8 ->
                           HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow1
                             @ n
                             ww4
                             (GHC.Prim.+# wild2 1#)
                             (GHC.Prim.-# ww3 1#)
                             ww8
                             ww7
                             ww6
                             w } }
                        0#
                        -> HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow1
                             @ n
                             ww4
                             1#
                             (GHC.Prim.-# ww3 1#)
                             ww2
                             ww1
                             ww
                             w } }
                   GHC.Types.True -> (# ww, ww1, ww2 #) }) -}
66618cc31d63d33f31f7b0ab3a7b14d4
  $wgetXYTranspose ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)),A,A,A,A)><L,U><S,1*U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
48b5eb1d976bc0d7d33587e14cf818ef
  $wsymv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> GHC.Prim.Char#
    -> Data.Vector.Vector n
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><S,U><S,U><S,U><L,1*U(U,U,U)><S,1*U><L,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n)
                   (w4 :: n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT -> HBLAS.Level2.$wsymvUpper @ n w w1 ww ww1 ww2 w2 w3 w4
                   'l'# -> HBLAS.Level2.$wsymvLower @ n w w1 ww ww1 ww2 w2 w3 w4 }) -}
5b08dcefa60c12741b61a41b0099ff97
  $wsymvLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,1*C1(U))><L,U(U,U,U)><L,U><S,U><L,U><L,1*U(U,U,U)><S,1*U><L,1*U>,
     Inline: [0] -}
11e9be01ee48a24fd3e6f2f947456eb3
  $wsymvUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,1*C1(U))><L,U(U,U,U)><L,U><S,U><L,U><L,1*U(U,U,U)><S,1*U><L,1*U>,
     Inline: [0] -}
aff739320ed4e9a05e185eed1a33cecb
  $wsyr ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> GHC.Prim.Char#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Data.Vector.Vector n) #)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w2 :: n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT
                   -> case HBLAS.Level2.$wsyrUpper
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } }
                   'l'#
                   -> case HBLAS.Level2.$wsyrLower
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } } }) -}
9b1d2b1fff6ee98aa7c42a12c8b4082e
  $wsyr2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> GHC.Prim.Char#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Data.Vector.Vector n) #)
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# n)
                   (w2 :: n)
                   (ww6 :: GHC.Prim.Char#) ->
                 case ww6 of wild {
                   DEFAULT
                   -> case HBLAS.Level2.$wsyr2Upper1
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } }
                   'l'#
                   -> case HBLAS.Level2.$wsyr2Lower1
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } } }) -}
22dc0f394f225d90ac3f9ae7711d3cc8
  $wsyr2Lower1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U><S,U><L,U><S,U>,
     Inline: [0] -}
522abd143901be1cf04d357f4a60fc01
  $wsyr2Lower2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><L,U(U,U,U)><S,1*U>,
     Inline: [0] -}
fc9fd0906708ba133b77890eb26a918c
  $wsyr2Upper1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U><S,U><L,U><S,U>,
     Inline: [0] -}
9ba715e198b2223a61033c8ef743b8ce
  $wsyr2Upper2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><L,U(U,U,U)><S,1*U>,
     Inline: [0] -}
63fe9c659ce2685e2f3a810c4203c060
  $wsyrLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><S,1*U>,
     Inline: [0] -}
e38e0284231ce72cab6f9cb46c3c47d4
  $wsyrUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><S,1*U>,
     Inline: [0] -}
6d0798242cc1ae0aac6fe09ead5ad55c
  $wtrmv ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Char#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Real.Fractional n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              let {
                                $j :: GHC.Prim.Int#
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Vector n #)
                                  <join 1> {- Arity: 1, Strictness: <S,U> -}
                                = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                  case GHC.Prim.newArray#
                                         @ n
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         n#
                                         (Data.Vector.Mutable.uninitialised @ n)
                                         s1
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.MutableArray
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                  case n# of wild1 {
                                    DEFAULT
                                    -> case GHC.Prim.writeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              0#
                                              (GHC.Num.fromInteger
                                                 @ n
                                                 (GHC.Real.$p1Fractional @ n w)
                                                 HBLAS.Level2.trmv1)
                                              ipv of s'# { DEFAULT ->
                                       letrec {
                                         $wdo_set :: GHC.Prim.Int#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           Data.Vector.Vector n #)
                                           <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                       Inline: [0] -}
                                         = \ (ww4 :: GHC.Prim.Int#)
                                             (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<#
                                                     (GHC.Prim.*# 2# ww4)
                                                     wild1) of wild2 {
                                             GHC.Types.False
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       (GHC.Prim.-# wild1 ww4)
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                case GHC.Prim.unsafeFreezeArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                (# ipv2
                                                     `cast`
                                                   (Nth:2
                                                        (Nth:3
                                                             (Nth:2
                                                                  (Trans
                                                                       (((GHC.Prim.State#
                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                         ->_R ((#,#)
                                                                                 <'GHC.Types.TupleRep
                                                                                    '[]>_R
                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                 (GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R)_R)
                                                                        ->_R <GHC.ST.ST
                                                                                GHC.Prim.RealWorld
                                                                                (Data.Primitive.Array.Array
                                                                                   n)>_R)
                                                                       (<GHC.ST.STRep
                                                                           GHC.Prim.RealWorld
                                                                           (Data.Primitive.Array.Array
                                                                              n)>_R
                                                                        ->_R GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R))))),
                                                   Data.Vector.Vector @ n 0# wild1 ipv3 #) } }
                                             GHC.Types.True
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       ww4
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                $wdo_set
                                                  (GHC.Prim.*# 2# ww4)
                                                  s'#1
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <()>_R))))) } }
                                       } in
                                       $wdo_set
                                         1#
                                         s'#
                                           `cast`
                                         (Nth:2
                                              (Nth:3
                                                   (Nth:2
                                                        (Trans
                                                             (((GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N))_R
                                                               ->_R ((#,#)
                                                                       <'GHC.Types.TupleRep '[]>_R
                                                                       <'GHC.Types.LiftedRep>_R
                                                                       (GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       <()>_R)_R)
                                                              ->_R <GHC.ST.ST
                                                                      GHC.Prim.RealWorld ()>_R)
                                                             (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                              ->_R GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))))) }
                                    0#
                                    -> case GHC.Prim.unsafeFreezeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              ipv of ds1 { (#,#) ipv2 ipv3 ->
                                       (# ipv2
                                            `cast`
                                          (Nth:2
                                               (Nth:3
                                                    (Nth:2
                                                         (Trans
                                                              (((GHC.Prim.State#
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                ->_R ((#,#)
                                                                        <'GHC.Types.TupleRep '[]>_R
                                                                        <'GHC.Types.LiftedRep>_R
                                                                        (GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R)_R)
                                                               ->_R <GHC.ST.ST
                                                                       GHC.Prim.RealWorld
                                                                       (Data.Primitive.Array.Array
                                                                          n)>_R)
                                                              (<GHC.ST.STRep
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R
                                                               ->_R GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R))))),
                                          Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww1 0#) of wild2 {
                                GHC.Types.False -> $j ww1
                                GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                      HBLAS.Level2.trmv_$s$wtrmvUpper
                        @ n
                        ww1
                        0#
                        ww
                        ww1
                        ww2
                        ww7
                        ww6
                        ww5
                        w1
                        w } }
                   'l'#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              let {
                                $j :: GHC.Prim.Int#
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Vector n #)
                                  <join 1> {- Arity: 1, Strictness: <S,U> -}
                                = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                  case GHC.Prim.newArray#
                                         @ n
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         n#
                                         (Data.Vector.Mutable.uninitialised @ n)
                                         s1
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.MutableArray
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                  case n# of wild1 {
                                    DEFAULT
                                    -> case GHC.Prim.writeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              0#
                                              (GHC.Num.fromInteger
                                                 @ n
                                                 (GHC.Real.$p1Fractional @ n w)
                                                 HBLAS.Level2.trmv1)
                                              ipv of s'# { DEFAULT ->
                                       letrec {
                                         $wdo_set :: GHC.Prim.Int#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           Data.Vector.Vector n #)
                                           <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                       Inline: [0] -}
                                         = \ (ww4 :: GHC.Prim.Int#)
                                             (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<#
                                                     (GHC.Prim.*# 2# ww4)
                                                     wild1) of wild2 {
                                             GHC.Types.False
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       (GHC.Prim.-# wild1 ww4)
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                case GHC.Prim.unsafeFreezeArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                (# ipv2
                                                     `cast`
                                                   (Nth:2
                                                        (Nth:3
                                                             (Nth:2
                                                                  (Trans
                                                                       (((GHC.Prim.State#
                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                         ->_R ((#,#)
                                                                                 <'GHC.Types.TupleRep
                                                                                    '[]>_R
                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                 (GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R)_R)
                                                                        ->_R <GHC.ST.ST
                                                                                GHC.Prim.RealWorld
                                                                                (Data.Primitive.Array.Array
                                                                                   n)>_R)
                                                                       (<GHC.ST.STRep
                                                                           GHC.Prim.RealWorld
                                                                           (Data.Primitive.Array.Array
                                                                              n)>_R
                                                                        ->_R GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R))))),
                                                   Data.Vector.Vector @ n 0# wild1 ipv3 #) } }
                                             GHC.Types.True
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       ww4
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                $wdo_set
                                                  (GHC.Prim.*# 2# ww4)
                                                  s'#1
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <()>_R))))) } }
                                       } in
                                       $wdo_set
                                         1#
                                         s'#
                                           `cast`
                                         (Nth:2
                                              (Nth:3
                                                   (Nth:2
                                                        (Trans
                                                             (((GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N))_R
                                                               ->_R ((#,#)
                                                                       <'GHC.Types.TupleRep '[]>_R
                                                                       <'GHC.Types.LiftedRep>_R
                                                                       (GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       <()>_R)_R)
                                                              ->_R <GHC.ST.ST
                                                                      GHC.Prim.RealWorld ()>_R)
                                                             (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                              ->_R GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))))) }
                                    0#
                                    -> case GHC.Prim.unsafeFreezeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              ipv of ds1 { (#,#) ipv2 ipv3 ->
                                       (# ipv2
                                            `cast`
                                          (Nth:2
                                               (Nth:3
                                                    (Nth:2
                                                         (Trans
                                                              (((GHC.Prim.State#
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                ->_R ((#,#)
                                                                        <'GHC.Types.TupleRep '[]>_R
                                                                        <'GHC.Types.LiftedRep>_R
                                                                        (GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R)_R)
                                                               ->_R <GHC.ST.ST
                                                                       GHC.Prim.RealWorld
                                                                       (Data.Primitive.Array.Array
                                                                          n)>_R)
                                                              (<GHC.ST.STRep
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R
                                                               ->_R GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R))))),
                                          Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww1 0#) of wild2 {
                                GHC.Types.False -> $j ww1
                                GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                      HBLAS.Level2.trmv_$s$wtrmvLower
                        @ n
                        ww1
                        0#
                        ww
                        ww1
                        ww2
                        ww7
                        ww6
                        ww5
                        w1
                        w } } }) -}
0161bdbb93efcc464dcdc8322dde56e9
  $wtrmvHelper ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><L,U><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# n) ->
                 letrec {
                   $s$wfoldlM'_loop :: GHC.Prim.Int# -> GHC.Prim.Int# -> n -> n
                     <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,1*U> -}
                   = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) (sc2 :: n) ->
                     case sc2 of z2 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# sc1 ww1) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ n
                                 ww2
                                 (GHC.Prim.+# ww sc1) of ds3 { Unit# ipv ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# sc ww4) of wild1 {
                            GHC.Types.False
                            -> $s$wfoldlM'_loop
                                 (GHC.Prim.+# sc 1#)
                                 (GHC.Prim.+# sc1 1#)
                                 (GHC.Num.+
                                    @ n
                                    w
                                    z2
                                    (case GHC.Prim.indexArray#
                                            @ n
                                            ww5
                                            (GHC.Prim.+# ww3 sc) of ds1 { Unit# ipv1 ->
                                     GHC.Num.* @ n w ipv ipv1 }))
                            GHC.Types.True -> z2 } }
                       GHC.Types.True -> z2 } }
                 } in
                 $s$wfoldlM'_loop
                   0#
                   0#
                   (GHC.Num.fromInteger @ n w HBLAS.Level2.trmv1)) -}
930a2e9958689cf5e335e00a636c79c5
  $wtrmvLower ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 8,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
e7a96f585b40758878faa000628a4843
  $wtrmvUpper ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 8,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
f1e57e70239852ec4485bab3c5d08912
  $wtrsv ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Char#
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Real.Fractional n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT
                   -> case HBLAS.Level2.trsv_$s$wtrsvUpper
                             @ n
                             -1#
                             (GHC.Prim.-# ww1 1#)
                             ww
                             ww1
                             ww2
                             (case GHC.Magic.runRW#
                                     @ ('GHC.Types.TupleRep
                                          '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                     @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.Vector.Vector n #)
                                     (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      let {
                                        $j :: GHC.Prim.Int#
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Vector.Vector n #)
                                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                                        = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                          case GHC.Prim.newArray#
                                                 @ n
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 n#
                                                 (Data.Vector.Mutable.uninitialised @ n)
                                                 s1
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:2
                                                           (Trans
                                                                (<GHC.ST.STRep
                                                                    GHC.Prim.RealWorld
                                                                    (Data.Primitive.Array.MutableArray
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n)>_R
                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <Data.Primitive.Array.MutableArray
                                                                                  (Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        GHC.Prim.RealWorld))
                                                                                  n>_R))
                                                                (((GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          (GHC.Prim.State#
                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                          <Data.Primitive.Array.MutableArray
                                                                             (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                             n>_R)_R)
                                                                 ->_R <GHC.ST.ST
                                                                         GHC.Prim.RealWorld
                                                                         (Data.Primitive.Array.MutableArray
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                          case n# of wild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      0#
                                                      (GHC.Num.fromInteger
                                                         @ n
                                                         (GHC.Real.$p1Fractional @ n w)
                                                         HBLAS.Level2.trmv1)
                                                      ipv of s'# { DEFAULT ->
                                               letrec {
                                                 $wdo_set :: GHC.Prim.Int#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   Data.Vector.Vector n #)
                                                   <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                               Inline: [0] -}
                                                 = \ (ww4 :: GHC.Prim.Int#)
                                                     (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<#
                                                             (GHC.Prim.*# 2# ww4)
                                                             wild1) of wild2 {
                                                     GHC.Types.False
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               (GHC.Prim.-# wild1 ww4)
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        case GHC.Prim.unsafeFreezeArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                        (# ipv2
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:3
                                                                     (Nth:2
                                                                          (Trans
                                                                               (((GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         (GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R)_R)
                                                                                ->_R <GHC.ST.ST
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           n)>_R)
                                                                               (<GHC.ST.STRep
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.Array
                                                                                      n)>_R
                                                                                ->_R GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R))))),
                                                           Data.Vector.Vector
                                                             @ n
                                                             0#
                                                             wild1
                                                             ipv3 #) } }
                                                     GHC.Types.True
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               ww4
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        $wdo_set
                                                          (GHC.Prim.*# 2# ww4)
                                                          s'#1
                                                            `cast`
                                                          (Nth:2
                                                               (Nth:3
                                                                    (Nth:2
                                                                         (Trans
                                                                              (((GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R))))) } }
                                               } in
                                               $wdo_set
                                                 1#
                                                 s'#
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:3
                                                           (Nth:2
                                                                (Trans
                                                                     (((GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               (GHC.Prim.State#
                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                               <()>_R)_R)
                                                                      ->_R <GHC.ST.ST
                                                                              GHC.Prim.RealWorld
                                                                              ()>_R)
                                                                     (<GHC.ST.STRep
                                                                         GHC.Prim.RealWorld ()>_R
                                                                      ->_R GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <()>_R))))) }
                                            0#
                                            -> case GHC.Prim.unsafeFreezeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      ipv of ds1 { (#,#) ipv2 ipv3 ->
                                               (# ipv2
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               (Data.Primitive.Array.Array
                                                                                  n)>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld
                                                                          (Data.Primitive.Array.Array
                                                                             n)>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R))))),
                                                  Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<=# ww1 0#) of wild2 {
                                        GHC.Types.False -> $j ww1
                                        GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                              ipv2 })
                             w1
                             w of ww4 { (#,#) ww5 ww6 ->
                      ww5 }
                   'l'#
                   -> case HBLAS.Level2.trsv_$s$wtrsvLower
                             @ n
                             ww1
                             0#
                             ww
                             ww1
                             ww2
                             (case GHC.Magic.runRW#
                                     @ ('GHC.Types.TupleRep
                                          '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                     @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.Vector.Vector n #)
                                     (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      let {
                                        $j :: GHC.Prim.Int#
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Vector.Vector n #)
                                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                                        = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                          case GHC.Prim.newArray#
                                                 @ n
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 n#
                                                 (Data.Vector.Mutable.uninitialised @ n)
                                                 s1
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:2
                                                           (Trans
                                                                (<GHC.ST.STRep
                                                                    GHC.Prim.RealWorld
                                                                    (Data.Primitive.Array.MutableArray
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n)>_R
                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <Data.Primitive.Array.MutableArray
                                                                                  (Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        GHC.Prim.RealWorld))
                                                                                  n>_R))
                                                                (((GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          (GHC.Prim.State#
                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                          <Data.Primitive.Array.MutableArray
                                                                             (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                             n>_R)_R)
                                                                 ->_R <GHC.ST.ST
                                                                         GHC.Prim.RealWorld
                                                                         (Data.Primitive.Array.MutableArray
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                          case n# of wild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      0#
                                                      (GHC.Num.fromInteger
                                                         @ n
                                                         (GHC.Real.$p1Fractional @ n w)
                                                         HBLAS.Level2.trmv1)
                                                      ipv of s'# { DEFAULT ->
                                               letrec {
                                                 $wdo_set :: GHC.Prim.Int#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   Data.Vector.Vector n #)
                                                   <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                               Inline: [0] -}
                                                 = \ (ww4 :: GHC.Prim.Int#)
                                                     (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<#
                                                             (GHC.Prim.*# 2# ww4)
                                                             wild1) of wild2 {
                                                     GHC.Types.False
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               (GHC.Prim.-# wild1 ww4)
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        case GHC.Prim.unsafeFreezeArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                        (# ipv2
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:3
                                                                     (Nth:2
                                                                          (Trans
                                                                               (((GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         (GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R)_R)
                                                                                ->_R <GHC.ST.ST
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           n)>_R)
                                                                               (<GHC.ST.STRep
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.Array
                                                                                      n)>_R
                                                                                ->_R GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R))))),
                                                           Data.Vector.Vector
                                                             @ n
                                                             0#
                                                             wild1
                                                             ipv3 #) } }
                                                     GHC.Types.True
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               ww4
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        $wdo_set
                                                          (GHC.Prim.*# 2# ww4)
                                                          s'#1
                                                            `cast`
                                                          (Nth:2
                                                               (Nth:3
                                                                    (Nth:2
                                                                         (Trans
                                                                              (((GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R))))) } }
                                               } in
                                               $wdo_set
                                                 1#
                                                 s'#
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:3
                                                           (Nth:2
                                                                (Trans
                                                                     (((GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               (GHC.Prim.State#
                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                               <()>_R)_R)
                                                                      ->_R <GHC.ST.ST
                                                                              GHC.Prim.RealWorld
                                                                              ()>_R)
                                                                     (<GHC.ST.STRep
                                                                         GHC.Prim.RealWorld ()>_R
                                                                      ->_R GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <()>_R))))) }
                                            0#
                                            -> case GHC.Prim.unsafeFreezeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      ipv of ds1 { (#,#) ipv2 ipv3 ->
                                               (# ipv2
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               (Data.Primitive.Array.Array
                                                                                  n)>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld
                                                                          (Data.Primitive.Array.Array
                                                                             n)>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R))))),
                                                  Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<=# ww1 0#) of wild2 {
                                        GHC.Types.False -> $j ww1
                                        GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                              ipv2 })
                             w1
                             w of ww4 { (#,#) ww5 ww6 ->
                      ww5 } }) -}
6a41aa86dc2514cea36e2adaf0387e8f
  $wtrsvLower ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
209843f0bc3da799b2c23d6efb2294c0
  $wtrsvUpper ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
202eed125ad42c5513a2471f739d6fc0
  gemv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,U,U)><S(LSL),1*U(U,U,U)><S,1*U><S,1*U>,
     Inline: (sat-args=5),
     Unfolding: InlineRule (6, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   (matA :: Data.Vector.Vector (Data.Vector.Vector n))
                   (vecX :: Data.Vector.Vector n)
                   (vecY :: Data.Vector.Vector n)
                   (alpha :: n)
                   (beta :: n) ->
                 case matA of matA1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case vecX of vecX1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                 case vecY of vecY1 { Data.Vector.Vector ipv6 ipv7 ipv8 ->
                 case alpha of alpha1 { DEFAULT ->
                 case beta of beta1 { DEFAULT ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ n
                        (Data.Vector.$fVectorVectora @ n)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ n
                           (Data.Vector.$fVectorVectora @ n)
                           (Data.Vector.Fusion.Bundle.inplace
                              @ n
                              @ n
                              @ Data.Vector.Vector
                              (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                               let {
                                 f :: n -> n = GHC.Num.* @ n $dNum beta1
                               } in
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m
                                 @ n
                                 @ n
                                 $dMonad
                                 (let {
                                    f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                  } in
                                  \ (x2 :: n) -> f1 (f x2)))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ n
                                 (Data.Vector.$fVectorVectora @ n)
                                 vecY1))) of y1 { Data.Vector.Vector ipv9 ipv10 ipv11 ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ n
                        (Data.Vector.$fVectorVectora @ n)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ n
                           (Data.Vector.$fVectorVectora @ n)
                           (Data.Vector.Fusion.Bundle.inplace
                              @ (Data.Vector.Vector n)
                              @ n
                              @ Data.Vector.Vector
                              (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m
                                 @ (Data.Vector.Vector n)
                                 @ n
                                 $dMonad
                                 (let {
                                    f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                  } in
                                  \ (x :: Data.Vector.Vector n) ->
                                  f1
                                    (case x of b1 { Data.Vector.Vector ipv12 ipv13 ipv14 ->
                                     let {
                                       f :: n -> n -> n = GHC.Num.+ @ n $dNum
                                     } in
                                     let {
                                       f2 :: n -> n -> n = GHC.Num.* @ n $dNum
                                     } in
                                     (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                        @ Data.Vector.Fusion.Util.Id
                                        @ n
                                        @ n
                                        @ Data.Vector.Vector
                                        Data.Vector.Fusion.Util.$fMonadId
                                        (\ (a2 :: n) (b2 :: n)[OneShot] -> f a2 b2)
                                          `cast`
                                        (<n>_R
                                         ->_R <n>_R
                                         ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                        (GHC.Num.fromInteger @ n $dNum 0)
                                        (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ n
                                           @ n
                                           @ n
                                           @ Data.Vector.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (\ (a2 :: n) (b2 :: n)[OneShot] -> f2 a2 b2)
                                             `cast`
                                           (<n>_R
                                            ->_R <n>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ n
                                              (Data.Vector.$fVectorVectora @ n)
                                              vecX1)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ n
                                              (Data.Vector.$fVectorVectora @ n)
                                              b1)))
                                       `cast`
                                     (Data.Vector.Fusion.Util.N:Id[0] <n>_R) })))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ (Data.Vector.Vector n)
                                 (Data.Vector.$fVectorVectora @ (Data.Vector.Vector n))
                                 matA1))) of x1 { Data.Vector.Vector ipv12 ipv13 ipv14 ->
                 Data.Vector.Generic.new
                   @ Data.Vector.Vector
                   @ n
                   (Data.Vector.$fVectorVectora @ n)
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Vector
                      @ n
                      (Data.Vector.$fVectorVectora @ n)
                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ n
                         @ n
                         @ n
                         @ Data.Vector.Vector
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: n) (b1 :: n)[OneShot] ->
                          GHC.Num.+ @ n $dNum b1 (GHC.Num.* @ n $dNum alpha1 a1))
                           `cast`
                         (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Vector
                            @ n
                            (Data.Vector.$fVectorVectora @ n)
                            x1)
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Vector
                            @ n
                            (Data.Vector.$fVectorVectora @ n)
                            y1))) } } } } } } }) -}
3f7f4d854fa2704a4068242e9cb1746a
  gemv' ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n -> Data.Vector.Vector n
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><S(LSL),1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   (matA :: Data.Vector.Vector (Data.Vector.Vector n))
                   (vecX :: Data.Vector.Vector n) ->
                 case matA of matA1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case vecX of vecX1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                 Data.Vector.Generic.new
                   @ Data.Vector.Vector
                   @ n
                   (Data.Vector.$fVectorVectora @ n)
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Vector
                      @ n
                      (Data.Vector.$fVectorVectora @ n)
                      (Data.Vector.Fusion.Bundle.inplace
                         @ (Data.Vector.Vector n)
                         @ n
                         @ Data.Vector.Vector
                         (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                          Data.Vector.Fusion.Stream.Monadic.mapM
                            @ m
                            @ (Data.Vector.Vector n)
                            @ n
                            $dMonad
                            (let {
                               f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                             } in
                             \ (x :: Data.Vector.Vector n) ->
                             f1
                               (case x of b1 { Data.Vector.Vector ipv6 ipv7 ipv8 ->
                                let {
                                  f :: n -> n -> n = GHC.Num.+ @ n $dNum
                                } in
                                let {
                                  f2 :: n -> n -> n = GHC.Num.* @ n $dNum
                                } in
                                (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                   @ Data.Vector.Fusion.Util.Id
                                   @ n
                                   @ n
                                   @ Data.Vector.Vector
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (\ (a2 :: n) (b2 :: n)[OneShot] -> f a2 b2)
                                     `cast`
                                   (<n>_R
                                    ->_R <n>_R
                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                   (GHC.Num.fromInteger @ n $dNum 0)
                                   (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                      @ Data.Vector.Fusion.Util.Id
                                      @ n
                                      @ n
                                      @ n
                                      @ Data.Vector.Vector
                                      Data.Vector.Fusion.Util.$fMonadId
                                      (\ (a2 :: n) (b2 :: n)[OneShot] -> f2 a2 b2)
                                        `cast`
                                      (<n>_R
                                       ->_R <n>_R
                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                      (Data.Vector.Generic.stream
                                         @ Data.Vector.Vector
                                         @ n
                                         (Data.Vector.$fVectorVectora @ n)
                                         vecX1)
                                      (Data.Vector.Generic.stream
                                         @ Data.Vector.Vector
                                         @ n
                                         (Data.Vector.$fVectorVectora @ n)
                                         b1)))
                                  `cast`
                                (Data.Vector.Fusion.Util.N:Id[0] <n>_R) })))
                         (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Vector
                            @ (Data.Vector.Vector n)
                            (Data.Vector.$fVectorVectora @ (Data.Vector.Vector n))
                            matA1))) } }) -}
c71ac6955a046426f9a9d807ea760816
  ger ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wger @ n w ww1 ww2 ww3 ww5 ww6 ww7 w3 w4 } }) -}
5ba06eabccd9b9e8ba5fa5834b9008e7
  ger_$s$wgetXYTranspose ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Num.Num n => Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U><L,U(A,A,C(C(U)),A,A,A,A)> -}
7607f9a778580586814dd9b3412fa410
  getLowerTotalMatrix ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,A><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wgetLowerTotalMatrix @ n w1 ww1 ww3 } }) -}
4a1d9276b41a4fd4682291353b189b53
  getLowerTotalRow ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,A><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(U)><L,U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Types.Int) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w5 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wgetLowerTotalRow
                        @ n
                        w1
                        ww1
                        ww2
                        ww3
                        ww5
                        w4
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
5754f4f5b721da33c01487d74041f75a
  getLowerTotalRow_$s$wgetLowerTotalRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 9,
     Strictness: <S,U><L,U><S,U><S,U><S,U><S,U><L,U><L,U><L,U> -}
493fee99e32007a1295de08981d0c9b3
  getUpperTotalMatrix ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,A><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wgetUpperTotalMatrix @ n w1 ww1 ww3 } }) -}
0794b9702bc7c6f42b4fa79eab55fef7
  getUpperTotalRow ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,A><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(U)><L,1*U(1*U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Types.Int) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w5 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wgetUpperTotalRow
                        @ n
                        w1
                        ww1
                        ww2
                        ww3
                        ww5
                        w4
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
a74568c7bd3d9f3205bf3b88b2b33b25
  getUpperTotalRow1 ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Addr# -> n
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
86434b2acff90e481cbbda303f801e5e
  getUpperTotalRow2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Addr# -> Data.Vector.Vector n
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
ebe1777b27794eaf97b93cb9383fa39f
  getUpperTotalRow_$s$wgetUpperTotalRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 9,
     Strictness: <S,U><L,1*U><S,U><S,U><S,U><S,U><L,U><L,U><L,U> -}
093a0ddb444e95797e7cf6548aca0971
  getUpperTotalRow_$s$wgetUpperTotalRow1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 7,
     Strictness: <S,U><L,1*U><S,U><S,U><S,U><S,U><L,U(U,U,U)> -}
5eb9dc1f3d8798a9f396039bcfa65cf3
  getXYTranspose ::
    GHC.Num.Num n =>
    Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C(U)),A,A,A,A)><S(SSS),1*U(U,1*U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector n)
                   (w2 :: Data.Vector.Vector n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wgetXYTranspose @ n w ww1 ww2 ww3 w2 }) -}
2a7946e46e63e759fd91ddebc97928a1
  symv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,1*U(U,U,U)><S,1*U><L,1*U><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n)
                   (w6 :: GHC.Types.Char) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w6 of ww4 { GHC.Types.C# ww5 ->
                 HBLAS.Level2.$wsymv @ n w w1 ww1 ww2 ww3 w3 w4 w5 ww5 } }) -}
c7cbcdc78c0c977375d7d1b33f35df5f
  symvLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,1*U(U,U,U)><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsymvLower @ n w w1 ww1 ww2 ww3 w3 w4 w5 }) -}
4bec375af8159aab6282fd6ecdb85962
  symvUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,1*U(U,U,U)><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsymvUpper @ n w w1 ww1 ww2 ww3 w3 w4 w5 }) -}
f2832a97f507914660e7c8d3f9b4e101
  syr ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S,1*U><S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n)
                   (w4 :: GHC.Types.Char) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w4 of ww4 { GHC.Types.C# ww5 ->
                 case HBLAS.Level2.$wsyr
                        @ n
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        w3
                        ww5 of ww6 { (#,,#) ww7 ww8 ww9 ->
                 Data.Vector.Vector @ (Data.Vector.Vector n) ww7 ww8 ww9 } } }) -}
67df45b8d4e59d82bdd0694350b58248
  syr1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
fb5ba43d2d10d2d9034bfc04cc7851e3
  syr2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><S,U><S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: GHC.Types.Char) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 case w5 of ww8 { GHC.Types.C# ww9 ->
                 case HBLAS.Level2.$wsyr2
                        @ n
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        w4
                        ww9 of ww10 { (#,,#) ww11 ww12 ww13 ->
                 Data.Vector.Vector
                   @ (Data.Vector.Vector n)
                   ww11
                   ww12
                   ww13 } } } }) -}
08a403672f14f31349bf84b8a74f0234
  syr2Lower1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wsyr2Lower1
                   @ n
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7
                   w4 } }) -}
8657a15f46ed1c6ddde91e8f361a52e2
  syr2Lower2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyr2Lower2 @ n w w1 ww1 ww2 ww3 w3 w4 }) -}
208e1465993990949f35b5b4102ce2f0
  syr2Upper1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wsyr2Upper1
                   @ n
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7
                   w4 } }) -}
fbee9cc0bbfdca51f83f762ee1333272
  syr2Upper2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyr2Upper2 @ n w w1 ww1 ww2 ww3 w3 w4 }) -}
9675c110922eabadbedcbda42f7efa11
  syrLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyrLower @ n w w1 ww1 ww2 ww3 w3 }) -}
0a827a1e0f28269c5a48a6a5c88b070f
  syrUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyrUpper @ n w w1 ww1 ww2 ww3 w3 }) -}
050ebe73db44244a1fc29d51bc4cae8c
  trmv ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n -> GHC.Types.Char -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: GHC.Types.Char) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w4 of ww4 { GHC.Types.C# ww5 ->
                 case HBLAS.Level2.$wtrmv
                        @ n
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        ww5 of ww6 { (#,,#) ww7 ww8 ww9 ->
                 Data.Vector.Vector @ n ww7 ww8 ww9 } } }) -}
10bf992ed3e36eacd4053b57d452528e
  trmv1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
514efb86ef93340e9595a8e05d33a17b
  trmvHelper ::
    GHC.Num.Num n => Data.Vector.Vector n -> Data.Vector.Vector n -> n
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector n)
                   (w2 :: Data.Vector.Vector n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wtrmvHelper @ n w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
6b768219e881fa44214ac0e36f8af61b
  trmvLower ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w5 of ww4 { GHC.Types.I# ww5 ->
                 case w6 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wtrmvLower
                        @ n
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        w4
                        ww5
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
2689a1b7b9a9b47aa20d3d2c7771cfc4
  trmvUpper ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w5 of ww4 { GHC.Types.I# ww5 ->
                 case w6 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wtrmvUpper
                        @ n
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        w4
                        ww5
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
85a8bddd3d31fe8afd9362a7a99d2e1b
  trmv_$s$wtrmvLower ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 10,
     Strictness: <S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U><L,U(U,U,U)><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)> -}
5e433dc8e471b30ffe4ebc73fe2c4017
  trmv_$s$wtrmvUpper ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 10,
     Strictness: <S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U><L,U(U,U,U)><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)> -}
794df3f783e9a6d55cb133d0623d49cb
  trsv ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n -> GHC.Types.Char -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: GHC.Types.Char) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w4 of ww4 { GHC.Types.C# ww5 ->
                 HBLAS.Level2.$wtrsv @ n w1 w2 ww1 ww2 ww3 ww5 } }) -}
3f702e59202cfb5d356e98b91936a884
  trsvHelper ::
    GHC.Num.Num n =>
    Data.Vector.Vector n -> Data.Vector.Vector n -> n -> n
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLLLL),U(C(C1(U)),1*C1(C1(U)),C(C1(U)),A,A,A,1*C1(U))><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   (veca :: Data.Vector.Vector n)
                   (vecx :: Data.Vector.Vector n)
                   (valueb :: n) ->
                 GHC.Num.-
                   @ n
                   $dNum
                   valueb
                   (case veca of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                    case vecx of v1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                    letrec {
                      $s$wfoldlM'_loop :: GHC.Prim.Int# -> GHC.Prim.Int# -> n -> n
                        <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,1*U> -}
                      = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) (sc2 :: n) ->
                        case sc2 of z2 { DEFAULT ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.>=# sc1 ipv1) of wild {
                          GHC.Types.False
                          -> case GHC.Prim.indexArray#
                                    @ n
                                    ipv2
                                    (GHC.Prim.+# ipv sc1) of ds3 { Unit# ipv6 ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc ipv4) of wild1 {
                               GHC.Types.False
                               -> $s$wfoldlM'_loop
                                    (GHC.Prim.+# sc 1#)
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Num.+
                                       @ n
                                       $dNum
                                       z2
                                       (case GHC.Prim.indexArray#
                                               @ n
                                               ipv5
                                               (GHC.Prim.+# ipv3 sc) of ds1 { Unit# ipv7 ->
                                        GHC.Num.* @ n $dNum ipv6 ipv7 }))
                               GHC.Types.True -> z2 } }
                          GHC.Types.True -> z2 } }
                    } in
                    $s$wfoldlM'_loop
                      0#
                      0#
                      (GHC.Num.fromInteger @ n $dNum HBLAS.Level2.trmv1) } })) -}
5cc9e5c64a3922264b00ecb0b6193628
  trsvLower ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Data.Vector.Vector n, Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w5 of ww { GHC.Types.I# ww1 ->
                 case w6 of ww2 { GHC.Types.I# ww3 ->
                 case HBLAS.Level2.$wtrsvLower
                        @ n
                        w1
                        w2
                        w3
                        w4
                        ww1
                        ww3 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } } }) -}
201a534db925d45b9ce17b079b3164c6
  trsvUpper ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Data.Vector.Vector n, Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w5 of ww { GHC.Types.I# ww1 ->
                 case w6 of ww2 { GHC.Types.I# ww3 ->
                 case HBLAS.Level2.$wtrsvUpper
                        @ n
                        w1
                        w2
                        w3
                        w4
                        ww1
                        ww3 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } } }) -}
361bbb9a78f32568f348b9dcc9738f09
  trsv_$s$wtrsvLower ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 8,
     Strictness: <S,U><S,U><L,U><L,U><L,U><L,U(U,U,U)><L,U(U,U,U)><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)> -}
f757cca626f2aecdcb37d8efea601764
  trsv_$s$wtrsvUpper ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 8,
     Strictness: <S,U><S,U><L,U><L,U><L,U><L,U(U,U,U)><L,U(U,U,U)><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)> -}
"SC:$wgetLowerTotalRow0" [0] forall @ n
                                    (sc :: GHC.Prim.Int#)
                                    (sc1 :: GHC.Prim.Int#)
                                    (sc2 :: GHC.Prim.Int#)
                                    (sc3 :: GHC.Prim.Array# n)
                                    (sc4 :: GHC.Prim.Int#)
                                    (sc5 :: GHC.Prim.Int#)
                                    (sc6 :: GHC.Prim.Int#)
                                    (sc7 :: GHC.Prim.Int#)
                                    (sc8 :: GHC.Prim.Array# (Data.Vector.Vector n))
  HBLAS.Level2.$wgetLowerTotalRow @ n
                                  (Data.Vector.Vector @ (Data.Vector.Vector n) sc6 sc7 sc8)
                                  sc5
                                  sc4
                                  sc3
                                  sc2
                                  (GHC.Types.I# sc1)
                                  sc
  = HBLAS.Level2.getLowerTotalRow_$s$wgetLowerTotalRow
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SC:$wgetUpperTotalRow0" [0] forall @ n
                                    (sc :: GHC.Prim.Int#)
                                    (sc1 :: GHC.Prim.Int#)
                                    (sc2 :: GHC.Prim.Int#)
                                    (sc3 :: GHC.Prim.Array# n)
                                    (sc4 :: GHC.Prim.Int#)
                                    (sc5 :: GHC.Prim.Int#)
                                    (sc6 :: GHC.Prim.Int#)
                                    (sc7 :: GHC.Prim.Int#)
                                    (sc8 :: GHC.Prim.Array# (Data.Vector.Vector n))
  HBLAS.Level2.$wgetUpperTotalRow @ n
                                  (Data.Vector.Vector @ (Data.Vector.Vector n) sc6 sc7 sc8)
                                  sc5
                                  sc4
                                  sc3
                                  sc2
                                  (GHC.Types.I# sc1)
                                  sc
  = HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SC:$wgetUpperTotalRow1" [0] forall @ n
                                    (sc :: GHC.Prim.Int#)
                                    (sc1 :: GHC.Prim.Int#)
                                    (sc2 :: GHC.Prim.Int#)
                                    (sc3 :: GHC.Prim.Array# n)
                                    (sc4 :: GHC.Prim.Int#)
                                    (sc5 :: GHC.Prim.Int#)
                                    (sc6 :: Data.Vector.Vector (Data.Vector.Vector n))
  HBLAS.Level2.$wgetUpperTotalRow @ n
                                  sc6
                                  sc5
                                  sc4
                                  sc3
                                  sc2
                                  (GHC.Types.I# sc1)
                                  sc
  = HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow1
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
"SC:$wgetXYTranspose0" [0] forall @ n
                                  (sc :: GHC.Prim.Int#)
                                  (sc1 :: GHC.Prim.Int#)
                                  (sc2 :: GHC.Prim.Array# n)
                                  (sc3 :: GHC.Prim.Array# n)
                                  (sc4 :: GHC.Prim.Int#)
                                  (sc5 :: GHC.Prim.Int#)
                                  (sc6 :: GHC.Num.Num n)
  HBLAS.Level2.$wgetXYTranspose @ n
                                sc6
                                sc5
                                sc4
                                sc3
                                (Data.Vector.Vector @ n sc sc1 sc2)
  = HBLAS.Level2.ger_$s$wgetXYTranspose
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
"SC:$wtrmvLower0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: GHC.Prim.Array# n)
                             (sc6 :: GHC.Prim.Int#)
                             (sc7 :: GHC.Prim.Int#)
                             (sc8 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc9 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrmvLower @ n
                           sc9
                           sc8
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trmv_$s$wtrmvLower
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$wtrmvUpper0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: GHC.Prim.Array# n)
                             (sc6 :: GHC.Prim.Int#)
                             (sc7 :: GHC.Prim.Int#)
                             (sc8 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc9 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrmvUpper @ n
                           sc9
                           sc8
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trmv_$s$wtrmvUpper
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$wtrsvLower0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: Data.Vector.Vector n)
                             (sc6 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc7 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrsvLower @ n
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trsv_$s$wtrsvLower
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$wtrsvUpper0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: Data.Vector.Vector n)
                             (sc6 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc7 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrsvUpper @ n
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trsv_$s$wtrsvUpper
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

