
==================== FINAL INTERFACE ====================
2020-05-19 12:40:55.526694 UTC

interface main:Main 8022
  interface hash: f80e5f15639e5e258036b94879aa3d38
  ABI hash: 70aaf92fe9b74cc9ba44279d8849d388
  export-list hash: 5fbaa0fe3c130358e0aacf4879ae250e
  orphan hash: 16ac18cca3d81c8e83cc4f71ad6a458a
  flag hash: 9a3c3b85e7bf6a96d19af0370991599b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.repeatNTimes
  Main.round4dp
  Main.tfqmr
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 hblas-0.0.0.0 integer-gmp-1.0.1.0 loop-0.3.0
                      matrix-0.3.5.0 primitive-0.6.3.0 time-1.8.0.2 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hblas-0.0.0.0:HBLAS.Class 4610295a6fba69f91f0316e9de344d57
import  -/  hblas-0.0.0.0:HBLAS.IO.Vector 3f4c604d8832c2fe1d8cf2ed52536388
import  -/  hblas-0.0.0.0:HBLAS.Level1 885535461a45b5313bb7e681608c9c35
import  -/  hblas-0.0.0.0:HBLAS.Level2 1bead8235c63eeddde7bae93a9da51e6
import  -/  time-1.8.0.2:Data.Time 94c4b97ca0ea17df29bc6210fb9e1b2b
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a07e012374f68f0eec645405302031bb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9bbc4ffee03d887b4be58f486cb9ae4c
import  -/  vector-0.12.0.1:Data.Vector 05d09acb6f8f89c1df7193ef513155f3
05c3a02ae9675f761f871194ef9b221e
  $s$wcreateSymSq ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector GHC.Types.Float)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [~] -}
7d37e2b4052a2b8e81a7e25c597d9e0a
  $s$wcreateVecX ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Float
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [~] -}
4037c972197a0c88217594c9989277ee
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
0f1a95d29eb129d139de800e53a25678
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c9f0ae6af767c92c7e2d66814cef1e4f
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
60b96fad6a4543de1c2e9acde552af27
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger# w1 Main.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             Main.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.I# ww1 -> Main.$wf ww1 w1 }
                        GHC.Types.True -> 1# } }
                   GHC.Types.True -> case Main.$s^1 ret_ty GHC.Prim.Int# of {} } }) -}
c38fb36d62e37c1de337e4c727d1b3e9
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
8e7b17c8581eb1bd6fff4f5e70192ed9
  $wround4dp :: GHC.Real.RealFrac n => n -> n
  {- Arity: 2,
     Strictness: <S(LS(LC(C(S))LL)LLLLL),U(1*U(1*U(A,A,1*C1(C1(U)),A,A,A,1*C1(U)),A,A),1*U(A,1*C1(C1(U)),A,C(U)),A,A,1*C1(C1(U)),A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ n6 (w :: GHC.Real.RealFrac n6) (w1 :: n6) ->
                 let {
                   $dFractional :: GHC.Real.Fractional n6
                   = GHC.Real.$p2RealFrac @ n6 w
                 } in
                 GHC.Real./
                   @ n6
                   $dFractional
                   (let {
                      $dReal :: GHC.Real.Real n6 = GHC.Real.$p1RealFrac @ n6 w
                    } in
                    let {
                      $dNum :: GHC.Num.Num n6 = GHC.Real.$p1Real @ n6 $dReal
                    } in
                    GHC.Num.fromInteger
                      @ n6
                      $dNum
                      (GHC.Real.round
                         @ n6
                         w
                         @ GHC.Integer.Type.Integer
                         GHC.Real.$fIntegralInteger
                         (GHC.Num.*
                            @ n6
                            $dNum
                            w1
                            (GHC.Real.fromRational @ n6 $dFractional Main.round4dp1))))
                   (GHC.Real.fromRational @ n6 $dFractional Main.round4dp1)) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
94c70927b4430f3e495df7280b461372
  repeatNTimes ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) =>
    t -> m a -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ t
                   @ m :: * -> *
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($dNum :: GHC.Num.Num t)
                   ($dEq :: GHC.Classes.Eq t)
                   (eta :: t)
                   (eta1 :: m a) ->
                 let {
                   lvl171 :: t = GHC.Num.fromInteger @ t $dNum Main.repeatNTimes1
                 } in
                 let {
                   lvl172 :: m () = GHC.Base.return @ m $dMonad @ () GHC.Tuple.()
                 } in
                 let {
                   lvl173 :: t = GHC.Num.fromInteger @ t $dNum Main.$s^2
                 } in
                 letrec {
                   repeatNTimes2 :: t -> m a -> m ()
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (ds :: t) (ds1 :: m a) ->
                     case GHC.Classes.== @ t $dEq ds lvl173 of wild {
                       GHC.Types.False
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ a
                            @ ()
                            ds1
                            (repeatNTimes2 (GHC.Num.- @ t $dNum ds lvl171) ds1)
                       GHC.Types.True -> lvl172 }
                 } in
                 repeatNTimes2 eta eta1) -}
69e9c734f6c0a09c11d4d6d6ffaf7332
  repeatNTimes1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
6945055efe160a8b1802027f4c884d26
  round4dp ::
    (GHC.Num.Num n, GHC.Real.RealFrac n, GHC.Real.Fractional n,
     GHC.Classes.Ord n, GHC.Float.Floating n) =>
    n -> n
  {- Arity: 6,
     Strictness: <L,A><S(LS(LC(C(S))LL)LLLLL),U(U(U(A,A,C(C1(U)),A,A,A,C(U)),A,A),U(A,C(C1(U)),A,C(U)),A,A,C(C1(U)),A,A)><L,A><L,A><L,A><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ n6
                   (w :: GHC.Num.Num n6)
                   (w1 :: GHC.Real.RealFrac n6)
                   (w2 :: GHC.Real.Fractional n6)
                   (w3 :: GHC.Classes.Ord n6)
                   (w4 :: GHC.Float.Floating n6)
                   (w5 :: n6) ->
                 Main.$wround4dp @ n6 w1 w5) -}
eeae0c0a69279030e3d717e18bbeaeb1
  round4dp1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.round4dp2
                   Main.repeatNTimes1) -}
d26793f60ac535d06c4551d197f7f726
  round4dp2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10000) -}
e23529ca9a9f6f186f6f9d65e55cbff0
  tfqmr ::
    (GHC.Num.Num n, GHC.Real.Fractional n, GHC.Classes.Ord n,
     GHC.Float.Floating n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 8,
     Strictness: <L,A><S(S(LLLLLLC(S))LLL),1*U(1*U(C(C1(U)),C(C1(U)),C(C1(U)),1*C1(U),A,A,C(U)),A,A,A)><L,U(1*U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A)><L,U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSL),1*U(U,U,U)><S,1*U(U,U,U)><S,1*U(U,U,U)><S,1*U>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (8, False, False)
                (\ @ n6
                   ($dNum :: GHC.Num.Num n6)
                   ($dFractional :: GHC.Real.Fractional n6)
                   ($dOrd :: GHC.Classes.Ord n6)
                   ($dFloating :: GHC.Float.Floating n6) ->
                 let {
                   $dFractional1 :: GHC.Real.Fractional n6
                   = GHC.Float.$p1Floating @ n6 $dFloating
                 } in
                 let {
                   $dEq :: GHC.Classes.Eq n6 = GHC.Classes.$p1Ord @ n6 $dOrd
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num n6 = GHC.Real.$p1Fractional @ n6 $dFractional
                 } in
                 \ (a :: Data.Vector.Vector (Data.Vector.Vector n6))
                   (b :: Data.Vector.Vector n6)
                   (vec0 :: Data.Vector.Vector n6)
                   (tol :: n6) ->
                 case a of a1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case b of b1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                 case vec0 of vec1 { Data.Vector.Vector ipv6 ipv7 ipv8 ->
                 case tol of tol1 { DEFAULT ->
                 case GHC.Num.fromInteger @ n6 $dNum1 0 of m { DEFAULT ->
                 case GHC.Num.fromInteger @ n6 $dNum1 0 of eta { DEFAULT ->
                 case GHC.Num.fromInteger @ n6 $dNum1 0 of theta { DEFAULT ->
                 case GHC.Num.fromInteger @ n6 $dNum1 1 of k { DEFAULT ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ n6
                        (Data.Vector.$fVectorVectora @ n6)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ n6
                           (Data.Vector.$fVectorVectora @ n6)
                           (Data.Vector.Fusion.Bundle.inplace
                              @ (Data.Vector.Vector n6)
                              @ n6
                              @ Data.Vector.Vector
                              (\ @ m1 :: * -> * ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m1
                                 @ (Data.Vector.Vector n6)
                                 @ n6
                                 $dMonad
                                 (let {
                                    f1 :: n6 -> m1 n6 = GHC.Base.return @ m1 $dMonad @ n6
                                  } in
                                  \ (x1 :: Data.Vector.Vector n6) ->
                                  f1
                                    (case x1 of b2 { Data.Vector.Vector ipv9 ipv10 ipv11 ->
                                     let {
                                       f :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum1
                                     } in
                                     let {
                                       f2 :: n6 -> n6 -> n6 = GHC.Num.* @ n6 $dNum1
                                     } in
                                     (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                        @ Data.Vector.Fusion.Util.Id
                                        @ n6
                                        @ n6
                                        @ Data.Vector.Vector
                                        Data.Vector.Fusion.Util.$fMonadId
                                        (\ (a2 :: n6) (b3 :: n6)[OneShot] -> f a2 b3)
                                          `cast`
                                        (<n6>_R
                                         ->_R <n6>_R
                                         ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                        (GHC.Num.fromInteger @ n6 $dNum1 0)
                                        (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ n6
                                           @ n6
                                           @ n6
                                           @ Data.Vector.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (\ (a2 :: n6) (b3 :: n6)[OneShot] -> f2 a2 b3)
                                             `cast`
                                           (<n6>_R
                                            ->_R <n6>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ n6
                                              (Data.Vector.$fVectorVectora @ n6)
                                              b1)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ n6
                                              (Data.Vector.$fVectorVectora @ n6)
                                              b2)))
                                       `cast`
                                     (Data.Vector.Fusion.Util.N:Id[0] <n6>_R) })))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ (Data.Vector.Vector n6)
                                 (Data.Vector.$fVectorVectora @ (Data.Vector.Vector n6))
                                 a1))) of v { Data.Vector.Vector ipv9 ipv10 ipv11 ->
                 let {
                   $dFractional2 :: GHC.Real.Fractional n6
                   = GHC.Float.$p1Floating @ n6 $dFloating
                 } in
                 let {
                   $dNum2 :: GHC.Num.Num n6
                   = GHC.Real.$p1Fractional @ n6 $dFractional2
                 } in
                 let {
                   f1 :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum2
                 } in
                 case GHC.Float.sqrt
                        @ n6
                        $dFloating
                        (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                           @ Data.Vector.Fusion.Util.Id
                           @ n6
                           @ n6
                           @ Data.Vector.Vector
                           Data.Vector.Fusion.Util.$fMonadId
                           (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f1 a2 b2)
                             `cast`
                           (<n6>_R
                            ->_R <n6>_R
                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                           (GHC.Num.fromInteger @ n6 $dNum2 0)
                           (Data.Vector.Fusion.Bundle.inplace
                              @ n6
                              @ n6
                              @ Data.Vector.Vector
                              (\ @ m1 :: * -> * ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m1
                                 @ n6
                                 @ n6
                                 $dMonad
                                 (let {
                                    f3 :: n6 -> m1 n6 = GHC.Base.return @ m1 $dMonad @ n6
                                  } in
                                  \ (x1 :: n6) -> f3 (GHC.Num.* @ n6 $dNum2 x1 x1)))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ n6
                                 (Data.Vector.$fVectorVectora @ n6)
                                 b1)))
                          `cast`
                        (Data.Vector.Fusion.Util.N:Id[0] <n6>_R) of tau { DEFAULT ->
                 case GHC.Num.* @ n6 $dNum1 tau tau of rho { DEFAULT ->
                 letrec {
                   qmr9 :: n6
                           -> (n6, Data.Vector.Vector n6, Data.Vector.Vector n6,
                               Data.Vector.Vector n6, Data.Vector.Vector n6,
                               Data.Vector.Vector n6, Data.Vector.Vector n6, n6, n6, n6, n6,
                               Data.Vector.Vector n6)
                           -> Data.Vector.Vector n6
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: n6)
                       (ds1 :: (n6, Data.Vector.Vector n6, Data.Vector.Vector n6,
                                Data.Vector.Vector n6, Data.Vector.Vector n6,
                                Data.Vector.Vector n6, Data.Vector.Vector n6, n6, n6, n6, n6,
                                Data.Vector.Vector n6)) ->
                     case GHC.Classes.==
                            @ n6
                            $dEq
                            ds
                            (GHC.Num.fromInteger @ n6 $dNum1 100) of wild {
                       GHC.Types.False
                       -> case ds of ds2 { DEFAULT ->
                          case ds1 of wild1 { (,,,,,,,,,,,) m' r' w' y1' d' v' u1' theta' eta' tau' rho' x' ->
                          case m' of m'1 { DEFAULT ->
                          case r' of r'1 { Data.Vector.Vector ipv12 ipv13 ipv14 ->
                          case w' of w'1 { Data.Vector.Vector ipv15 ipv16 ipv17 ->
                          case y1' of y1'1 { Data.Vector.Vector ipv18 ipv19 ipv20 ->
                          case d' of d'1 { Data.Vector.Vector ipv21 ipv22 ipv23 ->
                          case v' of v'1 { Data.Vector.Vector ipv24 ipv25 ipv26 ->
                          case u1' of u1'1 { Data.Vector.Vector ipv27 ipv28 ipv29 ->
                          case theta' of theta'1 { DEFAULT ->
                          case eta' of eta'1 { DEFAULT ->
                          case tau' of tau'1 { DEFAULT ->
                          case rho' of rho'1 { DEFAULT ->
                          case x' of x'1 { Data.Vector.Vector ipv30 ipv31 ipv32 ->
                          case GHC.Num.fromInteger @ n6 $dNum1 1 of j { DEFAULT ->
                          case GHC.Num.+
                                 @ n6
                                 $dNum1
                                 (GHC.Num.-
                                    @ n6
                                    $dNum1
                                    (GHC.Num.* @ n6 $dNum1 (GHC.Num.fromInteger @ n6 $dNum1 2) ds2)
                                    (GHC.Num.fromInteger @ n6 $dNum1 2))
                                 j of mm' { DEFAULT ->
                          let {
                            f :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum1
                          } in
                          let {
                            f2 :: n6 -> n6 -> n6 = GHC.Num.* @ n6 $dNum1
                          } in
                          case (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                  @ Data.Vector.Fusion.Util.Id
                                  @ n6
                                  @ n6
                                  @ Data.Vector.Vector
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f a2 b2)
                                    `cast`
                                  (<n6>_R
                                   ->_R <n6>_R
                                   ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                  (GHC.Num.fromInteger @ n6 $dNum1 0)
                                  (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                     @ Data.Vector.Fusion.Util.Id
                                     @ n6
                                     @ n6
                                     @ n6
                                     @ Data.Vector.Vector
                                     Data.Vector.Fusion.Util.$fMonadId
                                     (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f2 a2 b2)
                                       `cast`
                                     (<n6>_R
                                      ->_R <n6>_R
                                      ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                     (Data.Vector.Generic.stream
                                        @ Data.Vector.Vector
                                        @ n6
                                        (Data.Vector.$fVectorVectora @ n6)
                                        r'1)
                                     (Data.Vector.Generic.stream
                                        @ Data.Vector.Vector
                                        @ n6
                                        (Data.Vector.$fVectorVectora @ n6)
                                        v'1)))
                                 `cast`
                               (Data.Vector.Fusion.Util.N:Id[0] <n6>_R) of sigma { DEFAULT ->
                          case GHC.Real./
                                 @ n6
                                 $dFractional1
                                 rho'1
                                 sigma of alpha { DEFAULT ->
                          case GHC.Num.*
                                 @ n6
                                 $dNum1
                                 (GHC.Num.negate @ n6 $dNum1 (GHC.Num.fromInteger @ n6 $dNum1 1))
                                 alpha of alpha1 { DEFAULT ->
                          case Data.Vector.Generic.new
                                 @ Data.Vector.Vector
                                 @ n6
                                 (Data.Vector.$fVectorVectora @ n6)
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Vector
                                    @ n6
                                    (Data.Vector.$fVectorVectora @ n6)
                                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n6
                                       @ n6
                                       @ n6
                                       @ Data.Vector.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                        GHC.Num.+ @ n6 $dNum1 b2 (GHC.Num.* @ n6 $dNum1 alpha1 a2))
                                         `cast`
                                       (<n6>_R
                                        ->_R <n6>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ n6
                                          (Data.Vector.$fVectorVectora @ n6)
                                          u1'1)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ n6
                                          (Data.Vector.$fVectorVectora @ n6)
                                          w'1))) of ww' { Data.Vector.Vector ipv33 ipv34 ipv35 ->
                          case GHC.Real./
                                 @ n6
                                 $dFractional1
                                 (let {
                                    $dFractional3 :: GHC.Real.Fractional n6
                                    = GHC.Float.$p1Floating @ n6 $dFloating
                                  } in
                                  let {
                                    $dNum3 :: GHC.Num.Num n6
                                    = GHC.Real.$p1Fractional @ n6 $dFractional3
                                  } in
                                  let {
                                    f3 :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum3
                                  } in
                                  GHC.Float.sqrt
                                    @ n6
                                    $dFloating
                                    (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n6
                                       @ n6
                                       @ Data.Vector.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f3 a2 b2)
                                         `cast`
                                       (<n6>_R
                                        ->_R <n6>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                       (GHC.Num.fromInteger @ n6 $dNum3 0)
                                       (Data.Vector.Fusion.Bundle.inplace
                                          @ n6
                                          @ n6
                                          @ Data.Vector.Vector
                                          (\ @ m1 :: * -> *
                                             ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                                           Data.Vector.Fusion.Stream.Monadic.mapM
                                             @ m1
                                             @ n6
                                             @ n6
                                             $dMonad
                                             (let {
                                                f4 :: n6 -> m1 n6
                                                = GHC.Base.return @ m1 $dMonad @ n6
                                              } in
                                              \ (x1 :: n6) -> f4 (GHC.Num.* @ n6 $dNum3 x1 x1)))
                                          (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                          (Data.Vector.Generic.stream
                                             @ Data.Vector.Vector
                                             @ n6
                                             (Data.Vector.$fVectorVectora @ n6)
                                             ww')))
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                 tau'1 of ttheta' { DEFAULT ->
                          case GHC.Real./
                                 @ n6
                                 $dFractional1
                                 (GHC.Num.fromInteger @ n6 $dNum1 1)
                                 (GHC.Float.sqrt
                                    @ n6
                                    $dFloating
                                    (GHC.Num.+
                                       @ n6
                                       $dNum1
                                       (GHC.Num.fromInteger @ n6 $dNum1 1)
                                       (GHC.Num.* @ n6 $dNum1 ttheta' ttheta'))) of c { DEFAULT ->
                          case GHC.Num.*
                                 @ n6
                                 $dNum1
                                 (GHC.Num.* @ n6 $dNum1 tau'1 ttheta')
                                 c of ttau' { DEFAULT ->
                          case GHC.Real./
                                 @ n6
                                 $dFractional1
                                 (GHC.Num.*
                                    @ n6
                                    $dNum1
                                    (GHC.Num.* @ n6 $dNum1 theta'1 theta'1)
                                    eta'1)
                                 alpha of alpha2 { DEFAULT ->
                          case Data.Vector.Generic.new
                                 @ Data.Vector.Vector
                                 @ n6
                                 (Data.Vector.$fVectorVectora @ n6)
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Vector
                                    @ n6
                                    (Data.Vector.$fVectorVectora @ n6)
                                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n6
                                       @ n6
                                       @ n6
                                       @ Data.Vector.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                        GHC.Num.+ @ n6 $dNum1 b2 (GHC.Num.* @ n6 $dNum1 alpha2 a2))
                                         `cast`
                                       (<n6>_R
                                        ->_R <n6>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ n6
                                          (Data.Vector.$fVectorVectora @ n6)
                                          d'1)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ n6
                                          (Data.Vector.$fVectorVectora @ n6)
                                          y1'1))) of dd' { Data.Vector.Vector ipv36 ipv37 ipv38 ->
                          case GHC.Num.*
                                 @ n6
                                 $dNum1
                                 (GHC.Num.* @ n6 $dNum1 c c)
                                 alpha of eeta' { DEFAULT ->
                          case Data.Vector.Generic.new
                                 @ Data.Vector.Vector
                                 @ n6
                                 (Data.Vector.$fVectorVectora @ n6)
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Vector
                                    @ n6
                                    (Data.Vector.$fVectorVectora @ n6)
                                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n6
                                       @ n6
                                       @ n6
                                       @ Data.Vector.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                        GHC.Num.+ @ n6 $dNum1 b2 (GHC.Num.* @ n6 $dNum1 eeta' a2))
                                         `cast`
                                       (<n6>_R
                                        ->_R <n6>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ n6
                                          (Data.Vector.$fVectorVectora @ n6)
                                          dd')
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ n6
                                          (Data.Vector.$fVectorVectora @ n6)
                                          x'1))) of xx' { Data.Vector.Vector ipv39 ipv40 ipv41 ->
                          case GHC.Classes.<=
                                 @ n6
                                 $dOrd
                                 (GHC.Num.*
                                    @ n6
                                    $dNum1
                                    ttau'
                                    (GHC.Float.sqrt
                                       @ n6
                                       $dFloating
                                       (GHC.Num.+
                                          @ n6
                                          $dNum1
                                          mm'
                                          (GHC.Num.fromInteger @ n6 $dNum1 1))))
                                 tol1 of wild2 {
                            GHC.Types.False
                            -> case GHC.Num.*
                                      @ n6
                                      $dNum1
                                      (GHC.Num.negate
                                         @ n6
                                         $dNum1
                                         (GHC.Num.fromInteger @ n6 $dNum1 1))
                                      alpha of alpha3 { DEFAULT ->
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Vector
                                      @ n6
                                      (Data.Vector.$fVectorVectora @ n6)
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Vector
                                         @ n6
                                         (Data.Vector.$fVectorVectora @ n6)
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n6
                                            @ n6
                                            @ n6
                                            @ Data.Vector.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                             GHC.Num.+
                                               @ n6
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n6 $dNum1 alpha3 a2))
                                              `cast`
                                            (<n6>_R
                                             ->_R <n6>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               v'1)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               y1'1))) of yy2 { Data.Vector.Vector ipv42 ipv43 ipv44 ->
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Vector
                                      @ n6
                                      (Data.Vector.$fVectorVectora @ n6)
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Vector
                                         @ n6
                                         (Data.Vector.$fVectorVectora @ n6)
                                         (Data.Vector.Fusion.Bundle.inplace
                                            @ (Data.Vector.Vector n6)
                                            @ n6
                                            @ Data.Vector.Vector
                                            (\ @ m1 :: * -> *
                                               ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                                             Data.Vector.Fusion.Stream.Monadic.mapM
                                               @ m1
                                               @ (Data.Vector.Vector n6)
                                               @ n6
                                               $dMonad
                                               (let {
                                                  f3 :: n6 -> m1 n6
                                                  = GHC.Base.return @ m1 $dMonad @ n6
                                                } in
                                                \ (x1 :: Data.Vector.Vector n6) ->
                                                f3
                                                  (case x1 of b2 { Data.Vector.Vector ipv45 ipv46 ipv47 ->
                                                   let {
                                                     f4 :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum1
                                                   } in
                                                   let {
                                                     f5 :: n6 -> n6 -> n6 = GHC.Num.* @ n6 $dNum1
                                                   } in
                                                   (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ n6
                                                      @ n6
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a2 :: n6) (b3 :: n6)[OneShot] -> f4 a2 b3)
                                                        `cast`
                                                      (<n6>_R
                                                       ->_R <n6>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n6>_R))
                                                      (GHC.Num.fromInteger @ n6 $dNum1 0)
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ n6
                                                         @ n6
                                                         @ n6
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a2 :: n6) (b3 :: n6)[OneShot] ->
                                                          f5 a2 b3)
                                                           `cast`
                                                         (<n6>_R
                                                          ->_R <n6>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <n6>_R))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ n6
                                                            (Data.Vector.$fVectorVectora @ n6)
                                                            yy2)
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ n6
                                                            (Data.Vector.$fVectorVectora @ n6)
                                                            b2)))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0] <n6>_R) })))
                                            (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ (Data.Vector.Vector n6)
                                               (Data.Vector.$fVectorVectora
                                                  @ (Data.Vector.Vector n6))
                                               a1))) of uu2 { Data.Vector.Vector ipv45 ipv46 ipv47 ->
                               case GHC.Num.*
                                      @ n6
                                      $dNum1
                                      (GHC.Num.negate
                                         @ n6
                                         $dNum1
                                         (GHC.Num.fromInteger @ n6 $dNum1 1))
                                      alpha of alpha4 { DEFAULT ->
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Vector
                                      @ n6
                                      (Data.Vector.$fVectorVectora @ n6)
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Vector
                                         @ n6
                                         (Data.Vector.$fVectorVectora @ n6)
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n6
                                            @ n6
                                            @ n6
                                            @ Data.Vector.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                             GHC.Num.+
                                               @ n6
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n6 $dNum1 alpha4 a2))
                                              `cast`
                                            (<n6>_R
                                             ->_R <n6>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               uu2)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               ww'))) of ww { Data.Vector.Vector ipv48 ipv49 ipv50 ->
                               case GHC.Real./
                                      @ n6
                                      $dFractional1
                                      (let {
                                         $dFractional3 :: GHC.Real.Fractional n6
                                         = GHC.Float.$p1Floating @ n6 $dFloating
                                       } in
                                       let {
                                         $dNum3 :: GHC.Num.Num n6
                                         = GHC.Real.$p1Fractional @ n6 $dFractional3
                                       } in
                                       let {
                                         f3 :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum3
                                       } in
                                       GHC.Float.sqrt
                                         @ n6
                                         $dFloating
                                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n6
                                            @ n6
                                            @ Data.Vector.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f3 a2 b2)
                                              `cast`
                                            (<n6>_R
                                             ->_R <n6>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                            (GHC.Num.fromInteger @ n6 $dNum3 0)
                                            (Data.Vector.Fusion.Bundle.inplace
                                               @ n6
                                               @ n6
                                               @ Data.Vector.Vector
                                               (\ @ m1 :: * -> *
                                                  ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                                                Data.Vector.Fusion.Stream.Monadic.mapM
                                                  @ m1
                                                  @ n6
                                                  @ n6
                                                  $dMonad
                                                  (let {
                                                     f4 :: n6 -> m1 n6
                                                     = GHC.Base.return @ m1 $dMonad @ n6
                                                   } in
                                                   \ (x1 :: n6) ->
                                                   f4 (GHC.Num.* @ n6 $dNum3 x1 x1)))
                                               (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Vector
                                                  @ n6
                                                  (Data.Vector.$fVectorVectora @ n6)
                                                  ww)))
                                           `cast`
                                         (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                      ttau' of ttheta { DEFAULT ->
                               case GHC.Real./
                                      @ n6
                                      $dFractional1
                                      (GHC.Num.fromInteger @ n6 $dNum1 1)
                                      (GHC.Float.sqrt
                                         @ n6
                                         $dFloating
                                         (GHC.Num.+
                                            @ n6
                                            $dNum1
                                            (GHC.Num.fromInteger @ n6 $dNum1 1)
                                            (GHC.Num.*
                                               @ n6
                                               $dNum1
                                               ttheta
                                               ttheta))) of cc { DEFAULT ->
                               case GHC.Num.*
                                      @ n6
                                      $dNum1
                                      (GHC.Num.* @ n6 $dNum1 cc cc)
                                      alpha of eeta { DEFAULT ->
                               case GHC.Num.*
                                      @ n6
                                      $dNum1
                                      (GHC.Num.* @ n6 $dNum1 ttau' ttheta)
                                      cc of ttau { DEFAULT ->
                               case GHC.Real./
                                      @ n6
                                      $dFractional1
                                      (GHC.Num.*
                                         @ n6
                                         $dNum1
                                         (GHC.Num.* @ n6 $dNum1 ttheta' ttheta')
                                         eeta')
                                      alpha of alpha5 { DEFAULT ->
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Vector
                                      @ n6
                                      (Data.Vector.$fVectorVectora @ n6)
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Vector
                                         @ n6
                                         (Data.Vector.$fVectorVectora @ n6)
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n6
                                            @ n6
                                            @ n6
                                            @ Data.Vector.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                             GHC.Num.+
                                               @ n6
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n6 $dNum1 alpha5 a2))
                                              `cast`
                                            (<n6>_R
                                             ->_R <n6>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               dd')
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               yy2))) of dd { Data.Vector.Vector ipv51 ipv52 ipv53 ->
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Vector
                                      @ n6
                                      (Data.Vector.$fVectorVectora @ n6)
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Vector
                                         @ n6
                                         (Data.Vector.$fVectorVectora @ n6)
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n6
                                            @ n6
                                            @ n6
                                            @ Data.Vector.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                             GHC.Num.+
                                               @ n6
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n6 $dNum1 eeta a2))
                                              `cast`
                                            (<n6>_R
                                             ->_R <n6>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               dd)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Vector
                                               @ n6
                                               (Data.Vector.$fVectorVectora @ n6)
                                               xx'))) of xx { Data.Vector.Vector ipv54 ipv55 ipv56 ->
                               case GHC.Num.fromInteger @ n6 $dNum1 2 of jj { DEFAULT ->
                               case GHC.Num.+
                                      @ n6
                                      $dNum1
                                      (GHC.Num.-
                                         @ n6
                                         $dNum1
                                         (GHC.Num.*
                                            @ n6
                                            $dNum1
                                            (GHC.Num.fromInteger @ n6 $dNum1 2)
                                            ds2)
                                         (GHC.Num.fromInteger @ n6 $dNum1 2))
                                      jj of mm { DEFAULT ->
                               case GHC.Classes.<=
                                      @ n6
                                      $dOrd
                                      (GHC.Num.*
                                         @ n6
                                         $dNum1
                                         ttau
                                         (GHC.Float.sqrt
                                            @ n6
                                            $dFloating
                                            (GHC.Num.+
                                               @ n6
                                               $dNum1
                                               mm
                                               (GHC.Num.fromInteger @ n6 $dNum1 1))))
                                      tol1 of wild3 {
                                 GHC.Types.False
                                 -> let {
                                      f3 :: n6 -> n6 -> n6 = GHC.Num.+ @ n6 $dNum1
                                    } in
                                    let {
                                      f4 :: n6 -> n6 -> n6 = GHC.Num.* @ n6 $dNum1
                                    } in
                                    case (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n6
                                            @ n6
                                            @ Data.Vector.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f3 a2 b2)
                                              `cast`
                                            (<n6>_R
                                             ->_R <n6>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                            (GHC.Num.fromInteger @ n6 $dNum1 0)
                                            (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                               @ Data.Vector.Fusion.Util.Id
                                               @ n6
                                               @ n6
                                               @ n6
                                               @ Data.Vector.Vector
                                               Data.Vector.Fusion.Util.$fMonadId
                                               (\ (a2 :: n6) (b2 :: n6)[OneShot] -> f4 a2 b2)
                                                 `cast`
                                               (<n6>_R
                                                ->_R <n6>_R
                                                ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Vector
                                                  @ n6
                                                  (Data.Vector.$fVectorVectora @ n6)
                                                  r'1)
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Vector
                                                  @ n6
                                                  (Data.Vector.$fVectorVectora @ n6)
                                                  ww)))
                                           `cast`
                                         (Data.Vector.Fusion.Util.N:Id[0]
                                              <n6>_R) of rhon { DEFAULT ->
                                    case GHC.Real./
                                           @ n6
                                           $dFractional1
                                           rhon
                                           rho'1 of beta { DEFAULT ->
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Vector
                                           @ n6
                                           (Data.Vector.$fVectorVectora @ n6)
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Vector
                                              @ n6
                                              (Data.Vector.$fVectorVectora @ n6)
                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ n6
                                                 @ n6
                                                 @ n6
                                                 @ Data.Vector.Vector
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n6
                                                    $dNum1
                                                    b2
                                                    (GHC.Num.* @ n6 $dNum1 beta a2))
                                                   `cast`
                                                 (<n6>_R
                                                  ->_R <n6>_R
                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ n6
                                                    (Data.Vector.$fVectorVectora @ n6)
                                                    yy2)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ n6
                                                    (Data.Vector.$fVectorVectora @ n6)
                                                    ww))) of yy1 { Data.Vector.Vector ipv57 ipv58 ipv59 ->
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Vector
                                           @ n6
                                           (Data.Vector.$fVectorVectora @ n6)
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Vector
                                              @ n6
                                              (Data.Vector.$fVectorVectora @ n6)
                                              (Data.Vector.Fusion.Bundle.inplace
                                                 @ (Data.Vector.Vector n6)
                                                 @ n6
                                                 @ Data.Vector.Vector
                                                 (\ @ m1 :: * -> *
                                                    ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                                                  Data.Vector.Fusion.Stream.Monadic.mapM
                                                    @ m1
                                                    @ (Data.Vector.Vector n6)
                                                    @ n6
                                                    $dMonad
                                                    (let {
                                                       f5 :: n6 -> m1 n6
                                                       = GHC.Base.return @ m1 $dMonad @ n6
                                                     } in
                                                     \ (x1 :: Data.Vector.Vector n6) ->
                                                     f5
                                                       (case x1 of b2 { Data.Vector.Vector ipv60 ipv61 ipv62 ->
                                                        let {
                                                          f6 :: n6 -> n6 -> n6
                                                          = GHC.Num.+ @ n6 $dNum1
                                                        } in
                                                        let {
                                                          f7 :: n6 -> n6 -> n6
                                                          = GHC.Num.* @ n6 $dNum1
                                                        } in
                                                        (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ n6
                                                           @ n6
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a2 :: n6) (b3 :: n6)[OneShot] ->
                                                            f6 a2 b3)
                                                             `cast`
                                                           (<n6>_R
                                                            ->_R <n6>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <n6>_R))
                                                           (GHC.Num.fromInteger @ n6 $dNum1 0)
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ n6
                                                              @ n6
                                                              @ n6
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a2 :: n6) (b3 :: n6)[OneShot] ->
                                                               f7 a2 b3)
                                                                `cast`
                                                              (<n6>_R
                                                               ->_R <n6>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <n6>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ n6
                                                                 (Data.Vector.$fVectorVectora @ n6)
                                                                 yy1)
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ n6
                                                                 (Data.Vector.$fVectorVectora @ n6)
                                                                 b2)))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <n6>_R) })))
                                                 (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ (Data.Vector.Vector n6)
                                                    (Data.Vector.$fVectorVectora
                                                       @ (Data.Vector.Vector n6))
                                                    a1))) of uu1 { Data.Vector.Vector ipv60 ipv61 ipv62 ->
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Vector
                                           @ n6
                                           (Data.Vector.$fVectorVectora @ n6)
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Vector
                                              @ n6
                                              (Data.Vector.$fVectorVectora @ n6)
                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ n6
                                                 @ n6
                                                 @ n6
                                                 @ Data.Vector.Vector
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n6
                                                    $dNum1
                                                    b2
                                                    (GHC.Num.* @ n6 $dNum1 beta a2))
                                                   `cast`
                                                 (<n6>_R
                                                  ->_R <n6>_R
                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ n6
                                                    (Data.Vector.$fVectorVectora @ n6)
                                                    v'1)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ n6
                                                    (Data.Vector.$fVectorVectora @ n6)
                                                    uu2))) of t { Data.Vector.Vector ipv63 ipv64 ipv65 ->
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Vector
                                           @ n6
                                           (Data.Vector.$fVectorVectora @ n6)
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Vector
                                              @ n6
                                              (Data.Vector.$fVectorVectora @ n6)
                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ n6
                                                 @ n6
                                                 @ n6
                                                 @ Data.Vector.Vector
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 (\ (a2 :: n6) (b2 :: n6)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n6
                                                    $dNum1
                                                    b2
                                                    (GHC.Num.* @ n6 $dNum1 beta a2))
                                                   `cast`
                                                 (<n6>_R
                                                  ->_R <n6>_R
                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n6>_R))
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ n6
                                                    (Data.Vector.$fVectorVectora @ n6)
                                                    t)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Vector
                                                    @ n6
                                                    (Data.Vector.$fVectorVectora @ n6)
                                                    uu1))) of vv { Data.Vector.Vector ipv66 ipv67 ipv68 ->
                                    qmr9
                                      (GHC.Num.+
                                         @ n6
                                         $dNum1
                                         ds2
                                         (GHC.Num.fromInteger @ n6 $dNum1 1))
                                      (mm, r'1, ww, yy1, dd, vv, uu1, ttheta, eeta, ttau, rhon,
                                       xx) } } } } } }
                                 GHC.Types.True -> xx } } } } } } } } } } } } } } }
                            GHC.Types.True
                            -> xx' } } } } } } } } } } } } } } } } } } } } } } } } } } } }
                       GHC.Types.True
                       -> case ds1 of wild1 { (,,,,,,,,,,,) ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 x' ->
                          x' } }
                 } in
                 qmr9
                   k
                   (m, b1, b1, b1, vec1, v, v, theta, eta, tau, rho,
                    vec1) } } } } } } } } } } }) -}
"SPEC/Main $wcreateSymSq @ Float" [orphan] [0] forall (w :: GHC.Num.Num
                                                              GHC.Types.Float)
  HBLAS.IO.Vector.$wcreateSymSq @ GHC.Types.Float w
  = Main.$s$wcreateSymSq
"SPEC/Main $wcreateVecX @ Float" [orphan] [0] forall (w :: GHC.Num.Num
                                                             GHC.Types.Float)
  HBLAS.IO.Vector.$wcreateVecX @ GHC.Types.Float w
  = Main.$s$wcreateVecX
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

