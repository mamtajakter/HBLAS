
==================== LLVM Code ====================
2019-04-26 20:15:20.07529 UTC

target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin"


==================== LLVM Code ====================
2019-04-26 20:15:20.075745 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2019-04-26 20:15:20.075961 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2019-04-26 20:15:20.07733 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2019-04-26 20:15:20.078327 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.079321 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2019-04-26 20:15:20.080309 UTC



==================== LLVM Code ====================
2019-04-26 20:15:20.082219 UTC

%r8Vd_closure_struct = type <{i64, i64}>
@r8Vd_closure$def = internal global %r8Vd_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 0}>
@r8Vd_closure = internal alias i8, bitcast (%r8Vd_closure_struct* @r8Vd_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.082582 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.083082 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.084443 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.08617 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.086722 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.088848 UTC

%u8XS_srt_struct = type <{i64, i64, i64}>
%r8Ve_closure_struct = type <{i64, i64, i64, i64}>
@u8XS_srt$def = internal global %u8XS_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_closure to i64), i64 0}>
@u8XS_srt = internal alias i8, bitcast (%u8XS_srt_struct* @u8XS_srt$def to i8*)
@r8Ve_closure$def = internal global %r8Ve_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Ve_info$def to i64), i64 0, i64 0, i64 0}>
@r8Ve_closure = internal alias i8, bitcast (%r8Ve_closure_struct* @r8Ve_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.091409 UTC

@r8Ve_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Ve_info$def to i8*)
define internal ghccc void @r8Ve_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8XS_srt_struct* @u8XS_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Ve_info$def to i64)) to i32),i32 0)}>
{
c8XP:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8XM = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8XT = load i64*, i64** %Sp_Var
  %ln8XU = getelementptr inbounds i64, i64* %ln8XT, i32 -2
  %ln8XV = ptrtoint i64* %ln8XU to i64
  %ln8XW = icmp ult i64 %ln8XV, %SpLim_Arg
  %ln8XY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8XW, i1 0 )
  br i1 %ln8XY, label %c8XQ, label %c8XR
c8XR:
  %ln8XZ = ptrtoint i64* %Base_Arg to i64
  %ln8Y0 = inttoptr i64 %ln8XZ to i8*
  %ln8Y1 = load i64, i64* %R1_Var
  %ln8Y2 = inttoptr i64 %ln8Y1 to i8*
  %ln8Y3 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8Y4 = call ccc i8* (i8*, i8*) %ln8Y3( i8* %ln8Y0, i8* %ln8Y2 ) nounwind
  %ln8Y5 = ptrtoint i8* %ln8Y4 to i64
  store i64 %ln8Y5, i64* %lc8XM
  %ln8Y6 = load i64, i64* %lc8XM
  %ln8Y7 = icmp eq i64 %ln8Y6, 0
  br i1 %ln8Y7, label %c8XO, label %c8XN
c8XN:
  %ln8Y9 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Y8 = load i64*, i64** %Sp_Var
  %ln8Ya = getelementptr inbounds i64, i64* %ln8Y8, i32 -2
  store i64 %ln8Y9, i64* %ln8Ya, !tbaa !2
  %ln8Yc = load i64, i64* %lc8XM
  %ln8Yb = load i64*, i64** %Sp_Var
  %ln8Yd = getelementptr inbounds i64, i64* %ln8Yb, i32 -1
  store i64 %ln8Yc, i64* %ln8Yd, !tbaa !2
  store i64 1000, i64* %R5_Var
  %ln8Ye = ptrtoint %r8Vd_closure_struct* @r8Vd_closure$def to i64
  %ln8Yf = add i64 %ln8Ye, 1
  store i64 %ln8Yf, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln8Yg = ptrtoint i8* @base_GHCziFloat_zdfNumFloat_closure to i64
  store i64 %ln8Yg, i64* %R2_Var
  %ln8Yh = load i64*, i64** %Sp_Var
  %ln8Yi = getelementptr inbounds i64, i64* %ln8Yh, i32 -2
  %ln8Yj = ptrtoint i64* %ln8Yi to i64
  %ln8Yk = inttoptr i64 %ln8Yj to i64*
  store i64* %ln8Yk, i64** %Sp_Var
  %ln8Yl = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ym = load i64*, i64** %Sp_Var
  %ln8Yn = load i64, i64* %R1_Var
  %ln8Yo = load i64, i64* %R2_Var
  %ln8Yp = load i64, i64* %R3_Var
  %ln8Yq = load i64, i64* %R4_Var
  %ln8Yr = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Yl( i64* %Base_Arg, i64* %ln8Ym, i64* %Hp_Arg, i64 %ln8Yn, i64 %ln8Yo, i64 %ln8Yp, i64 %ln8Yq, i64 %ln8Yr, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8XO:
  %ln8Yt = load i64, i64* %R1_Var
  %ln8Yu = inttoptr i64 %ln8Yt to i64*
  %ln8Yv = load i64, i64* %ln8Yu, !tbaa !4
  %ln8Yw = inttoptr i64 %ln8Yv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Yx = load i64*, i64** %Sp_Var
  %ln8Yy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Yw( i64* %Base_Arg, i64* %ln8Yx, i64* %Hp_Arg, i64 %ln8Yy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8XQ:
  %ln8Yz = load i64, i64* %R1_Var
  store i64 %ln8Yz, i64* %R1_Var
  %ln8YA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8YB = bitcast i64* %ln8YA to i64*
  %ln8YC = load i64, i64* %ln8YB, !tbaa !5
  %ln8YD = inttoptr i64 %ln8YC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8YE = load i64*, i64** %Sp_Var
  %ln8YF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8YD( i64* %Base_Arg, i64* %ln8YE, i64* %Hp_Arg, i64 %ln8YF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2019-04-26 20:15:20.09485 UTC

%u8YP_srt_struct = type <{i64, i64, i64}>
%r8Vf_closure_struct = type <{i64, i64, i64, i64}>
@u8YP_srt$def = internal global %u8YP_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymSq_closure to i64), i64 0}>
@u8YP_srt = internal alias i8, bitcast (%u8YP_srt_struct* @u8YP_srt$def to i8*)
@r8Vf_closure$def = internal global %r8Vf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vf_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vf_closure = internal alias i8, bitcast (%r8Vf_closure_struct* @r8Vf_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.097501 UTC

@r8Vf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vf_info$def to i8*)
define internal ghccc void @r8Vf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8YP_srt_struct* @u8YP_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vf_info$def to i64)) to i32),i32 0)}>
{
c8YM:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8YJ = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8YQ = load i64*, i64** %Sp_Var
  %ln8YR = getelementptr inbounds i64, i64* %ln8YQ, i32 -2
  %ln8YS = ptrtoint i64* %ln8YR to i64
  %ln8YT = icmp ult i64 %ln8YS, %SpLim_Arg
  %ln8YU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8YT, i1 0 )
  br i1 %ln8YU, label %c8YN, label %c8YO
c8YO:
  %ln8YV = ptrtoint i64* %Base_Arg to i64
  %ln8YW = inttoptr i64 %ln8YV to i8*
  %ln8YX = load i64, i64* %R1_Var
  %ln8YY = inttoptr i64 %ln8YX to i8*
  %ln8YZ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8Z0 = call ccc i8* (i8*, i8*) %ln8YZ( i8* %ln8YW, i8* %ln8YY ) nounwind
  %ln8Z1 = ptrtoint i8* %ln8Z0 to i64
  store i64 %ln8Z1, i64* %lc8YJ
  %ln8Z2 = load i64, i64* %lc8YJ
  %ln8Z3 = icmp eq i64 %ln8Z2, 0
  br i1 %ln8Z3, label %c8YL, label %c8YK
c8YK:
  %ln8Z5 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Z4 = load i64*, i64** %Sp_Var
  %ln8Z6 = getelementptr inbounds i64, i64* %ln8Z4, i32 -2
  store i64 %ln8Z5, i64* %ln8Z6, !tbaa !2
  %ln8Z8 = load i64, i64* %lc8YJ
  %ln8Z7 = load i64*, i64** %Sp_Var
  %ln8Z9 = getelementptr inbounds i64, i64* %ln8Z7, i32 -1
  store i64 %ln8Z8, i64* %ln8Z9, !tbaa !2
  store i64 1000, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln8Za = ptrtoint i8* @base_GHCziFloat_zdfNumFloat_closure to i64
  store i64 %ln8Za, i64* %R2_Var
  %ln8Zb = load i64*, i64** %Sp_Var
  %ln8Zc = getelementptr inbounds i64, i64* %ln8Zb, i32 -2
  %ln8Zd = ptrtoint i64* %ln8Zc to i64
  %ln8Ze = inttoptr i64 %ln8Zd to i64*
  store i64* %ln8Ze, i64** %Sp_Var
  %ln8Zf = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymSq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Zg = load i64*, i64** %Sp_Var
  %ln8Zh = load i64, i64* %R1_Var
  %ln8Zi = load i64, i64* %R2_Var
  %ln8Zj = load i64, i64* %R3_Var
  %ln8Zk = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Zf( i64* %Base_Arg, i64* %ln8Zg, i64* %Hp_Arg, i64 %ln8Zh, i64 %ln8Zi, i64 %ln8Zj, i64 %ln8Zk, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8YL:
  %ln8Zm = load i64, i64* %R1_Var
  %ln8Zn = inttoptr i64 %ln8Zm to i64*
  %ln8Zo = load i64, i64* %ln8Zn, !tbaa !4
  %ln8Zp = inttoptr i64 %ln8Zo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Zq = load i64*, i64** %Sp_Var
  %ln8Zr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Zp( i64* %Base_Arg, i64* %ln8Zq, i64* %Hp_Arg, i64 %ln8Zr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8YN:
  %ln8Zs = load i64, i64* %R1_Var
  store i64 %ln8Zs, i64* %R1_Var
  %ln8Zt = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Zu = bitcast i64* %ln8Zt to i64*
  %ln8Zv = load i64, i64* %ln8Zu, !tbaa !5
  %ln8Zw = inttoptr i64 %ln8Zv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Zx = load i64*, i64** %Sp_Var
  %ln8Zy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Zw( i64* %Base_Arg, i64* %ln8Zx, i64* %Hp_Arg, i64 %ln8Zy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.100803 UTC

%r8Vg_bytes_struct = type <{[8 x i8]}>
@r8Vg_bytes$def = internal constant %r8Vg_bytes_struct<{[8 x i8] [i8 71, i8 69, i8 77, i8 86, i8 32, i8 58, i8 32, i8 0]}>, align 1
@r8Vg_bytes = internal alias i8, bitcast (%r8Vg_bytes_struct* @r8Vg_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.102174 UTC

%r8Vh_closure_struct = type <{i64, i64}>
@r8Vh_closure$def = internal global %r8Vh_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_con_info to i64), i64 1000000000000000000}>
@r8Vh_closure = internal alias i8, bitcast (%r8Vh_closure_struct* @r8Vh_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.102856 UTC

%r8Vi_closure_struct = type <{i64, float, i32}>
@r8Vi_closure$def = internal global %r8Vi_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Fzh_con_info to i64), float 0x3FF0000000000000, i32 0}>
@r8Vi_closure = internal alias i8, bitcast (%r8Vi_closure_struct* @r8Vi_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.103497 UTC

%r8Vj_bytes_struct = type <{[13 x i8]}>
@r8Vj_bytes$def = internal constant %r8Vj_bytes_struct<{[13 x i8] [i8 77, i8 97, i8 116, i8 114, i8 105, i8 120, i8 32, i8 115, i8 105, i8 122, i8 101, i8 32, i8 0]}>, align 1
@r8Vj_bytes = internal alias i8, bitcast (%r8Vj_bytes_struct* @r8Vj_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.104533 UTC

%r8Vk_bytes_struct = type <{[2 x i8]}>
@r8Vk_bytes$def = internal constant %r8Vk_bytes_struct<{[2 x i8] [i8 88, i8 0]}>, align 1
@r8Vk_bytes = internal alias i8, bitcast (%r8Vk_bytes_struct* @r8Vk_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.105587 UTC

%r8Vl_bytes_struct = type <{[3 x i8]}>
@r8Vl_bytes$def = internal constant %r8Vl_bytes_struct<{[3 x i8] [i8 58, i8 32, i8 0]}>, align 1
@r8Vl_bytes = internal alias i8, bitcast (%r8Vl_bytes_struct* @r8Vl_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.107128 UTC

%r8Vm_closure_struct = type <{i64, i64, i64, i64}>
@r8Vm_closure$def = internal global %r8Vm_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vm_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vm_closure = internal alias i8, bitcast (%r8Vm_closure_struct* @r8Vm_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.108895 UTC

@r8Vm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vm_info$def to i8*)
define internal ghccc void @r8Vm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
c8ZF:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8ZC = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8ZI = load i64*, i64** %Sp_Var
  %ln8ZJ = getelementptr inbounds i64, i64* %ln8ZI, i32 -2
  %ln8ZK = ptrtoint i64* %ln8ZJ to i64
  %ln8ZL = icmp ult i64 %ln8ZK, %SpLim_Arg
  %ln8ZM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8ZL, i1 0 )
  br i1 %ln8ZM, label %c8ZG, label %c8ZH
c8ZH:
  %ln8ZN = ptrtoint i64* %Base_Arg to i64
  %ln8ZO = inttoptr i64 %ln8ZN to i8*
  %ln8ZP = load i64, i64* %R1_Var
  %ln8ZQ = inttoptr i64 %ln8ZP to i8*
  %ln8ZR = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8ZS = call ccc i8* (i8*, i8*) %ln8ZR( i8* %ln8ZO, i8* %ln8ZQ ) nounwind
  %ln8ZT = ptrtoint i8* %ln8ZS to i64
  store i64 %ln8ZT, i64* %lc8ZC
  %ln8ZU = load i64, i64* %lc8ZC
  %ln8ZV = icmp eq i64 %ln8ZU, 0
  br i1 %ln8ZV, label %c8ZE, label %c8ZD
c8ZD:
  %ln8ZX = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8ZW = load i64*, i64** %Sp_Var
  %ln8ZY = getelementptr inbounds i64, i64* %ln8ZW, i32 -2
  store i64 %ln8ZX, i64* %ln8ZY, !tbaa !2
  %ln900 = load i64, i64* %lc8ZC
  %ln8ZZ = load i64*, i64** %Sp_Var
  %ln901 = getelementptr inbounds i64, i64* %ln8ZZ, i32 -1
  store i64 %ln900, i64* %ln901, !tbaa !2
  %ln902 = ptrtoint %r8Vl_bytes_struct* @r8Vl_bytes$def to i64
  store i64 %ln902, i64* %R2_Var
  %ln903 = load i64*, i64** %Sp_Var
  %ln904 = getelementptr inbounds i64, i64* %ln903, i32 -2
  %ln905 = ptrtoint i64* %ln904 to i64
  %ln906 = inttoptr i64 %ln905 to i64*
  store i64* %ln906, i64** %Sp_Var
  %ln907 = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln908 = load i64*, i64** %Sp_Var
  %ln909 = load i64, i64* %R1_Var
  %ln90a = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln907( i64* %Base_Arg, i64* %ln908, i64* %Hp_Arg, i64 %ln909, i64 %ln90a, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ZE:
  %ln90c = load i64, i64* %R1_Var
  %ln90d = inttoptr i64 %ln90c to i64*
  %ln90e = load i64, i64* %ln90d, !tbaa !4
  %ln90f = inttoptr i64 %ln90e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90g = load i64*, i64** %Sp_Var
  %ln90h = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90f( i64* %Base_Arg, i64* %ln90g, i64* %Hp_Arg, i64 %ln90h, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ZG:
  %ln90i = load i64, i64* %R1_Var
  store i64 %ln90i, i64* %R1_Var
  %ln90j = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln90k = bitcast i64* %ln90j to i64*
  %ln90l = load i64, i64* %ln90k, !tbaa !5
  %ln90m = inttoptr i64 %ln90l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90n = load i64*, i64** %Sp_Var
  %ln90o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90m( i64* %Base_Arg, i64* %ln90n, i64* %Hp_Arg, i64 %ln90o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.111885 UTC

%r8Vn_closure_struct = type <{i64, i64, i64, i64}>
@r8Vn_closure$def = internal global %r8Vn_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vn_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vn_closure = internal alias i8, bitcast (%r8Vn_closure_struct* @r8Vn_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.11317 UTC

@r8Vn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vn_info$def to i8*)
define internal ghccc void @r8Vn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vm_closure_struct* @r8Vm_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vn_info$def to i64)) to i32),i32 0)}>
{
c90x:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc90s = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln90B = load i64*, i64** %Sp_Var
  %ln90C = getelementptr inbounds i64, i64* %ln90B, i32 -3
  %ln90D = ptrtoint i64* %ln90C to i64
  %ln90E = icmp ult i64 %ln90D, %SpLim_Arg
  %ln90F = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln90E, i1 0 )
  br i1 %ln90F, label %c90y, label %c90z
c90z:
  %ln90G = ptrtoint i64* %Base_Arg to i64
  %ln90H = inttoptr i64 %ln90G to i8*
  %ln90I = load i64, i64* %R1_Var
  %ln90J = inttoptr i64 %ln90I to i8*
  %ln90K = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln90L = call ccc i8* (i8*, i8*) %ln90K( i8* %ln90H, i8* %ln90J ) nounwind
  %ln90M = ptrtoint i8* %ln90L to i64
  store i64 %ln90M, i64* %lc90s
  %ln90N = load i64, i64* %lc90s
  %ln90O = icmp eq i64 %ln90N, 0
  br i1 %ln90O, label %c90u, label %c90t
c90t:
  %ln90Q = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln90P = load i64*, i64** %Sp_Var
  %ln90R = getelementptr inbounds i64, i64* %ln90P, i32 -2
  store i64 %ln90Q, i64* %ln90R, !tbaa !2
  %ln90T = load i64, i64* %lc90s
  %ln90S = load i64*, i64** %Sp_Var
  %ln90U = getelementptr inbounds i64, i64* %ln90S, i32 -1
  store i64 %ln90T, i64* %ln90U, !tbaa !2
  %ln90W = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90v_info$def to i64
  %ln90V = load i64*, i64** %Sp_Var
  %ln90X = getelementptr inbounds i64, i64* %ln90V, i32 -3
  store i64 %ln90W, i64* %ln90X, !tbaa !2
  %ln90Y = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln90Z = add i64 %ln90Y, 1
  store i64 %ln90Z, i64* %R4_Var
  store i64 1000, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln910 = load i64*, i64** %Sp_Var
  %ln911 = getelementptr inbounds i64, i64* %ln910, i32 -3
  %ln912 = ptrtoint i64* %ln911 to i64
  %ln913 = inttoptr i64 %ln912 to i64*
  store i64* %ln913, i64** %Sp_Var
  %ln914 = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln915 = load i64*, i64** %Sp_Var
  %ln916 = load i64, i64* %R1_Var
  %ln917 = load i64, i64* %R2_Var
  %ln918 = load i64, i64* %R3_Var
  %ln919 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln914( i64* %Base_Arg, i64* %ln915, i64* %Hp_Arg, i64 %ln916, i64 %ln917, i64 %ln918, i64 %ln919, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90u:
  %ln91b = load i64, i64* %R1_Var
  %ln91c = inttoptr i64 %ln91b to i64*
  %ln91d = load i64, i64* %ln91c, !tbaa !4
  %ln91e = inttoptr i64 %ln91d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91f = load i64*, i64** %Sp_Var
  %ln91g = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91e( i64* %Base_Arg, i64* %ln91f, i64* %Hp_Arg, i64 %ln91g, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90y:
  %ln91h = load i64, i64* %R1_Var
  store i64 %ln91h, i64* %R1_Var
  %ln91i = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln91j = bitcast i64* %ln91i to i64*
  %ln91k = load i64, i64* %ln91j, !tbaa !5
  %ln91l = inttoptr i64 %ln91k to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91m = load i64*, i64** %Sp_Var
  %ln91n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91l( i64* %Base_Arg, i64* %ln91m, i64* %Hp_Arg, i64 %ln91n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.115202 UTC

@c90v_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90v_info$def to i8*)
define internal ghccc void @c90v_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vm_closure_struct* @r8Vm_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90v_info$def to i64)) to i32),i32 0)}>
{
c90v:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln91o = load i64, i64* %R2_Var
  store i64 %ln91o, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln91p = ptrtoint %r8Vm_closure_struct* @r8Vm_closure$def to i64
  store i64 %ln91p, i64* %R2_Var
  %ln91q = load i64*, i64** %Sp_Var
  %ln91r = getelementptr inbounds i64, i64* %ln91q, i32 1
  %ln91s = ptrtoint i64* %ln91r to i64
  %ln91t = inttoptr i64 %ln91s to i64*
  store i64* %ln91t, i64** %Sp_Var
  %ln91u = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91v = load i64*, i64** %Sp_Var
  %ln91w = load i64, i64* %R2_Var
  %ln91x = load i64, i64* %R3_Var
  %ln91y = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91u( i64* %Base_Arg, i64* %ln91v, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln91w, i64 %ln91x, i64 %ln91y, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.116398 UTC

%r8Vo_closure_struct = type <{i64, i64, i64, i64}>
@r8Vo_closure$def = internal global %r8Vo_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vo_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vo_closure = internal alias i8, bitcast (%r8Vo_closure_struct* @r8Vo_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.117678 UTC

@r8Vo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vo_info$def to i8*)
define internal ghccc void @r8Vo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vn_closure_struct* @r8Vn_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vo_info$def to i64)) to i32),i32 0)}>
{
c91F:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc91C = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln91I = load i64*, i64** %Sp_Var
  %ln91J = getelementptr inbounds i64, i64* %ln91I, i32 -2
  %ln91K = ptrtoint i64* %ln91J to i64
  %ln91L = icmp ult i64 %ln91K, %SpLim_Arg
  %ln91M = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln91L, i1 0 )
  br i1 %ln91M, label %c91G, label %c91H
c91H:
  %ln91N = ptrtoint i64* %Base_Arg to i64
  %ln91O = inttoptr i64 %ln91N to i8*
  %ln91P = load i64, i64* %R1_Var
  %ln91Q = inttoptr i64 %ln91P to i8*
  %ln91R = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln91S = call ccc i8* (i8*, i8*) %ln91R( i8* %ln91O, i8* %ln91Q ) nounwind
  %ln91T = ptrtoint i8* %ln91S to i64
  store i64 %ln91T, i64* %lc91C
  %ln91U = load i64, i64* %lc91C
  %ln91V = icmp eq i64 %ln91U, 0
  br i1 %ln91V, label %c91E, label %c91D
c91D:
  %ln91X = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln91W = load i64*, i64** %Sp_Var
  %ln91Y = getelementptr inbounds i64, i64* %ln91W, i32 -2
  store i64 %ln91X, i64* %ln91Y, !tbaa !2
  %ln920 = load i64, i64* %lc91C
  %ln91Z = load i64*, i64** %Sp_Var
  %ln921 = getelementptr inbounds i64, i64* %ln91Z, i32 -1
  store i64 %ln920, i64* %ln921, !tbaa !2
  %ln922 = ptrtoint %r8Vn_closure_struct* @r8Vn_closure$def to i64
  store i64 %ln922, i64* %R3_Var
  %ln923 = ptrtoint %r8Vk_bytes_struct* @r8Vk_bytes$def to i64
  store i64 %ln923, i64* %R2_Var
  %ln924 = load i64*, i64** %Sp_Var
  %ln925 = getelementptr inbounds i64, i64* %ln924, i32 -2
  %ln926 = ptrtoint i64* %ln925 to i64
  %ln927 = inttoptr i64 %ln926 to i64*
  store i64* %ln927, i64** %Sp_Var
  %ln928 = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln929 = load i64*, i64** %Sp_Var
  %ln92a = load i64, i64* %R1_Var
  %ln92b = load i64, i64* %R2_Var
  %ln92c = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln928( i64* %Base_Arg, i64* %ln929, i64* %Hp_Arg, i64 %ln92a, i64 %ln92b, i64 %ln92c, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c91E:
  %ln92e = load i64, i64* %R1_Var
  %ln92f = inttoptr i64 %ln92e to i64*
  %ln92g = load i64, i64* %ln92f, !tbaa !4
  %ln92h = inttoptr i64 %ln92g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92i = load i64*, i64** %Sp_Var
  %ln92j = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92h( i64* %Base_Arg, i64* %ln92i, i64* %Hp_Arg, i64 %ln92j, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c91G:
  %ln92k = load i64, i64* %R1_Var
  store i64 %ln92k, i64* %R1_Var
  %ln92l = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln92m = bitcast i64* %ln92l to i64*
  %ln92n = load i64, i64* %ln92m, !tbaa !5
  %ln92o = inttoptr i64 %ln92n to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92p = load i64*, i64** %Sp_Var
  %ln92q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92o( i64* %Base_Arg, i64* %ln92p, i64* %Hp_Arg, i64 %ln92q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.121719 UTC

%r8Vp_closure_struct = type <{i64, i64, i64, i64}>
@r8Vp_closure$def = internal global %r8Vp_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vp_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vp_closure = internal alias i8, bitcast (%r8Vp_closure_struct* @r8Vp_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.12332 UTC

@r8Vp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vp_info$def to i8*)
define internal ghccc void @r8Vp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vo_closure_struct* @r8Vo_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vp_info$def to i64)) to i32),i32 0)}>
{
c92z:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc92u = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln92D = load i64*, i64** %Sp_Var
  %ln92E = getelementptr inbounds i64, i64* %ln92D, i32 -3
  %ln92F = ptrtoint i64* %ln92E to i64
  %ln92G = icmp ult i64 %ln92F, %SpLim_Arg
  %ln92H = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln92G, i1 0 )
  br i1 %ln92H, label %c92A, label %c92B
c92B:
  %ln92I = ptrtoint i64* %Base_Arg to i64
  %ln92J = inttoptr i64 %ln92I to i8*
  %ln92K = load i64, i64* %R1_Var
  %ln92L = inttoptr i64 %ln92K to i8*
  %ln92M = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln92N = call ccc i8* (i8*, i8*) %ln92M( i8* %ln92J, i8* %ln92L ) nounwind
  %ln92O = ptrtoint i8* %ln92N to i64
  store i64 %ln92O, i64* %lc92u
  %ln92P = load i64, i64* %lc92u
  %ln92Q = icmp eq i64 %ln92P, 0
  br i1 %ln92Q, label %c92w, label %c92v
c92v:
  %ln92S = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln92R = load i64*, i64** %Sp_Var
  %ln92T = getelementptr inbounds i64, i64* %ln92R, i32 -2
  store i64 %ln92S, i64* %ln92T, !tbaa !2
  %ln92V = load i64, i64* %lc92u
  %ln92U = load i64*, i64** %Sp_Var
  %ln92W = getelementptr inbounds i64, i64* %ln92U, i32 -1
  store i64 %ln92V, i64* %ln92W, !tbaa !2
  %ln92Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92x_info$def to i64
  %ln92X = load i64*, i64** %Sp_Var
  %ln92Z = getelementptr inbounds i64, i64* %ln92X, i32 -3
  store i64 %ln92Y, i64* %ln92Z, !tbaa !2
  %ln930 = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln931 = add i64 %ln930, 1
  store i64 %ln931, i64* %R4_Var
  store i64 1000, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln932 = load i64*, i64** %Sp_Var
  %ln933 = getelementptr inbounds i64, i64* %ln932, i32 -3
  %ln934 = ptrtoint i64* %ln933 to i64
  %ln935 = inttoptr i64 %ln934 to i64*
  store i64* %ln935, i64** %Sp_Var
  %ln936 = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln937 = load i64*, i64** %Sp_Var
  %ln938 = load i64, i64* %R1_Var
  %ln939 = load i64, i64* %R2_Var
  %ln93a = load i64, i64* %R3_Var
  %ln93b = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln936( i64* %Base_Arg, i64* %ln937, i64* %Hp_Arg, i64 %ln938, i64 %ln939, i64 %ln93a, i64 %ln93b, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92w:
  %ln93d = load i64, i64* %R1_Var
  %ln93e = inttoptr i64 %ln93d to i64*
  %ln93f = load i64, i64* %ln93e, !tbaa !4
  %ln93g = inttoptr i64 %ln93f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93h = load i64*, i64** %Sp_Var
  %ln93i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93g( i64* %Base_Arg, i64* %ln93h, i64* %Hp_Arg, i64 %ln93i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92A:
  %ln93j = load i64, i64* %R1_Var
  store i64 %ln93j, i64* %R1_Var
  %ln93k = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln93l = bitcast i64* %ln93k to i64*
  %ln93m = load i64, i64* %ln93l, !tbaa !5
  %ln93n = inttoptr i64 %ln93m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93o = load i64*, i64** %Sp_Var
  %ln93p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93n( i64* %Base_Arg, i64* %ln93o, i64* %Hp_Arg, i64 %ln93p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.12679 UTC

@c92x_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92x_info$def to i8*)
define internal ghccc void @c92x_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vo_closure_struct* @r8Vo_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92x_info$def to i64)) to i32),i32 0)}>
{
c92x:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln93q = load i64, i64* %R2_Var
  store i64 %ln93q, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln93r = ptrtoint %r8Vo_closure_struct* @r8Vo_closure$def to i64
  store i64 %ln93r, i64* %R2_Var
  %ln93s = load i64*, i64** %Sp_Var
  %ln93t = getelementptr inbounds i64, i64* %ln93s, i32 1
  %ln93u = ptrtoint i64* %ln93t to i64
  %ln93v = inttoptr i64 %ln93u to i64*
  store i64* %ln93v, i64** %Sp_Var
  %ln93w = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93x = load i64*, i64** %Sp_Var
  %ln93y = load i64, i64* %R2_Var
  %ln93z = load i64, i64* %R3_Var
  %ln93A = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93w( i64* %Base_Arg, i64* %ln93x, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln93y, i64 %ln93z, i64 %ln93A, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.128632 UTC

%r8Vq_closure_struct = type <{i64, i64, i64, i64}>
@r8Vq_closure$def = internal global %r8Vq_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vq_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vq_closure = internal alias i8, bitcast (%r8Vq_closure_struct* @r8Vq_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.13046 UTC

@r8Vq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vq_info$def to i8*)
define internal ghccc void @r8Vq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vp_closure_struct* @r8Vp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vq_info$def to i64)) to i32),i32 0)}>
{
c93H:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc93E = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln93K = load i64*, i64** %Sp_Var
  %ln93L = getelementptr inbounds i64, i64* %ln93K, i32 -2
  %ln93M = ptrtoint i64* %ln93L to i64
  %ln93N = icmp ult i64 %ln93M, %SpLim_Arg
  %ln93O = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln93N, i1 0 )
  br i1 %ln93O, label %c93I, label %c93J
c93J:
  %ln93P = ptrtoint i64* %Base_Arg to i64
  %ln93Q = inttoptr i64 %ln93P to i8*
  %ln93R = load i64, i64* %R1_Var
  %ln93S = inttoptr i64 %ln93R to i8*
  %ln93T = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln93U = call ccc i8* (i8*, i8*) %ln93T( i8* %ln93Q, i8* %ln93S ) nounwind
  %ln93V = ptrtoint i8* %ln93U to i64
  store i64 %ln93V, i64* %lc93E
  %ln93W = load i64, i64* %lc93E
  %ln93X = icmp eq i64 %ln93W, 0
  br i1 %ln93X, label %c93G, label %c93F
c93F:
  %ln93Z = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln93Y = load i64*, i64** %Sp_Var
  %ln940 = getelementptr inbounds i64, i64* %ln93Y, i32 -2
  store i64 %ln93Z, i64* %ln940, !tbaa !2
  %ln942 = load i64, i64* %lc93E
  %ln941 = load i64*, i64** %Sp_Var
  %ln943 = getelementptr inbounds i64, i64* %ln941, i32 -1
  store i64 %ln942, i64* %ln943, !tbaa !2
  %ln944 = ptrtoint %r8Vp_closure_struct* @r8Vp_closure$def to i64
  store i64 %ln944, i64* %R3_Var
  %ln945 = ptrtoint %r8Vj_bytes_struct* @r8Vj_bytes$def to i64
  store i64 %ln945, i64* %R2_Var
  %ln946 = load i64*, i64** %Sp_Var
  %ln947 = getelementptr inbounds i64, i64* %ln946, i32 -2
  %ln948 = ptrtoint i64* %ln947 to i64
  %ln949 = inttoptr i64 %ln948 to i64*
  store i64* %ln949, i64** %Sp_Var
  %ln94a = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94b = load i64*, i64** %Sp_Var
  %ln94c = load i64, i64* %R1_Var
  %ln94d = load i64, i64* %R2_Var
  %ln94e = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94a( i64* %Base_Arg, i64* %ln94b, i64* %Hp_Arg, i64 %ln94c, i64 %ln94d, i64 %ln94e, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c93G:
  %ln94g = load i64, i64* %R1_Var
  %ln94h = inttoptr i64 %ln94g to i64*
  %ln94i = load i64, i64* %ln94h, !tbaa !4
  %ln94j = inttoptr i64 %ln94i to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94k = load i64*, i64** %Sp_Var
  %ln94l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94j( i64* %Base_Arg, i64* %ln94k, i64* %Hp_Arg, i64 %ln94l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c93I:
  %ln94m = load i64, i64* %R1_Var
  store i64 %ln94m, i64* %R1_Var
  %ln94n = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln94o = bitcast i64* %ln94n to i64*
  %ln94p = load i64, i64* %ln94o, !tbaa !5
  %ln94q = inttoptr i64 %ln94p to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94r = load i64*, i64** %Sp_Var
  %ln94s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94q( i64* %Base_Arg, i64* %ln94r, i64* %Hp_Arg, i64 %ln94s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.133002 UTC

%u94N_srt_struct = type <{i64, i64, i64, i64}>
%r8Vr_closure_struct = type <{i64, i64, i64, i64}>
@u94N_srt$def = internal global %u94N_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpTri_closure to i64), i64 ptrtoint (i8* @base_GHCziNum_zdfNumInteger_closure to i64), i64 0}>
@u94N_srt = internal alias i8, bitcast (%u94N_srt_struct* @u94N_srt$def to i8*)
@r8Vr_closure$def = internal global %r8Vr_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vr_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vr_closure = internal alias i8, bitcast (%r8Vr_closure_struct* @r8Vr_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.134385 UTC

@r8Vr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vr_info$def to i8*)
define internal ghccc void @r8Vr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u94N_srt_struct* @u94N_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vr_info$def to i64)) to i32),i32 0)}>
{
c94B:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc94w = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln94O = load i64*, i64** %Sp_Var
  %ln94P = getelementptr inbounds i64, i64* %ln94O, i32 -3
  %ln94Q = ptrtoint i64* %ln94P to i64
  %ln94R = icmp ult i64 %ln94Q, %SpLim_Arg
  %ln94S = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln94R, i1 0 )
  br i1 %ln94S, label %c94H, label %c94I
c94I:
  %ln94T = ptrtoint i64* %Base_Arg to i64
  %ln94U = inttoptr i64 %ln94T to i8*
  %ln94V = load i64, i64* %R1_Var
  %ln94W = inttoptr i64 %ln94V to i8*
  %ln94X = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln94Y = call ccc i8* (i8*, i8*) %ln94X( i8* %ln94U, i8* %ln94W ) nounwind
  %ln94Z = ptrtoint i8* %ln94Y to i64
  store i64 %ln94Z, i64* %lc94w
  %ln950 = load i64, i64* %lc94w
  %ln951 = icmp eq i64 %ln950, 0
  br i1 %ln951, label %c94y, label %c94x
c94x:
  %ln953 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln952 = load i64*, i64** %Sp_Var
  %ln954 = getelementptr inbounds i64, i64* %ln952, i32 -2
  store i64 %ln953, i64* %ln954, !tbaa !2
  %ln956 = load i64, i64* %lc94w
  %ln955 = load i64*, i64** %Sp_Var
  %ln957 = getelementptr inbounds i64, i64* %ln955, i32 -1
  store i64 %ln956, i64* %ln957, !tbaa !2
  %ln959 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94z_info$def to i64
  %ln958 = load i64*, i64** %Sp_Var
  %ln95a = getelementptr inbounds i64, i64* %ln958, i32 -3
  store i64 %ln959, i64* %ln95a, !tbaa !2
  store i64 1000, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln95b = ptrtoint i8* @base_GHCziNum_zdfNumInteger_closure to i64
  store i64 %ln95b, i64* %R2_Var
  %ln95c = load i64*, i64** %Sp_Var
  %ln95d = getelementptr inbounds i64, i64* %ln95c, i32 -3
  %ln95e = ptrtoint i64* %ln95d to i64
  %ln95f = inttoptr i64 %ln95e to i64*
  store i64* %ln95f, i64** %Sp_Var
  %ln95g = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpTri_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95h = load i64*, i64** %Sp_Var
  %ln95i = load i64, i64* %R1_Var
  %ln95j = load i64, i64* %R2_Var
  %ln95k = load i64, i64* %R3_Var
  %ln95l = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95g( i64* %Base_Arg, i64* %ln95h, i64* %Hp_Arg, i64 %ln95i, i64 %ln95j, i64 %ln95k, i64 %ln95l, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c94y:
  %ln95n = load i64, i64* %R1_Var
  %ln95o = inttoptr i64 %ln95n to i64*
  %ln95p = load i64, i64* %ln95o, !tbaa !4
  %ln95q = inttoptr i64 %ln95p to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95r = load i64*, i64** %Sp_Var
  %ln95s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95q( i64* %Base_Arg, i64* %ln95r, i64* %Hp_Arg, i64 %ln95s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c94H:
  %ln95t = load i64, i64* %R1_Var
  store i64 %ln95t, i64* %R1_Var
  %ln95u = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln95v = bitcast i64* %ln95u to i64*
  %ln95w = load i64, i64* %ln95v, !tbaa !5
  %ln95x = inttoptr i64 %ln95w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95y = load i64*, i64** %Sp_Var
  %ln95z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95x( i64* %Base_Arg, i64* %ln95y, i64* %Hp_Arg, i64 %ln95z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.136501 UTC

@c94z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94z_info$def to i8*)
define internal ghccc void @c94z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c94z:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln95A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94E_info$def to i64
  %ln95B = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln95A, i64* %ln95B, !tbaa !2
  %ln95C = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln95D = add i64 %ln95C, 1
  store i64 %ln95D, i64* %R4_Var
  %ln95E = add i64 %R1_Arg, 23
  %ln95F = inttoptr i64 %ln95E to i64*
  %ln95G = load i64, i64* %ln95F, !tbaa !4
  store i64 %ln95G, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln95H = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95I = load i64, i64* %R2_Var
  %ln95J = load i64, i64* %R3_Var
  %ln95K = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95H( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln95I, i64 %ln95J, i64 %ln95K, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.137967 UTC

@c94E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94E_info$def to i8*)
define internal ghccc void @c94E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c94E:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln95L = load i64*, i64** %Hp_Var
  %ln95M = getelementptr inbounds i64, i64* %ln95L, i32 3
  %ln95N = ptrtoint i64* %ln95M to i64
  %ln95O = inttoptr i64 %ln95N to i64*
  store i64* %ln95O, i64** %Hp_Var
  %ln95P = load i64*, i64** %Hp_Var
  %ln95Q = ptrtoint i64* %ln95P to i64
  %ln95R = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln95S = bitcast i64* %ln95R to i64*
  %ln95T = load i64, i64* %ln95S, !tbaa !5
  %ln95U = icmp ugt i64 %ln95Q, %ln95T
  %ln95V = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln95U, i1 0 )
  br i1 %ln95V, label %c94M, label %c94L
c94L:
  %ln95X = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln95W = load i64*, i64** %Hp_Var
  %ln95Y = getelementptr inbounds i64, i64* %ln95W, i32 -2
  store i64 %ln95X, i64* %ln95Y, !tbaa !3
  %ln960 = load i64, i64* %R1_Var
  %ln95Z = load i64*, i64** %Hp_Var
  %ln961 = getelementptr inbounds i64, i64* %ln95Z, i32 -1
  store i64 %ln960, i64* %ln961, !tbaa !3
  %ln963 = load i64, i64* %R2_Var
  %ln962 = load i64*, i64** %Hp_Var
  %ln964 = getelementptr inbounds i64, i64* %ln962, i32 0
  store i64 %ln963, i64* %ln964, !tbaa !3
  %ln966 = load i64*, i64** %Hp_Var
  %ln967 = ptrtoint i64* %ln966 to i64
  %ln968 = add i64 %ln967, -14
  store i64 %ln968, i64* %R1_Var
  %ln969 = load i64*, i64** %Sp_Var
  %ln96a = getelementptr inbounds i64, i64* %ln969, i32 1
  %ln96b = ptrtoint i64* %ln96a to i64
  %ln96c = inttoptr i64 %ln96b to i64*
  store i64* %ln96c, i64** %Sp_Var
  %ln96d = load i64*, i64** %Sp_Var
  %ln96e = getelementptr inbounds i64, i64* %ln96d, i32 0
  %ln96f = bitcast i64* %ln96e to i64*
  %ln96g = load i64, i64* %ln96f, !tbaa !2
  %ln96h = inttoptr i64 %ln96g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96i = load i64*, i64** %Sp_Var
  %ln96j = load i64*, i64** %Hp_Var
  %ln96k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96h( i64* %Base_Arg, i64* %ln96i, i64* %ln96j, i64 %ln96k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c94M:
  %ln96l = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln96l, !tbaa !5
  %ln96m = load i64, i64* %R2_Var
  store i64 %ln96m, i64* %R2_Var
  %ln96n = load i64, i64* %R1_Var
  store i64 %ln96n, i64* %R1_Var
  %ln96o = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96p = load i64*, i64** %Sp_Var
  %ln96q = load i64*, i64** %Hp_Var
  %ln96r = load i64, i64* %R1_Var
  %ln96s = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96o( i64* %Base_Arg, i64* %ln96p, i64* %ln96q, i64 %ln96r, i64 %ln96s, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.140039 UTC

%u96N_srt_struct = type <{i64, i64, i64, i64}>
%r8Vs_closure_struct = type <{i64, i64, i64, i64}>
@u96N_srt$def = internal global %u96N_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowTri_closure to i64), i64 ptrtoint (i8* @base_GHCziNum_zdfNumInteger_closure to i64), i64 0}>
@u96N_srt = internal alias i8, bitcast (%u96N_srt_struct* @u96N_srt$def to i8*)
@r8Vs_closure$def = internal global %r8Vs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vs_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vs_closure = internal alias i8, bitcast (%r8Vs_closure_struct* @r8Vs_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.14129 UTC

@r8Vs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vs_info$def to i8*)
define internal ghccc void @r8Vs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u96N_srt_struct* @u96N_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vs_info$def to i64)) to i32),i32 0)}>
{
c96B:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc96w = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln96O = load i64*, i64** %Sp_Var
  %ln96P = getelementptr inbounds i64, i64* %ln96O, i32 -3
  %ln96Q = ptrtoint i64* %ln96P to i64
  %ln96R = icmp ult i64 %ln96Q, %SpLim_Arg
  %ln96S = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln96R, i1 0 )
  br i1 %ln96S, label %c96H, label %c96I
c96I:
  %ln96T = ptrtoint i64* %Base_Arg to i64
  %ln96U = inttoptr i64 %ln96T to i8*
  %ln96V = load i64, i64* %R1_Var
  %ln96W = inttoptr i64 %ln96V to i8*
  %ln96X = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln96Y = call ccc i8* (i8*, i8*) %ln96X( i8* %ln96U, i8* %ln96W ) nounwind
  %ln96Z = ptrtoint i8* %ln96Y to i64
  store i64 %ln96Z, i64* %lc96w
  %ln970 = load i64, i64* %lc96w
  %ln971 = icmp eq i64 %ln970, 0
  br i1 %ln971, label %c96y, label %c96x
c96x:
  %ln973 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln972 = load i64*, i64** %Sp_Var
  %ln974 = getelementptr inbounds i64, i64* %ln972, i32 -2
  store i64 %ln973, i64* %ln974, !tbaa !2
  %ln976 = load i64, i64* %lc96w
  %ln975 = load i64*, i64** %Sp_Var
  %ln977 = getelementptr inbounds i64, i64* %ln975, i32 -1
  store i64 %ln976, i64* %ln977, !tbaa !2
  %ln979 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96z_info$def to i64
  %ln978 = load i64*, i64** %Sp_Var
  %ln97a = getelementptr inbounds i64, i64* %ln978, i32 -3
  store i64 %ln979, i64* %ln97a, !tbaa !2
  store i64 1000, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln97b = ptrtoint i8* @base_GHCziNum_zdfNumInteger_closure to i64
  store i64 %ln97b, i64* %R2_Var
  %ln97c = load i64*, i64** %Sp_Var
  %ln97d = getelementptr inbounds i64, i64* %ln97c, i32 -3
  %ln97e = ptrtoint i64* %ln97d to i64
  %ln97f = inttoptr i64 %ln97e to i64*
  store i64* %ln97f, i64** %Sp_Var
  %ln97g = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowTri_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97h = load i64*, i64** %Sp_Var
  %ln97i = load i64, i64* %R1_Var
  %ln97j = load i64, i64* %R2_Var
  %ln97k = load i64, i64* %R3_Var
  %ln97l = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97g( i64* %Base_Arg, i64* %ln97h, i64* %Hp_Arg, i64 %ln97i, i64 %ln97j, i64 %ln97k, i64 %ln97l, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96y:
  %ln97n = load i64, i64* %R1_Var
  %ln97o = inttoptr i64 %ln97n to i64*
  %ln97p = load i64, i64* %ln97o, !tbaa !4
  %ln97q = inttoptr i64 %ln97p to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97r = load i64*, i64** %Sp_Var
  %ln97s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97q( i64* %Base_Arg, i64* %ln97r, i64* %Hp_Arg, i64 %ln97s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96H:
  %ln97t = load i64, i64* %R1_Var
  store i64 %ln97t, i64* %R1_Var
  %ln97u = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln97v = bitcast i64* %ln97u to i64*
  %ln97w = load i64, i64* %ln97v, !tbaa !5
  %ln97x = inttoptr i64 %ln97w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97y = load i64*, i64** %Sp_Var
  %ln97z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97x( i64* %Base_Arg, i64* %ln97y, i64* %Hp_Arg, i64 %ln97z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.143211 UTC

@c96z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96z_info$def to i8*)
define internal ghccc void @c96z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c96z:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln97A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96E_info$def to i64
  %ln97B = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln97A, i64* %ln97B, !tbaa !2
  %ln97C = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln97D = add i64 %ln97C, 1
  store i64 %ln97D, i64* %R4_Var
  %ln97E = add i64 %R1_Arg, 23
  %ln97F = inttoptr i64 %ln97E to i64*
  %ln97G = load i64, i64* %ln97F, !tbaa !4
  store i64 %ln97G, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln97H = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97I = load i64, i64* %R2_Var
  %ln97J = load i64, i64* %R3_Var
  %ln97K = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97H( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln97I, i64 %ln97J, i64 %ln97K, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.145402 UTC

@c96E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96E_info$def to i8*)
define internal ghccc void @c96E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c96E:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln97L = load i64*, i64** %Hp_Var
  %ln97M = getelementptr inbounds i64, i64* %ln97L, i32 3
  %ln97N = ptrtoint i64* %ln97M to i64
  %ln97O = inttoptr i64 %ln97N to i64*
  store i64* %ln97O, i64** %Hp_Var
  %ln97P = load i64*, i64** %Hp_Var
  %ln97Q = ptrtoint i64* %ln97P to i64
  %ln97R = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln97S = bitcast i64* %ln97R to i64*
  %ln97T = load i64, i64* %ln97S, !tbaa !5
  %ln97U = icmp ugt i64 %ln97Q, %ln97T
  %ln97V = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln97U, i1 0 )
  br i1 %ln97V, label %c96M, label %c96L
c96L:
  %ln97X = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln97W = load i64*, i64** %Hp_Var
  %ln97Y = getelementptr inbounds i64, i64* %ln97W, i32 -2
  store i64 %ln97X, i64* %ln97Y, !tbaa !3
  %ln980 = load i64, i64* %R1_Var
  %ln97Z = load i64*, i64** %Hp_Var
  %ln981 = getelementptr inbounds i64, i64* %ln97Z, i32 -1
  store i64 %ln980, i64* %ln981, !tbaa !3
  %ln983 = load i64, i64* %R2_Var
  %ln982 = load i64*, i64** %Hp_Var
  %ln984 = getelementptr inbounds i64, i64* %ln982, i32 0
  store i64 %ln983, i64* %ln984, !tbaa !3
  %ln986 = load i64*, i64** %Hp_Var
  %ln987 = ptrtoint i64* %ln986 to i64
  %ln988 = add i64 %ln987, -14
  store i64 %ln988, i64* %R1_Var
  %ln989 = load i64*, i64** %Sp_Var
  %ln98a = getelementptr inbounds i64, i64* %ln989, i32 1
  %ln98b = ptrtoint i64* %ln98a to i64
  %ln98c = inttoptr i64 %ln98b to i64*
  store i64* %ln98c, i64** %Sp_Var
  %ln98d = load i64*, i64** %Sp_Var
  %ln98e = getelementptr inbounds i64, i64* %ln98d, i32 0
  %ln98f = bitcast i64* %ln98e to i64*
  %ln98g = load i64, i64* %ln98f, !tbaa !2
  %ln98h = inttoptr i64 %ln98g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98i = load i64*, i64** %Sp_Var
  %ln98j = load i64*, i64** %Hp_Var
  %ln98k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98h( i64* %Base_Arg, i64* %ln98i, i64* %ln98j, i64 %ln98k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96M:
  %ln98l = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln98l, !tbaa !5
  %ln98m = load i64, i64* %R2_Var
  store i64 %ln98m, i64* %R2_Var
  %ln98n = load i64, i64* %R1_Var
  store i64 %ln98n, i64* %R1_Var
  %ln98o = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98p = load i64*, i64** %Sp_Var
  %ln98q = load i64*, i64** %Hp_Var
  %ln98r = load i64, i64* %R1_Var
  %ln98s = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98o( i64* %Base_Arg, i64* %ln98p, i64* %ln98q, i64 %ln98r, i64 %ln98s, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.147202 UTC

%u98N_srt_struct = type <{i64, i64, i64, i64}>
%r8Vt_closure_struct = type <{i64, i64, i64, i64}>
@u98N_srt$def = internal global %u98N_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpSq_closure to i64), i64 ptrtoint (i8* @base_GHCziNum_zdfNumInteger_closure to i64), i64 0}>
@u98N_srt = internal alias i8, bitcast (%u98N_srt_struct* @u98N_srt$def to i8*)
@r8Vt_closure$def = internal global %r8Vt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vt_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vt_closure = internal alias i8, bitcast (%r8Vt_closure_struct* @r8Vt_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.148547 UTC

@r8Vt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vt_info$def to i8*)
define internal ghccc void @r8Vt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u98N_srt_struct* @u98N_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vt_info$def to i64)) to i32),i32 0)}>
{
c98B:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc98w = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln98O = load i64*, i64** %Sp_Var
  %ln98P = getelementptr inbounds i64, i64* %ln98O, i32 -3
  %ln98Q = ptrtoint i64* %ln98P to i64
  %ln98R = icmp ult i64 %ln98Q, %SpLim_Arg
  %ln98S = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln98R, i1 0 )
  br i1 %ln98S, label %c98H, label %c98I
c98I:
  %ln98T = ptrtoint i64* %Base_Arg to i64
  %ln98U = inttoptr i64 %ln98T to i8*
  %ln98V = load i64, i64* %R1_Var
  %ln98W = inttoptr i64 %ln98V to i8*
  %ln98X = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln98Y = call ccc i8* (i8*, i8*) %ln98X( i8* %ln98U, i8* %ln98W ) nounwind
  %ln98Z = ptrtoint i8* %ln98Y to i64
  store i64 %ln98Z, i64* %lc98w
  %ln990 = load i64, i64* %lc98w
  %ln991 = icmp eq i64 %ln990, 0
  br i1 %ln991, label %c98y, label %c98x
c98x:
  %ln993 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln992 = load i64*, i64** %Sp_Var
  %ln994 = getelementptr inbounds i64, i64* %ln992, i32 -2
  store i64 %ln993, i64* %ln994, !tbaa !2
  %ln996 = load i64, i64* %lc98w
  %ln995 = load i64*, i64** %Sp_Var
  %ln997 = getelementptr inbounds i64, i64* %ln995, i32 -1
  store i64 %ln996, i64* %ln997, !tbaa !2
  %ln999 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c98z_info$def to i64
  %ln998 = load i64*, i64** %Sp_Var
  %ln99a = getelementptr inbounds i64, i64* %ln998, i32 -3
  store i64 %ln999, i64* %ln99a, !tbaa !2
  store i64 1000, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln99b = ptrtoint i8* @base_GHCziNum_zdfNumInteger_closure to i64
  store i64 %ln99b, i64* %R2_Var
  %ln99c = load i64*, i64** %Sp_Var
  %ln99d = getelementptr inbounds i64, i64* %ln99c, i32 -3
  %ln99e = ptrtoint i64* %ln99d to i64
  %ln99f = inttoptr i64 %ln99e to i64*
  store i64* %ln99f, i64** %Sp_Var
  %ln99g = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpSq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99h = load i64*, i64** %Sp_Var
  %ln99i = load i64, i64* %R1_Var
  %ln99j = load i64, i64* %R2_Var
  %ln99k = load i64, i64* %R3_Var
  %ln99l = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99g( i64* %Base_Arg, i64* %ln99h, i64* %Hp_Arg, i64 %ln99i, i64 %ln99j, i64 %ln99k, i64 %ln99l, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c98y:
  %ln99n = load i64, i64* %R1_Var
  %ln99o = inttoptr i64 %ln99n to i64*
  %ln99p = load i64, i64* %ln99o, !tbaa !4
  %ln99q = inttoptr i64 %ln99p to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99r = load i64*, i64** %Sp_Var
  %ln99s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99q( i64* %Base_Arg, i64* %ln99r, i64* %Hp_Arg, i64 %ln99s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c98H:
  %ln99t = load i64, i64* %R1_Var
  store i64 %ln99t, i64* %R1_Var
  %ln99u = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln99v = bitcast i64* %ln99u to i64*
  %ln99w = load i64, i64* %ln99v, !tbaa !5
  %ln99x = inttoptr i64 %ln99w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99y = load i64*, i64** %Sp_Var
  %ln99z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99x( i64* %Base_Arg, i64* %ln99y, i64* %Hp_Arg, i64 %ln99z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.150571 UTC

@c98z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c98z_info$def to i8*)
define internal ghccc void @c98z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c98z:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln99A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c98E_info$def to i64
  %ln99B = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln99A, i64* %ln99B, !tbaa !2
  %ln99C = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln99D = add i64 %ln99C, 1
  store i64 %ln99D, i64* %R4_Var
  %ln99E = add i64 %R1_Arg, 23
  %ln99F = inttoptr i64 %ln99E to i64*
  %ln99G = load i64, i64* %ln99F, !tbaa !4
  store i64 %ln99G, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln99H = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99I = load i64, i64* %R2_Var
  %ln99J = load i64, i64* %R3_Var
  %ln99K = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99H( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln99I, i64 %ln99J, i64 %ln99K, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.151699 UTC

@c98E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c98E_info$def to i8*)
define internal ghccc void @c98E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c98E:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln99L = load i64*, i64** %Hp_Var
  %ln99M = getelementptr inbounds i64, i64* %ln99L, i32 3
  %ln99N = ptrtoint i64* %ln99M to i64
  %ln99O = inttoptr i64 %ln99N to i64*
  store i64* %ln99O, i64** %Hp_Var
  %ln99P = load i64*, i64** %Hp_Var
  %ln99Q = ptrtoint i64* %ln99P to i64
  %ln99R = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln99S = bitcast i64* %ln99R to i64*
  %ln99T = load i64, i64* %ln99S, !tbaa !5
  %ln99U = icmp ugt i64 %ln99Q, %ln99T
  %ln99V = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln99U, i1 0 )
  br i1 %ln99V, label %c98M, label %c98L
c98L:
  %ln99X = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln99W = load i64*, i64** %Hp_Var
  %ln99Y = getelementptr inbounds i64, i64* %ln99W, i32 -2
  store i64 %ln99X, i64* %ln99Y, !tbaa !3
  %ln9a0 = load i64, i64* %R1_Var
  %ln99Z = load i64*, i64** %Hp_Var
  %ln9a1 = getelementptr inbounds i64, i64* %ln99Z, i32 -1
  store i64 %ln9a0, i64* %ln9a1, !tbaa !3
  %ln9a3 = load i64, i64* %R2_Var
  %ln9a2 = load i64*, i64** %Hp_Var
  %ln9a4 = getelementptr inbounds i64, i64* %ln9a2, i32 0
  store i64 %ln9a3, i64* %ln9a4, !tbaa !3
  %ln9a6 = load i64*, i64** %Hp_Var
  %ln9a7 = ptrtoint i64* %ln9a6 to i64
  %ln9a8 = add i64 %ln9a7, -14
  store i64 %ln9a8, i64* %R1_Var
  %ln9a9 = load i64*, i64** %Sp_Var
  %ln9aa = getelementptr inbounds i64, i64* %ln9a9, i32 1
  %ln9ab = ptrtoint i64* %ln9aa to i64
  %ln9ac = inttoptr i64 %ln9ab to i64*
  store i64* %ln9ac, i64** %Sp_Var
  %ln9ad = load i64*, i64** %Sp_Var
  %ln9ae = getelementptr inbounds i64, i64* %ln9ad, i32 0
  %ln9af = bitcast i64* %ln9ae to i64*
  %ln9ag = load i64, i64* %ln9af, !tbaa !2
  %ln9ah = inttoptr i64 %ln9ag to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ai = load i64*, i64** %Sp_Var
  %ln9aj = load i64*, i64** %Hp_Var
  %ln9ak = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ah( i64* %Base_Arg, i64* %ln9ai, i64* %ln9aj, i64 %ln9ak, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c98M:
  %ln9al = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9al, !tbaa !5
  %ln9am = load i64, i64* %R2_Var
  store i64 %ln9am, i64* %R2_Var
  %ln9an = load i64, i64* %R1_Var
  store i64 %ln9an, i64* %R1_Var
  %ln9ao = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ap = load i64*, i64** %Sp_Var
  %ln9aq = load i64*, i64** %Hp_Var
  %ln9ar = load i64, i64* %R1_Var
  %ln9as = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ao( i64* %Base_Arg, i64* %ln9ap, i64* %ln9aq, i64 %ln9ar, i64 %ln9as, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.153532 UTC

%u9aN_srt_struct = type <{i64, i64, i64, i64}>
%r8Vu_closure_struct = type <{i64, i64, i64, i64}>
@u9aN_srt$def = internal global %u9aN_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowSq_closure to i64), i64 ptrtoint (i8* @base_GHCziNum_zdfNumInteger_closure to i64), i64 0}>
@u9aN_srt = internal alias i8, bitcast (%u9aN_srt_struct* @u9aN_srt$def to i8*)
@r8Vu_closure$def = internal global %r8Vu_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vu_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vu_closure = internal alias i8, bitcast (%r8Vu_closure_struct* @r8Vu_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.155 UTC

@r8Vu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vu_info$def to i8*)
define internal ghccc void @r8Vu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9aN_srt_struct* @u9aN_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vu_info$def to i64)) to i32),i32 0)}>
{
c9aB:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9aw = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9aO = load i64*, i64** %Sp_Var
  %ln9aP = getelementptr inbounds i64, i64* %ln9aO, i32 -3
  %ln9aQ = ptrtoint i64* %ln9aP to i64
  %ln9aR = icmp ult i64 %ln9aQ, %SpLim_Arg
  %ln9aS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9aR, i1 0 )
  br i1 %ln9aS, label %c9aH, label %c9aI
c9aI:
  %ln9aT = ptrtoint i64* %Base_Arg to i64
  %ln9aU = inttoptr i64 %ln9aT to i8*
  %ln9aV = load i64, i64* %R1_Var
  %ln9aW = inttoptr i64 %ln9aV to i8*
  %ln9aX = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9aY = call ccc i8* (i8*, i8*) %ln9aX( i8* %ln9aU, i8* %ln9aW ) nounwind
  %ln9aZ = ptrtoint i8* %ln9aY to i64
  store i64 %ln9aZ, i64* %lc9aw
  %ln9b0 = load i64, i64* %lc9aw
  %ln9b1 = icmp eq i64 %ln9b0, 0
  br i1 %ln9b1, label %c9ay, label %c9ax
c9ax:
  %ln9b3 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9b2 = load i64*, i64** %Sp_Var
  %ln9b4 = getelementptr inbounds i64, i64* %ln9b2, i32 -2
  store i64 %ln9b3, i64* %ln9b4, !tbaa !2
  %ln9b6 = load i64, i64* %lc9aw
  %ln9b5 = load i64*, i64** %Sp_Var
  %ln9b7 = getelementptr inbounds i64, i64* %ln9b5, i32 -1
  store i64 %ln9b6, i64* %ln9b7, !tbaa !2
  %ln9b9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9az_info$def to i64
  %ln9b8 = load i64*, i64** %Sp_Var
  %ln9ba = getelementptr inbounds i64, i64* %ln9b8, i32 -3
  store i64 %ln9b9, i64* %ln9ba, !tbaa !2
  store i64 1000, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln9bb = ptrtoint i8* @base_GHCziNum_zdfNumInteger_closure to i64
  store i64 %ln9bb, i64* %R2_Var
  %ln9bc = load i64*, i64** %Sp_Var
  %ln9bd = getelementptr inbounds i64, i64* %ln9bc, i32 -3
  %ln9be = ptrtoint i64* %ln9bd to i64
  %ln9bf = inttoptr i64 %ln9be to i64*
  store i64* %ln9bf, i64** %Sp_Var
  %ln9bg = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowSq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bh = load i64*, i64** %Sp_Var
  %ln9bi = load i64, i64* %R1_Var
  %ln9bj = load i64, i64* %R2_Var
  %ln9bk = load i64, i64* %R3_Var
  %ln9bl = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bg( i64* %Base_Arg, i64* %ln9bh, i64* %Hp_Arg, i64 %ln9bi, i64 %ln9bj, i64 %ln9bk, i64 %ln9bl, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ay:
  %ln9bn = load i64, i64* %R1_Var
  %ln9bo = inttoptr i64 %ln9bn to i64*
  %ln9bp = load i64, i64* %ln9bo, !tbaa !4
  %ln9bq = inttoptr i64 %ln9bp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9br = load i64*, i64** %Sp_Var
  %ln9bs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bq( i64* %Base_Arg, i64* %ln9br, i64* %Hp_Arg, i64 %ln9bs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9aH:
  %ln9bt = load i64, i64* %R1_Var
  store i64 %ln9bt, i64* %R1_Var
  %ln9bu = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9bv = bitcast i64* %ln9bu to i64*
  %ln9bw = load i64, i64* %ln9bv, !tbaa !5
  %ln9bx = inttoptr i64 %ln9bw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9by = load i64*, i64** %Sp_Var
  %ln9bz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bx( i64* %Base_Arg, i64* %ln9by, i64* %Hp_Arg, i64 %ln9bz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.156949 UTC

@c9az_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9az_info$def to i8*)
define internal ghccc void @c9az_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c9az:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9bA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9aE_info$def to i64
  %ln9bB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9bA, i64* %ln9bB, !tbaa !2
  %ln9bC = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9bD = add i64 %ln9bC, 1
  store i64 %ln9bD, i64* %R4_Var
  %ln9bE = add i64 %R1_Arg, 23
  %ln9bF = inttoptr i64 %ln9bE to i64*
  %ln9bG = load i64, i64* %ln9bF, !tbaa !4
  store i64 %ln9bG, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9bH = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bI = load i64, i64* %R2_Var
  %ln9bJ = load i64, i64* %R3_Var
  %ln9bK = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9bI, i64 %ln9bJ, i64 %ln9bK, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.158018 UTC

@c9aE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9aE_info$def to i8*)
define internal ghccc void @c9aE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c9aE:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9bL = load i64*, i64** %Hp_Var
  %ln9bM = getelementptr inbounds i64, i64* %ln9bL, i32 3
  %ln9bN = ptrtoint i64* %ln9bM to i64
  %ln9bO = inttoptr i64 %ln9bN to i64*
  store i64* %ln9bO, i64** %Hp_Var
  %ln9bP = load i64*, i64** %Hp_Var
  %ln9bQ = ptrtoint i64* %ln9bP to i64
  %ln9bR = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9bS = bitcast i64* %ln9bR to i64*
  %ln9bT = load i64, i64* %ln9bS, !tbaa !5
  %ln9bU = icmp ugt i64 %ln9bQ, %ln9bT
  %ln9bV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9bU, i1 0 )
  br i1 %ln9bV, label %c9aM, label %c9aL
c9aL:
  %ln9bX = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9bW = load i64*, i64** %Hp_Var
  %ln9bY = getelementptr inbounds i64, i64* %ln9bW, i32 -2
  store i64 %ln9bX, i64* %ln9bY, !tbaa !3
  %ln9c0 = load i64, i64* %R1_Var
  %ln9bZ = load i64*, i64** %Hp_Var
  %ln9c1 = getelementptr inbounds i64, i64* %ln9bZ, i32 -1
  store i64 %ln9c0, i64* %ln9c1, !tbaa !3
  %ln9c3 = load i64, i64* %R2_Var
  %ln9c2 = load i64*, i64** %Hp_Var
  %ln9c4 = getelementptr inbounds i64, i64* %ln9c2, i32 0
  store i64 %ln9c3, i64* %ln9c4, !tbaa !3
  %ln9c6 = load i64*, i64** %Hp_Var
  %ln9c7 = ptrtoint i64* %ln9c6 to i64
  %ln9c8 = add i64 %ln9c7, -14
  store i64 %ln9c8, i64* %R1_Var
  %ln9c9 = load i64*, i64** %Sp_Var
  %ln9ca = getelementptr inbounds i64, i64* %ln9c9, i32 1
  %ln9cb = ptrtoint i64* %ln9ca to i64
  %ln9cc = inttoptr i64 %ln9cb to i64*
  store i64* %ln9cc, i64** %Sp_Var
  %ln9cd = load i64*, i64** %Sp_Var
  %ln9ce = getelementptr inbounds i64, i64* %ln9cd, i32 0
  %ln9cf = bitcast i64* %ln9ce to i64*
  %ln9cg = load i64, i64* %ln9cf, !tbaa !2
  %ln9ch = inttoptr i64 %ln9cg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ci = load i64*, i64** %Sp_Var
  %ln9cj = load i64*, i64** %Hp_Var
  %ln9ck = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ch( i64* %Base_Arg, i64* %ln9ci, i64* %ln9cj, i64 %ln9ck, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9aM:
  %ln9cl = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9cl, !tbaa !5
  %ln9cm = load i64, i64* %R2_Var
  store i64 %ln9cm, i64* %R2_Var
  %ln9cn = load i64, i64* %R1_Var
  store i64 %ln9cn, i64* %R1_Var
  %ln9co = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cp = load i64*, i64** %Sp_Var
  %ln9cq = load i64*, i64** %Hp_Var
  %ln9cr = load i64, i64* %R1_Var
  %ln9cs = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9co( i64* %Base_Arg, i64* %ln9cp, i64* %ln9cq, i64 %ln9cr, i64 %ln9cs, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.159905 UTC

%r8Vv_closure_struct = type <{i64, i64, i64, i64}>
@r8Vv_closure$def = internal global %r8Vv_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vv_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vv_closure = internal alias i8, bitcast (%r8Vv_closure_struct* @r8Vv_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.161309 UTC

@r8Vv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vv_info$def to i8*)
define internal ghccc void @r8Vv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Vf_closure_struct* @r8Vf_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vv_info$def to i64)) to i32),i32 0)}>
{
c9cC:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9cw = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9cP = load i64*, i64** %Sp_Var
  %ln9cQ = getelementptr inbounds i64, i64* %ln9cP, i32 -3
  %ln9cR = ptrtoint i64* %ln9cQ to i64
  %ln9cS = icmp ult i64 %ln9cR, %SpLim_Arg
  %ln9cT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9cS, i1 0 )
  br i1 %ln9cT, label %c9cI, label %c9cJ
c9cJ:
  %ln9cU = ptrtoint i64* %Base_Arg to i64
  %ln9cV = inttoptr i64 %ln9cU to i8*
  %ln9cW = load i64, i64* %R1_Var
  %ln9cX = inttoptr i64 %ln9cW to i8*
  %ln9cY = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9cZ = call ccc i8* (i8*, i8*) %ln9cY( i8* %ln9cV, i8* %ln9cX ) nounwind
  %ln9d0 = ptrtoint i8* %ln9cZ to i64
  store i64 %ln9d0, i64* %lc9cw
  %ln9d1 = load i64, i64* %lc9cw
  %ln9d2 = icmp eq i64 %ln9d1, 0
  br i1 %ln9d2, label %c9cy, label %c9cx
c9cx:
  %ln9d4 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9d3 = load i64*, i64** %Sp_Var
  %ln9d5 = getelementptr inbounds i64, i64* %ln9d3, i32 -2
  store i64 %ln9d4, i64* %ln9d5, !tbaa !2
  %ln9d7 = load i64, i64* %lc9cw
  %ln9d6 = load i64*, i64** %Sp_Var
  %ln9d8 = getelementptr inbounds i64, i64* %ln9d6, i32 -1
  store i64 %ln9d7, i64* %ln9d8, !tbaa !2
  %ln9da = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9cz_info$def to i64
  %ln9d9 = load i64*, i64** %Sp_Var
  %ln9db = getelementptr inbounds i64, i64* %ln9d9, i32 -3
  store i64 %ln9da, i64* %ln9db, !tbaa !2
  %ln9dc = ptrtoint %r8Vf_closure_struct* @r8Vf_closure$def to i64
  store i64 %ln9dc, i64* %R1_Var
  %ln9dd = load i64*, i64** %Sp_Var
  %ln9de = getelementptr inbounds i64, i64* %ln9dd, i32 -3
  %ln9df = ptrtoint i64* %ln9de to i64
  %ln9dg = inttoptr i64 %ln9df to i64*
  store i64* %ln9dg, i64** %Sp_Var
  %ln9dh = load i64, i64* %R1_Var
  %ln9di = and i64 %ln9dh, 7
  %ln9dj = icmp ne i64 %ln9di, 0
  br i1 %ln9dj, label %u9cO, label %c9cA
c9cA:
  %ln9dl = load i64, i64* %R1_Var
  %ln9dm = inttoptr i64 %ln9dl to i64*
  %ln9dn = load i64, i64* %ln9dm, !tbaa !4
  %ln9do = inttoptr i64 %ln9dn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dp = load i64*, i64** %Sp_Var
  %ln9dq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9do( i64* %Base_Arg, i64* %ln9dp, i64* %Hp_Arg, i64 %ln9dq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9cO:
  %ln9dr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9cz_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ds = load i64*, i64** %Sp_Var
  %ln9dt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dr( i64* %Base_Arg, i64* %ln9ds, i64* %Hp_Arg, i64 %ln9dt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9cy:
  %ln9dv = load i64, i64* %R1_Var
  %ln9dw = inttoptr i64 %ln9dv to i64*
  %ln9dx = load i64, i64* %ln9dw, !tbaa !4
  %ln9dy = inttoptr i64 %ln9dx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dz = load i64*, i64** %Sp_Var
  %ln9dA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dy( i64* %Base_Arg, i64* %ln9dz, i64* %Hp_Arg, i64 %ln9dA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9cI:
  %ln9dB = load i64, i64* %R1_Var
  store i64 %ln9dB, i64* %R1_Var
  %ln9dC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9dD = bitcast i64* %ln9dC to i64*
  %ln9dE = load i64, i64* %ln9dD, !tbaa !5
  %ln9dF = inttoptr i64 %ln9dE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dG = load i64*, i64** %Sp_Var
  %ln9dH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dF( i64* %Base_Arg, i64* %ln9dG, i64* %Hp_Arg, i64 %ln9dH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.163543 UTC

@c9cz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9cz_info$def to i8*)
define internal ghccc void @c9cz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c9cz:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9dI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9cF_info$def to i64
  %ln9dJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9dI, i64* %ln9dJ, !tbaa !2
  %ln9dK = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9dL = add i64 %ln9dK, 1
  store i64 %ln9dL, i64* %R4_Var
  %ln9dM = add i64 %R1_Arg, 23
  %ln9dN = inttoptr i64 %ln9dM to i64*
  %ln9dO = load i64, i64* %ln9dN, !tbaa !4
  store i64 %ln9dO, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9dP = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dQ = load i64, i64* %R2_Var
  %ln9dR = load i64, i64* %R3_Var
  %ln9dS = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9dQ, i64 %ln9dR, i64 %ln9dS, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.165388 UTC

@c9cF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9cF_info$def to i8*)
define internal ghccc void @c9cF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c9cF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9dT = load i64*, i64** %Hp_Var
  %ln9dU = getelementptr inbounds i64, i64* %ln9dT, i32 3
  %ln9dV = ptrtoint i64* %ln9dU to i64
  %ln9dW = inttoptr i64 %ln9dV to i64*
  store i64* %ln9dW, i64** %Hp_Var
  %ln9dX = load i64*, i64** %Hp_Var
  %ln9dY = ptrtoint i64* %ln9dX to i64
  %ln9dZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9e0 = bitcast i64* %ln9dZ to i64*
  %ln9e1 = load i64, i64* %ln9e0, !tbaa !5
  %ln9e2 = icmp ugt i64 %ln9dY, %ln9e1
  %ln9e3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9e2, i1 0 )
  br i1 %ln9e3, label %c9cN, label %c9cM
c9cM:
  %ln9e5 = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9e4 = load i64*, i64** %Hp_Var
  %ln9e6 = getelementptr inbounds i64, i64* %ln9e4, i32 -2
  store i64 %ln9e5, i64* %ln9e6, !tbaa !3
  %ln9e8 = load i64, i64* %R1_Var
  %ln9e7 = load i64*, i64** %Hp_Var
  %ln9e9 = getelementptr inbounds i64, i64* %ln9e7, i32 -1
  store i64 %ln9e8, i64* %ln9e9, !tbaa !3
  %ln9eb = load i64, i64* %R2_Var
  %ln9ea = load i64*, i64** %Hp_Var
  %ln9ec = getelementptr inbounds i64, i64* %ln9ea, i32 0
  store i64 %ln9eb, i64* %ln9ec, !tbaa !3
  %ln9ee = load i64*, i64** %Hp_Var
  %ln9ef = ptrtoint i64* %ln9ee to i64
  %ln9eg = add i64 %ln9ef, -14
  store i64 %ln9eg, i64* %R1_Var
  %ln9eh = load i64*, i64** %Sp_Var
  %ln9ei = getelementptr inbounds i64, i64* %ln9eh, i32 1
  %ln9ej = ptrtoint i64* %ln9ei to i64
  %ln9ek = inttoptr i64 %ln9ej to i64*
  store i64* %ln9ek, i64** %Sp_Var
  %ln9el = load i64*, i64** %Sp_Var
  %ln9em = getelementptr inbounds i64, i64* %ln9el, i32 0
  %ln9en = bitcast i64* %ln9em to i64*
  %ln9eo = load i64, i64* %ln9en, !tbaa !2
  %ln9ep = inttoptr i64 %ln9eo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eq = load i64*, i64** %Sp_Var
  %ln9er = load i64*, i64** %Hp_Var
  %ln9es = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ep( i64* %Base_Arg, i64* %ln9eq, i64* %ln9er, i64 %ln9es, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9cN:
  %ln9et = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9et, !tbaa !5
  %ln9eu = load i64, i64* %R2_Var
  store i64 %ln9eu, i64* %R2_Var
  %ln9ev = load i64, i64* %R1_Var
  store i64 %ln9ev, i64* %R1_Var
  %ln9ew = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ex = load i64*, i64** %Sp_Var
  %ln9ey = load i64*, i64** %Hp_Var
  %ln9ez = load i64, i64* %R1_Var
  %ln9eA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ew( i64* %Base_Arg, i64* %ln9ex, i64* %ln9ey, i64 %ln9ez, i64 %ln9eA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.167256 UTC

%r8Vw_closure_struct = type <{i64, i64, i64, i64}>
@r8Vw_closure$def = internal global %r8Vw_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vw_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vw_closure = internal alias i8, bitcast (%r8Vw_closure_struct* @r8Vw_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.168642 UTC

@r8Vw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vw_info$def to i8*)
define internal ghccc void @r8Vw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8Ve_closure_struct* @r8Ve_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vw_info$def to i64)) to i32),i32 0)}>
{
c9eK:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9eE = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9eX = load i64*, i64** %Sp_Var
  %ln9eY = getelementptr inbounds i64, i64* %ln9eX, i32 -3
  %ln9eZ = ptrtoint i64* %ln9eY to i64
  %ln9f0 = icmp ult i64 %ln9eZ, %SpLim_Arg
  %ln9f1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9f0, i1 0 )
  br i1 %ln9f1, label %c9eQ, label %c9eR
c9eR:
  %ln9f2 = ptrtoint i64* %Base_Arg to i64
  %ln9f3 = inttoptr i64 %ln9f2 to i8*
  %ln9f4 = load i64, i64* %R1_Var
  %ln9f5 = inttoptr i64 %ln9f4 to i8*
  %ln9f6 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9f7 = call ccc i8* (i8*, i8*) %ln9f6( i8* %ln9f3, i8* %ln9f5 ) nounwind
  %ln9f8 = ptrtoint i8* %ln9f7 to i64
  store i64 %ln9f8, i64* %lc9eE
  %ln9f9 = load i64, i64* %lc9eE
  %ln9fa = icmp eq i64 %ln9f9, 0
  br i1 %ln9fa, label %c9eG, label %c9eF
c9eF:
  %ln9fc = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9fb = load i64*, i64** %Sp_Var
  %ln9fd = getelementptr inbounds i64, i64* %ln9fb, i32 -2
  store i64 %ln9fc, i64* %ln9fd, !tbaa !2
  %ln9ff = load i64, i64* %lc9eE
  %ln9fe = load i64*, i64** %Sp_Var
  %ln9fg = getelementptr inbounds i64, i64* %ln9fe, i32 -1
  store i64 %ln9ff, i64* %ln9fg, !tbaa !2
  %ln9fi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9eH_info$def to i64
  %ln9fh = load i64*, i64** %Sp_Var
  %ln9fj = getelementptr inbounds i64, i64* %ln9fh, i32 -3
  store i64 %ln9fi, i64* %ln9fj, !tbaa !2
  %ln9fk = ptrtoint %r8Ve_closure_struct* @r8Ve_closure$def to i64
  store i64 %ln9fk, i64* %R1_Var
  %ln9fl = load i64*, i64** %Sp_Var
  %ln9fm = getelementptr inbounds i64, i64* %ln9fl, i32 -3
  %ln9fn = ptrtoint i64* %ln9fm to i64
  %ln9fo = inttoptr i64 %ln9fn to i64*
  store i64* %ln9fo, i64** %Sp_Var
  %ln9fp = load i64, i64* %R1_Var
  %ln9fq = and i64 %ln9fp, 7
  %ln9fr = icmp ne i64 %ln9fq, 0
  br i1 %ln9fr, label %u9eW, label %c9eI
c9eI:
  %ln9ft = load i64, i64* %R1_Var
  %ln9fu = inttoptr i64 %ln9ft to i64*
  %ln9fv = load i64, i64* %ln9fu, !tbaa !4
  %ln9fw = inttoptr i64 %ln9fv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fx = load i64*, i64** %Sp_Var
  %ln9fy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fw( i64* %Base_Arg, i64* %ln9fx, i64* %Hp_Arg, i64 %ln9fy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9eW:
  %ln9fz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9eH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fA = load i64*, i64** %Sp_Var
  %ln9fB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fz( i64* %Base_Arg, i64* %ln9fA, i64* %Hp_Arg, i64 %ln9fB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9eG:
  %ln9fD = load i64, i64* %R1_Var
  %ln9fE = inttoptr i64 %ln9fD to i64*
  %ln9fF = load i64, i64* %ln9fE, !tbaa !4
  %ln9fG = inttoptr i64 %ln9fF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fH = load i64*, i64** %Sp_Var
  %ln9fI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fG( i64* %Base_Arg, i64* %ln9fH, i64* %Hp_Arg, i64 %ln9fI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9eQ:
  %ln9fJ = load i64, i64* %R1_Var
  store i64 %ln9fJ, i64* %R1_Var
  %ln9fK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9fL = bitcast i64* %ln9fK to i64*
  %ln9fM = load i64, i64* %ln9fL, !tbaa !5
  %ln9fN = inttoptr i64 %ln9fM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fO = load i64*, i64** %Sp_Var
  %ln9fP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fN( i64* %Base_Arg, i64* %ln9fO, i64* %Hp_Arg, i64 %ln9fP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.170807 UTC

@c9eH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9eH_info$def to i8*)
define internal ghccc void @c9eH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c9eH:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9fQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9eN_info$def to i64
  %ln9fR = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9fQ, i64* %ln9fR, !tbaa !2
  %ln9fS = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9fT = add i64 %ln9fS, 1
  store i64 %ln9fT, i64* %R4_Var
  %ln9fU = add i64 %R1_Arg, 23
  %ln9fV = inttoptr i64 %ln9fU to i64*
  %ln9fW = load i64, i64* %ln9fV, !tbaa !4
  store i64 %ln9fW, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9fX = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fY = load i64, i64* %R2_Var
  %ln9fZ = load i64, i64* %R3_Var
  %ln9g0 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9fY, i64 %ln9fZ, i64 %ln9g0, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.172146 UTC

@c9eN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9eN_info$def to i8*)
define internal ghccc void @c9eN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c9eN:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9g1 = load i64*, i64** %Hp_Var
  %ln9g2 = getelementptr inbounds i64, i64* %ln9g1, i32 3
  %ln9g3 = ptrtoint i64* %ln9g2 to i64
  %ln9g4 = inttoptr i64 %ln9g3 to i64*
  store i64* %ln9g4, i64** %Hp_Var
  %ln9g5 = load i64*, i64** %Hp_Var
  %ln9g6 = ptrtoint i64* %ln9g5 to i64
  %ln9g7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9g8 = bitcast i64* %ln9g7 to i64*
  %ln9g9 = load i64, i64* %ln9g8, !tbaa !5
  %ln9ga = icmp ugt i64 %ln9g6, %ln9g9
  %ln9gb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ga, i1 0 )
  br i1 %ln9gb, label %c9eV, label %c9eU
c9eU:
  %ln9gd = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9gc = load i64*, i64** %Hp_Var
  %ln9ge = getelementptr inbounds i64, i64* %ln9gc, i32 -2
  store i64 %ln9gd, i64* %ln9ge, !tbaa !3
  %ln9gg = load i64, i64* %R1_Var
  %ln9gf = load i64*, i64** %Hp_Var
  %ln9gh = getelementptr inbounds i64, i64* %ln9gf, i32 -1
  store i64 %ln9gg, i64* %ln9gh, !tbaa !3
  %ln9gj = load i64, i64* %R2_Var
  %ln9gi = load i64*, i64** %Hp_Var
  %ln9gk = getelementptr inbounds i64, i64* %ln9gi, i32 0
  store i64 %ln9gj, i64* %ln9gk, !tbaa !3
  %ln9gm = load i64*, i64** %Hp_Var
  %ln9gn = ptrtoint i64* %ln9gm to i64
  %ln9go = add i64 %ln9gn, -14
  store i64 %ln9go, i64* %R1_Var
  %ln9gp = load i64*, i64** %Sp_Var
  %ln9gq = getelementptr inbounds i64, i64* %ln9gp, i32 1
  %ln9gr = ptrtoint i64* %ln9gq to i64
  %ln9gs = inttoptr i64 %ln9gr to i64*
  store i64* %ln9gs, i64** %Sp_Var
  %ln9gt = load i64*, i64** %Sp_Var
  %ln9gu = getelementptr inbounds i64, i64* %ln9gt, i32 0
  %ln9gv = bitcast i64* %ln9gu to i64*
  %ln9gw = load i64, i64* %ln9gv, !tbaa !2
  %ln9gx = inttoptr i64 %ln9gw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gy = load i64*, i64** %Sp_Var
  %ln9gz = load i64*, i64** %Hp_Var
  %ln9gA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gx( i64* %Base_Arg, i64* %ln9gy, i64* %ln9gz, i64 %ln9gA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9eV:
  %ln9gB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9gB, !tbaa !5
  %ln9gC = load i64, i64* %R2_Var
  store i64 %ln9gC, i64* %R2_Var
  %ln9gD = load i64, i64* %R1_Var
  store i64 %ln9gD, i64* %R1_Var
  %ln9gE = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gF = load i64*, i64** %Sp_Var
  %ln9gG = load i64*, i64** %Hp_Var
  %ln9gH = load i64, i64* %R1_Var
  %ln9gI = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gE( i64* %Base_Arg, i64* %ln9gF, i64* %ln9gG, i64 %ln9gH, i64 %ln9gI, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.173245 UTC

%r8Vx_bytes_struct = type <{[21 x i8]}>
@r8Vx_bytes$def = internal constant %r8Vx_bytes_struct<{[21 x i8] [i8 10, i8 66, i8 76, i8 65, i8 83, i8 32, i8 76, i8 101, i8 118, i8 101, i8 108, i8 45, i8 50, i8 32, i8 84, i8 101, i8 115, i8 116, i8 58, i8 32, i8 0]}>, align 1
@r8Vx_bytes = internal alias i8, bitcast (%r8Vx_bytes_struct* @r8Vx_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.174192 UTC

%r8Vy_closure_struct = type <{i64, i64, i64, i64}>
@r8Vy_closure$def = internal global %r8Vy_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vy_info$def to i64), i64 0, i64 0, i64 0}>
@r8Vy_closure = internal alias i8, bitcast (%r8Vy_closure_struct* @r8Vy_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.175371 UTC

@r8Vy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8Vy_info$def to i8*)
define internal ghccc void @r8Vy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
c9gP:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9gM = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9gS = load i64*, i64** %Sp_Var
  %ln9gT = getelementptr inbounds i64, i64* %ln9gS, i32 -2
  %ln9gU = ptrtoint i64* %ln9gT to i64
  %ln9gV = icmp ult i64 %ln9gU, %SpLim_Arg
  %ln9gW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9gV, i1 0 )
  br i1 %ln9gW, label %c9gQ, label %c9gR
c9gR:
  %ln9gX = ptrtoint i64* %Base_Arg to i64
  %ln9gY = inttoptr i64 %ln9gX to i8*
  %ln9gZ = load i64, i64* %R1_Var
  %ln9h0 = inttoptr i64 %ln9gZ to i8*
  %ln9h1 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9h2 = call ccc i8* (i8*, i8*) %ln9h1( i8* %ln9gY, i8* %ln9h0 ) nounwind
  %ln9h3 = ptrtoint i8* %ln9h2 to i64
  store i64 %ln9h3, i64* %lc9gM
  %ln9h4 = load i64, i64* %lc9gM
  %ln9h5 = icmp eq i64 %ln9h4, 0
  br i1 %ln9h5, label %c9gO, label %c9gN
c9gN:
  %ln9h7 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9h6 = load i64*, i64** %Sp_Var
  %ln9h8 = getelementptr inbounds i64, i64* %ln9h6, i32 -2
  store i64 %ln9h7, i64* %ln9h8, !tbaa !2
  %ln9ha = load i64, i64* %lc9gM
  %ln9h9 = load i64*, i64** %Sp_Var
  %ln9hb = getelementptr inbounds i64, i64* %ln9h9, i32 -1
  store i64 %ln9ha, i64* %ln9hb, !tbaa !2
  %ln9hc = ptrtoint %r8Vx_bytes_struct* @r8Vx_bytes$def to i64
  store i64 %ln9hc, i64* %R2_Var
  %ln9hd = load i64*, i64** %Sp_Var
  %ln9he = getelementptr inbounds i64, i64* %ln9hd, i32 -2
  %ln9hf = ptrtoint i64* %ln9he to i64
  %ln9hg = inttoptr i64 %ln9hf to i64*
  store i64* %ln9hg, i64** %Sp_Var
  %ln9hh = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hi = load i64*, i64** %Sp_Var
  %ln9hj = load i64, i64* %R1_Var
  %ln9hk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hh( i64* %Base_Arg, i64* %ln9hi, i64* %Hp_Arg, i64 %ln9hj, i64 %ln9hk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gO:
  %ln9hm = load i64, i64* %R1_Var
  %ln9hn = inttoptr i64 %ln9hm to i64*
  %ln9ho = load i64, i64* %ln9hn, !tbaa !4
  %ln9hp = inttoptr i64 %ln9ho to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hq = load i64*, i64** %Sp_Var
  %ln9hr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hp( i64* %Base_Arg, i64* %ln9hq, i64* %Hp_Arg, i64 %ln9hr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gQ:
  %ln9hs = load i64, i64* %R1_Var
  store i64 %ln9hs, i64* %R1_Var
  %ln9ht = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9hu = bitcast i64* %ln9ht to i64*
  %ln9hv = load i64, i64* %ln9hu, !tbaa !5
  %ln9hw = inttoptr i64 %ln9hv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hx = load i64*, i64** %Sp_Var
  %ln9hy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hw( i64* %Base_Arg, i64* %ln9hx, i64* %Hp_Arg, i64 %ln9hy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.180301 UTC

%u9k9_srt_struct = type <{i64, i64, i64}>
%u9ka_srt_struct = type <{i64, i64, i64, i64}>
%u9kb_srt_struct = type <{i64, i64, i64, i64}>
%u9kc_srt_struct = type <{i64, i64, i64, i64}>
%u9kd_srt_struct = type <{i64, i64, i64, i64}>
%u9ke_srt_struct = type <{i64, i64, i64, i64}>
%u9kf_srt_struct = type <{i64, i64, i64}>
%u9kg_srt_struct = type <{i64, i64, i64, i64}>
%u9kh_srt_struct = type <{i64, i64, i64}>
%u9ki_srt_struct = type <{i64, i64, i64}>
%u9kj_srt_struct = type <{i64, i64, i64}>
%u9kk_srt_struct = type <{i64, i64, i64}>
%u9kl_srt_struct = type <{i64, i64, i64}>
%u9km_srt_struct = type <{i64, i64, i64}>
%u9kn_srt_struct = type <{i64, i64, i64}>
%u9ko_srt_struct = type <{i64, i64, i64}>
%u9kp_srt_struct = type <{i64, i64, i64, i64, i64}>
%u9kq_srt_struct = type <{i64, i64, i64, i64}>
%u9kr_srt_struct = type <{i64, i64, i64, i64, i64}>
%u9ks_srt_struct = type <{i64, i64, i64, i64}>
%u9kt_srt_struct = type <{i64, i64, i64}>
%u9ku_srt_struct = type <{i64, i64, i64, i64}>
%u9kv_srt_struct = type <{i64, i64, i64, i64}>
%u9kw_srt_struct = type <{i64, i64, i64, i64}>
%u9kx_srt_struct = type <{i64, i64, i64, i64}>
%u9ky_srt_struct = type <{i64, i64, i64, i64}>
%u9kz_srt_struct = type <{i64, i64, i64, i64}>
%u9kA_srt_struct = type <{i64, i64, i64, i64}>
%u9kB_srt_struct = type <{i64, i64, i64}>
%Main_main1_closure_struct = type <{i64, i64, i64, i64}>
@u9k9_srt$def = internal global %u9k9_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziNominalDiffTime_zdfShowNominalDiffTime3_closure to i64), i64 0}>
@u9k9_srt = internal alias i8, bitcast (%u9k9_srt_struct* @u9k9_srt$def to i8*)
@u9ka_srt$def = internal global %u9ka_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_DataziFixed_showFixed_closure to i64), i64 ptrtoint (i8* @u9k9_srt to i64), i64 0}>
@u9ka_srt = internal alias i8, bitcast (%u9ka_srt_struct* @u9ka_srt$def to i8*)
@u9kb_srt$def = internal global %u9kb_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_divInteger_closure to i64), i64 ptrtoint (i8* @u9ka_srt to i64), i64 0}>
@u9kb_srt = internal alias i8, bitcast (%u9kb_srt_struct* @u9kb_srt$def to i8*)
@u9kc_srt$def = internal global %u9kc_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_timesInteger_closure to i64), i64 ptrtoint (i8* @u9kb_srt to i64), i64 0}>
@u9kc_srt = internal alias i8, bitcast (%u9kc_srt_struct* @u9kc_srt$def to i8*)
@u9kd_srt$def = internal global %u9kd_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_minusInteger_closure to i64), i64 ptrtoint (i8* @u9kc_srt to i64), i64 0}>
@u9kd_srt = internal alias i8, bitcast (%u9kd_srt_struct* @u9kd_srt$def to i8*)
@u9ke_srt$def = internal global %u9ke_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_closure to i64), i64 ptrtoint (i8* @u9kd_srt to i64), i64 0}>
@u9ke_srt = internal alias i8, bitcast (%u9ke_srt_struct* @u9ke_srt$def to i8*)
@u9kf_srt$def = internal global %u9kf_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9ke_srt to i64), i64 0}>
@u9kf_srt = internal alias i8, bitcast (%u9kf_srt_struct* @u9kf_srt$def to i8*)
@u9kg_srt$def = internal global %u9kg_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_closure to i64), i64 ptrtoint (i8* @u9kf_srt to i64), i64 0}>
@u9kg_srt = internal alias i8, bitcast (%u9kg_srt_struct* @u9kg_srt$def to i8*)
@u9kh_srt$def = internal global %u9kh_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kg_srt to i64), i64 0}>
@u9kh_srt = internal alias i8, bitcast (%u9kh_srt_struct* @u9kh_srt$def to i8*)
@u9ki_srt$def = internal global %u9ki_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kh_srt to i64), i64 0}>
@u9ki_srt = internal alias i8, bitcast (%u9ki_srt_struct* @u9ki_srt$def to i8*)
@u9kj_srt$def = internal global %u9kj_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9ki_srt to i64), i64 0}>
@u9kj_srt = internal alias i8, bitcast (%u9kj_srt_struct* @u9kj_srt$def to i8*)
@u9kk_srt$def = internal global %u9kk_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kj_srt to i64), i64 0}>
@u9kk_srt = internal alias i8, bitcast (%u9kk_srt_struct* @u9kk_srt$def to i8*)
@u9kl_srt$def = internal global %u9kl_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kk_srt to i64), i64 0}>
@u9kl_srt = internal alias i8, bitcast (%u9kl_srt_struct* @u9kl_srt$def to i8*)
@u9km_srt$def = internal global %u9km_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kl_srt to i64), i64 0}>
@u9km_srt = internal alias i8, bitcast (%u9km_srt_struct* @u9km_srt$def to i8*)
@u9kn_srt$def = internal global %u9kn_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9km_srt to i64), i64 0}>
@u9kn_srt = internal alias i8, bitcast (%u9kn_srt_struct* @u9kn_srt$def to i8*)
@u9ko_srt$def = internal global %u9ko_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kn_srt to i64), i64 0}>
@u9ko_srt = internal alias i8, bitcast (%u9ko_srt_struct* @u9ko_srt$def to i8*)
@u9kp_srt$def = internal global %u9kp_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStrzq_closure to i64), i64 ptrtoint (i8* @u9ko_srt to i64), i64 0}>
@u9kp_srt = internal alias i8, bitcast (%u9kp_srt_struct* @u9kp_srt$def to i8*)
@u9kq_srt$def = internal global %u9kq_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_closure to i64), i64 ptrtoint (i8* @u9kp_srt to i64), i64 0}>
@u9kq_srt = internal alias i8, bitcast (%u9kq_srt_struct* @u9kq_srt$def to i8*)
@u9kr_srt$def = internal global %u9kr_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziLevel2_zdwgemv_closure to i64), i64 ptrtoint (%r8Ve_closure_struct* @r8Ve_closure$def to i64), i64 ptrtoint (i8* @u9kq_srt to i64), i64 0}>
@u9kr_srt = internal alias i8, bitcast (%u9kr_srt_struct* @u9kr_srt$def to i8*)
@u9ks_srt$def = internal global %u9ks_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vf_closure_struct* @r8Vf_closure$def to i64), i64 ptrtoint (i8* @u9kr_srt to i64), i64 0}>
@u9ks_srt = internal alias i8, bitcast (%u9ks_srt_struct* @u9ks_srt$def to i8*)
@u9kt_srt$def = internal global %u9kt_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9ks_srt to i64), i64 0}>
@u9kt_srt = internal alias i8, bitcast (%u9kt_srt_struct* @u9kt_srt$def to i8*)
@u9ku_srt$def = internal global %u9ku_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vq_closure_struct* @r8Vq_closure$def to i64), i64 ptrtoint (i8* @u9kt_srt to i64), i64 0}>
@u9ku_srt = internal alias i8, bitcast (%u9ku_srt_struct* @u9ku_srt$def to i8*)
@u9kv_srt$def = internal global %u9kv_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vr_closure_struct* @r8Vr_closure$def to i64), i64 ptrtoint (i8* @u9ku_srt to i64), i64 0}>
@u9kv_srt = internal alias i8, bitcast (%u9kv_srt_struct* @u9kv_srt$def to i8*)
@u9kw_srt$def = internal global %u9kw_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vs_closure_struct* @r8Vs_closure$def to i64), i64 ptrtoint (i8* @u9kv_srt to i64), i64 0}>
@u9kw_srt = internal alias i8, bitcast (%u9kw_srt_struct* @u9kw_srt$def to i8*)
@u9kx_srt$def = internal global %u9kx_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vt_closure_struct* @r8Vt_closure$def to i64), i64 ptrtoint (i8* @u9kw_srt to i64), i64 0}>
@u9kx_srt = internal alias i8, bitcast (%u9kx_srt_struct* @u9kx_srt$def to i8*)
@u9ky_srt$def = internal global %u9ky_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vu_closure_struct* @r8Vu_closure$def to i64), i64 ptrtoint (i8* @u9kx_srt to i64), i64 0}>
@u9ky_srt = internal alias i8, bitcast (%u9ky_srt_struct* @u9ky_srt$def to i8*)
@u9kz_srt$def = internal global %u9kz_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vv_closure_struct* @r8Vv_closure$def to i64), i64 ptrtoint (i8* @u9ky_srt to i64), i64 0}>
@u9kz_srt = internal alias i8, bitcast (%u9kz_srt_struct* @u9kz_srt$def to i8*)
@u9kA_srt$def = internal global %u9kA_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8Vw_closure_struct* @r8Vw_closure$def to i64), i64 ptrtoint (i8* @u9kz_srt to i64), i64 0}>
@u9kA_srt = internal alias i8, bitcast (%u9kA_srt_struct* @u9kA_srt$def to i8*)
@u9kB_srt$def = internal global %u9kB_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u9kA_srt to i64), i64 0}>
@u9kB_srt = internal alias i8, bitcast (%u9kB_srt_struct* @u9kB_srt$def to i8*)
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 ptrtoint (%r8Vy_closure_struct* @r8Vy_closure$def to i64), i64 ptrtoint (i8* @u9kB_srt to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.183645 UTC

@s8XH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8XH_info$def to i8*)
define internal ghccc void @s8XH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kn_srt_struct* @u9kn_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8XH_info$def to i64)) to i32),i32 0)}>
{
c9ij:
  %ls8X1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9kC = load i64*, i64** %Sp_Var
  %ln9kD = getelementptr inbounds i64, i64* %ln9kC, i32 -6
  %ln9kE = ptrtoint i64* %ln9kD to i64
  %ln9kF = icmp ult i64 %ln9kE, %SpLim_Arg
  %ln9kG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9kF, i1 0 )
  br i1 %ln9kG, label %c9jm, label %c9jn
c9jn:
  %ln9kI = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9kH = load i64*, i64** %Sp_Var
  %ln9kJ = getelementptr inbounds i64, i64* %ln9kH, i32 -2
  store i64 %ln9kI, i64* %ln9kJ, !tbaa !2
  %ln9kL = load i64, i64* %R1_Var
  %ln9kK = load i64*, i64** %Sp_Var
  %ln9kM = getelementptr inbounds i64, i64* %ln9kK, i32 -1
  store i64 %ln9kL, i64* %ln9kM, !tbaa !2
  %ln9kO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ig_info$def to i64
  %ln9kN = load i64*, i64** %Sp_Var
  %ln9kP = getelementptr inbounds i64, i64* %ln9kN, i32 -4
  store i64 %ln9kO, i64* %ln9kP, !tbaa !2
  %ln9kS = load i64, i64* %R1_Var
  %ln9kT = add i64 %ln9kS, 16
  %ln9kU = inttoptr i64 %ln9kT to i64*
  %ln9kV = load i64, i64* %ln9kU, !tbaa !4
  store i64 %ln9kV, i64* %ls8X1
  %ln9kY = load i64, i64* %R1_Var
  %ln9kZ = add i64 %ln9kY, 24
  %ln9l0 = inttoptr i64 %ln9kZ to i64*
  %ln9l1 = load i64, i64* %ln9l0, !tbaa !4
  store i64 %ln9l1, i64* %R1_Var
  %ln9l3 = load i64, i64* %ls8X1
  %ln9l2 = load i64*, i64** %Sp_Var
  %ln9l4 = getelementptr inbounds i64, i64* %ln9l2, i32 -3
  store i64 %ln9l3, i64* %ln9l4, !tbaa !2
  %ln9l5 = load i64*, i64** %Sp_Var
  %ln9l6 = getelementptr inbounds i64, i64* %ln9l5, i32 -4
  %ln9l7 = ptrtoint i64* %ln9l6 to i64
  %ln9l8 = inttoptr i64 %ln9l7 to i64*
  store i64* %ln9l8, i64** %Sp_Var
  %ln9l9 = load i64, i64* %R1_Var
  %ln9la = and i64 %ln9l9, 7
  %ln9lb = icmp ne i64 %ln9la, 0
  br i1 %ln9lb, label %u9jG, label %c9ih
c9ih:
  %ln9ld = load i64, i64* %R1_Var
  %ln9le = inttoptr i64 %ln9ld to i64*
  %ln9lf = load i64, i64* %ln9le, !tbaa !4
  %ln9lg = inttoptr i64 %ln9lf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lh = load i64*, i64** %Sp_Var
  %ln9li = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lg( i64* %Base_Arg, i64* %ln9lh, i64* %Hp_Arg, i64 %ln9li, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jG:
  %ln9lj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ig_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lk = load i64*, i64** %Sp_Var
  %ln9ll = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lj( i64* %Base_Arg, i64* %ln9lk, i64* %Hp_Arg, i64 %ln9ll, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9jm:
  %ln9lm = load i64, i64* %R1_Var
  store i64 %ln9lm, i64* %R1_Var
  %ln9ln = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9lo = bitcast i64* %ln9ln to i64*
  %ln9lp = load i64, i64* %ln9lo, !tbaa !5
  %ln9lq = inttoptr i64 %ln9lp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lr = load i64*, i64** %Sp_Var
  %ln9ls = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lq( i64* %Base_Arg, i64* %ln9lr, i64* %Hp_Arg, i64 %ln9ls, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.186035 UTC

@c9ig_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ig_info$def to i8*)
define internal ghccc void @c9ig_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9km_srt_struct* @u9km_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ig_info$def to i64)) to i32),i32 0)}>
{
c9ig:
  %ls8Xf = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9lu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9im_info$def to i64
  %ln9lt = load i64*, i64** %Sp_Var
  %ln9lv = getelementptr inbounds i64, i64* %ln9lt, i32 -1
  store i64 %ln9lu, i64* %ln9lv, !tbaa !2
  %ln9ly = load i64, i64* %R1_Var
  %ln9lz = add i64 %ln9ly, 15
  %ln9lA = inttoptr i64 %ln9lz to i64*
  %ln9lB = load i64, i64* %ln9lA, !tbaa !4
  store i64 %ln9lB, i64* %ls8Xf
  %ln9lE = load i64, i64* %R1_Var
  %ln9lF = add i64 %ln9lE, 7
  %ln9lG = inttoptr i64 %ln9lF to i64*
  %ln9lH = load i64, i64* %ln9lG, !tbaa !4
  store i64 %ln9lH, i64* %R1_Var
  %ln9lJ = load i64, i64* %ls8Xf
  %ln9lI = load i64*, i64** %Sp_Var
  %ln9lK = getelementptr inbounds i64, i64* %ln9lI, i32 0
  store i64 %ln9lJ, i64* %ln9lK, !tbaa !2
  %ln9lL = load i64*, i64** %Sp_Var
  %ln9lM = getelementptr inbounds i64, i64* %ln9lL, i32 -1
  %ln9lN = ptrtoint i64* %ln9lM to i64
  %ln9lO = inttoptr i64 %ln9lN to i64*
  store i64* %ln9lO, i64** %Sp_Var
  %ln9lP = load i64, i64* %R1_Var
  %ln9lQ = and i64 %ln9lP, 7
  %ln9lR = icmp ne i64 %ln9lQ, 0
  br i1 %ln9lR, label %u9jF, label %c9in
c9in:
  %ln9lT = load i64, i64* %R1_Var
  %ln9lU = inttoptr i64 %ln9lT to i64*
  %ln9lV = load i64, i64* %ln9lU, !tbaa !4
  %ln9lW = inttoptr i64 %ln9lV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lX = load i64*, i64** %Sp_Var
  %ln9lY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lW( i64* %Base_Arg, i64* %ln9lX, i64* %Hp_Arg, i64 %ln9lY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jF:
  %ln9lZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9im_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9m0 = load i64*, i64** %Sp_Var
  %ln9m1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lZ( i64* %Base_Arg, i64* %ln9m0, i64* %Hp_Arg, i64 %ln9m1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.189154 UTC

@c9im_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9im_info$def to i8*)
define internal ghccc void @c9im_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kl_srt_struct* @u9kl_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9im_info$def to i64)) to i32),i32 0)}>
{
c9im:
  %ls8Xh = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9m2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ir_info$def to i64
  %ln9m3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9m2, i64* %ln9m3, !tbaa !2
  %ln9m6 = load i64, i64* %R1_Var
  %ln9m7 = add i64 %ln9m6, 7
  %ln9m8 = inttoptr i64 %ln9m7 to i64*
  %ln9m9 = load i64, i64* %ln9m8, !tbaa !4
  store i64 %ln9m9, i64* %ls8Xh
  %ln9ma = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9mb = bitcast i64* %ln9ma to i64*
  %ln9mc = load i64, i64* %ln9mb, !tbaa !2
  store i64 %ln9mc, i64* %R1_Var
  %ln9md = load i64, i64* %ls8Xh
  %ln9me = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln9md, i64* %ln9me, !tbaa !2
  %ln9mf = load i64, i64* %R1_Var
  %ln9mg = and i64 %ln9mf, 7
  %ln9mh = icmp ne i64 %ln9mg, 0
  br i1 %ln9mh, label %u9jH, label %c9is
c9is:
  %ln9mj = load i64, i64* %R1_Var
  %ln9mk = inttoptr i64 %ln9mj to i64*
  %ln9ml = load i64, i64* %ln9mk, !tbaa !4
  %ln9mm = inttoptr i64 %ln9ml to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9mn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jH:
  %ln9mo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ir_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mo( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9mp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.190487 UTC

@c9ir_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ir_info$def to i8*)
define internal ghccc void @c9ir_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kk_srt_struct* @u9kk_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ir_info$def to i64)) to i32),i32 0)}>
{
c9ir:
  %ls8Xh = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9mq = load i64*, i64** %Sp_Var
  %ln9mr = getelementptr inbounds i64, i64* %ln9mq, i32 1
  %ln9ms = bitcast i64* %ln9mr to i64*
  %ln9mt = load i64, i64* %ln9ms, !tbaa !2
  store i64 %ln9mt, i64* %ls8Xh
  %ln9mv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iC_info$def to i64
  %ln9mu = load i64*, i64** %Sp_Var
  %ln9mw = getelementptr inbounds i64, i64* %ln9mu, i32 1
  store i64 %ln9mv, i64* %ln9mw, !tbaa !2
  %ln9mx = add i64 %R1_Arg, 7
  %ln9my = inttoptr i64 %ln9mx to i64*
  %ln9mz = load i64, i64* %ln9my, !tbaa !4
  %ln9mA = trunc i64 %ln9mz to i32
  %ln9mB = zext i32 %ln9mA to i64
  store i64 %ln9mB, i64* %R3_Var
  %ln9mC = load i64, i64* %ls8Xh
  store i64 %ln9mC, i64* %R2_Var
  %ln9mD = load i64*, i64** %Sp_Var
  %ln9mE = getelementptr inbounds i64, i64* %ln9mD, i32 1
  %ln9mF = ptrtoint i64* %ln9mE to i64
  %ln9mG = inttoptr i64 %ln9mF to i64*
  store i64* %ln9mG, i64** %Sp_Var
  %ln9mH = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mI = load i64*, i64** %Sp_Var
  %ln9mJ = load i64, i64* %R2_Var
  %ln9mK = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mH( i64* %Base_Arg, i64* %ln9mI, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9mJ, i64 %ln9mK, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.191803 UTC

@c9iC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iC_info$def to i8*)
define internal ghccc void @c9iC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kj_srt_struct* @u9kj_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iC_info$def to i64)) to i32),i32 0)}>
{
c9iC:
  %ls8Xn = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9mM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iE_info$def to i64
  %ln9mL = load i64*, i64** %Sp_Var
  %ln9mN = getelementptr inbounds i64, i64* %ln9mL, i32 -1
  store i64 %ln9mM, i64* %ln9mN, !tbaa !2
  %ln9mO = load i64, i64* %R1_Var
  store i64 %ln9mO, i64* %ls8Xn
  %ln9mP = load i64*, i64** %Sp_Var
  %ln9mQ = getelementptr inbounds i64, i64* %ln9mP, i32 1
  %ln9mR = bitcast i64* %ln9mQ to i64*
  %ln9mS = load i64, i64* %ln9mR, !tbaa !2
  store i64 %ln9mS, i64* %R1_Var
  %ln9mT = load i64*, i64** %Sp_Var
  %ln9mU = getelementptr inbounds i64, i64* %ln9mT, i32 0
  store i64 %R2_Arg, i64* %ln9mU, !tbaa !2
  %ln9mW = load i64, i64* %ls8Xn
  %ln9mV = load i64*, i64** %Sp_Var
  %ln9mX = getelementptr inbounds i64, i64* %ln9mV, i32 1
  store i64 %ln9mW, i64* %ln9mX, !tbaa !2
  %ln9mY = load i64*, i64** %Sp_Var
  %ln9mZ = getelementptr inbounds i64, i64* %ln9mY, i32 -1
  %ln9n0 = ptrtoint i64* %ln9mZ to i64
  %ln9n1 = inttoptr i64 %ln9n0 to i64*
  store i64* %ln9n1, i64** %Sp_Var
  %ln9n2 = load i64, i64* %R1_Var
  %ln9n3 = and i64 %ln9n2, 7
  %ln9n4 = icmp ne i64 %ln9n3, 0
  br i1 %ln9n4, label %u9jI, label %c9iF
c9iF:
  %ln9n6 = load i64, i64* %R1_Var
  %ln9n7 = inttoptr i64 %ln9n6 to i64*
  %ln9n8 = load i64, i64* %ln9n7, !tbaa !4
  %ln9n9 = inttoptr i64 %ln9n8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9na = load i64*, i64** %Sp_Var
  %ln9nb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9n9( i64* %Base_Arg, i64* %ln9na, i64* %Hp_Arg, i64 %ln9nb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jI:
  %ln9nc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nd = load i64*, i64** %Sp_Var
  %ln9ne = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nc( i64* %Base_Arg, i64* %ln9nd, i64* %Hp_Arg, i64 %ln9ne, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.193431 UTC

@c9iE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iE_info$def to i8*)
define internal ghccc void @c9iE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ki_srt_struct* @u9ki_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iE_info$def to i64)) to i32),i32 0)}>
{
c9iE:
  %ls8Xr = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9ng = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to i64
  %ln9nf = load i64*, i64** %Sp_Var
  %ln9nh = getelementptr inbounds i64, i64* %ln9nf, i32 -1
  store i64 %ln9ng, i64* %ln9nh, !tbaa !2
  %ln9nk = load i64, i64* %R1_Var
  %ln9nl = add i64 %ln9nk, 15
  %ln9nm = inttoptr i64 %ln9nl to i64*
  %ln9nn = load i64, i64* %ln9nm, !tbaa !4
  store i64 %ln9nn, i64* %ls8Xr
  %ln9nq = load i64, i64* %R1_Var
  %ln9nr = add i64 %ln9nq, 7
  %ln9ns = inttoptr i64 %ln9nr to i64*
  %ln9nt = load i64, i64* %ln9ns, !tbaa !4
  store i64 %ln9nt, i64* %R1_Var
  %ln9nv = load i64, i64* %ls8Xr
  %ln9nu = load i64*, i64** %Sp_Var
  %ln9nw = getelementptr inbounds i64, i64* %ln9nu, i32 0
  store i64 %ln9nv, i64* %ln9nw, !tbaa !2
  %ln9nx = load i64*, i64** %Sp_Var
  %ln9ny = getelementptr inbounds i64, i64* %ln9nx, i32 -1
  %ln9nz = ptrtoint i64* %ln9ny to i64
  %ln9nA = inttoptr i64 %ln9nz to i64*
  store i64* %ln9nA, i64** %Sp_Var
  %ln9nB = load i64, i64* %R1_Var
  %ln9nC = and i64 %ln9nB, 7
  %ln9nD = icmp ne i64 %ln9nC, 0
  br i1 %ln9nD, label %u9jJ, label %c9iK
c9iK:
  %ln9nF = load i64, i64* %R1_Var
  %ln9nG = inttoptr i64 %ln9nF to i64*
  %ln9nH = load i64, i64* %ln9nG, !tbaa !4
  %ln9nI = inttoptr i64 %ln9nH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nJ = load i64*, i64** %Sp_Var
  %ln9nK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nI( i64* %Base_Arg, i64* %ln9nJ, i64* %Hp_Arg, i64 %ln9nK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jJ:
  %ln9nL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nM = load i64*, i64** %Sp_Var
  %ln9nN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nL( i64* %Base_Arg, i64* %ln9nM, i64* %Hp_Arg, i64 %ln9nN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.195082 UTC

@c9iJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to i8*)
define internal ghccc void @c9iJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kh_srt_struct* @u9kh_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to i64)) to i32),i32 0)}>
{
c9iJ:
  %ls8Xt = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9nO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iO_info$def to i64
  %ln9nP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9nO, i64* %ln9nP, !tbaa !2
  %ln9nS = load i64, i64* %R1_Var
  %ln9nT = add i64 %ln9nS, 7
  %ln9nU = inttoptr i64 %ln9nT to i64*
  %ln9nV = load i64, i64* %ln9nU, !tbaa !4
  store i64 %ln9nV, i64* %ls8Xt
  %ln9nW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9nX = bitcast i64* %ln9nW to i64*
  %ln9nY = load i64, i64* %ln9nX, !tbaa !2
  store i64 %ln9nY, i64* %R1_Var
  %ln9nZ = load i64, i64* %ls8Xt
  %ln9o0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln9nZ, i64* %ln9o0, !tbaa !2
  %ln9o1 = load i64, i64* %R1_Var
  %ln9o2 = and i64 %ln9o1, 7
  %ln9o3 = icmp ne i64 %ln9o2, 0
  br i1 %ln9o3, label %u9jK, label %c9iP
c9iP:
  %ln9o5 = load i64, i64* %R1_Var
  %ln9o6 = inttoptr i64 %ln9o5 to i64*
  %ln9o7 = load i64, i64* %ln9o6, !tbaa !4
  %ln9o8 = inttoptr i64 %ln9o7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9o9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9o8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9o9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jK:
  %ln9oa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ob = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oa( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9ob, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.197287 UTC

@c9iO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iO_info$def to i8*)
define internal ghccc void @c9iO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 67, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kg_srt_struct* @u9kg_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iO_info$def to i64)) to i32),i32 0)}>
{
c9iO:
  %ls8Xt = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9oc = load i64*, i64** %Sp_Var
  %ln9od = getelementptr inbounds i64, i64* %ln9oc, i32 1
  %ln9oe = bitcast i64* %ln9od to i64*
  %ln9of = load i64, i64* %ln9oe, !tbaa !2
  store i64 %ln9of, i64* %ls8Xt
  %ln9oh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iZ_info$def to i64
  %ln9og = load i64*, i64** %Sp_Var
  %ln9oi = getelementptr inbounds i64, i64* %ln9og, i32 1
  store i64 %ln9oh, i64* %ln9oi, !tbaa !2
  %ln9oj = add i64 %R1_Arg, 7
  %ln9ok = inttoptr i64 %ln9oj to i64*
  %ln9ol = load i64, i64* %ln9ok, !tbaa !4
  %ln9om = trunc i64 %ln9ol to i32
  %ln9on = zext i32 %ln9om to i64
  store i64 %ln9on, i64* %R3_Var
  %ln9oo = load i64, i64* %ls8Xt
  store i64 %ln9oo, i64* %R2_Var
  %ln9op = load i64*, i64** %Sp_Var
  %ln9oq = getelementptr inbounds i64, i64* %ln9op, i32 1
  %ln9or = ptrtoint i64* %ln9oq to i64
  %ln9os = inttoptr i64 %ln9or to i64*
  store i64* %ln9os, i64** %Sp_Var
  %ln9ot = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ou = load i64*, i64** %Sp_Var
  %ln9ov = load i64, i64* %R2_Var
  %ln9ow = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ot( i64* %Base_Arg, i64* %ln9ou, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9ov, i64 %ln9ow, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.198845 UTC

@c9iZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iZ_info$def to i8*)
define internal ghccc void @c9iZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kf_srt_struct* @u9kf_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iZ_info$def to i64)) to i32),i32 0)}>
{
c9iZ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9ox = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j1_info$def to i64
  %ln9oy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9ox, i64* %ln9oy, !tbaa !2
  %ln9oz = load i64, i64* %R2_Var
  store i64 %ln9oz, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9oA = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oB = load i64, i64* %R2_Var
  %ln9oC = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9oB, i64 %ln9oC, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.199984 UTC

@c9j1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j1_info$def to i8*)
define internal ghccc void @c9j1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ke_srt_struct* @u9ke_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j1_info$def to i64)) to i32),i32 0)}>
{
c9j1:
  %ls8Xo = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9oD = load i64*, i64** %Sp_Var
  %ln9oE = getelementptr inbounds i64, i64* %ln9oD, i32 1
  %ln9oF = bitcast i64* %ln9oE to i64*
  %ln9oG = load i64, i64* %ln9oF, !tbaa !2
  store i64 %ln9oG, i64* %ls8Xo
  %ln9oI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j5_info$def to i64
  %ln9oH = load i64*, i64** %Sp_Var
  %ln9oJ = getelementptr inbounds i64, i64* %ln9oH, i32 1
  store i64 %ln9oI, i64* %ln9oJ, !tbaa !2
  %ln9oK = load i64, i64* %ls8Xo
  store i64 %ln9oK, i64* %R3_Var
  %ln9oL = load i64*, i64** %Sp_Var
  %ln9oM = getelementptr inbounds i64, i64* %ln9oL, i32 2
  %ln9oN = bitcast i64* %ln9oM to i64*
  %ln9oO = load i64, i64* %ln9oN, !tbaa !2
  store i64 %ln9oO, i64* %R2_Var
  %ln9oP = load i64*, i64** %Sp_Var
  %ln9oQ = getelementptr inbounds i64, i64* %ln9oP, i32 2
  store i64 %R1_Arg, i64* %ln9oQ, !tbaa !2
  %ln9oR = load i64*, i64** %Sp_Var
  %ln9oS = getelementptr inbounds i64, i64* %ln9oR, i32 1
  %ln9oT = ptrtoint i64* %ln9oS to i64
  %ln9oU = inttoptr i64 %ln9oT to i64*
  store i64* %ln9oU, i64** %Sp_Var
  %ln9oV = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oW = load i64*, i64** %Sp_Var
  %ln9oX = load i64, i64* %R2_Var
  %ln9oY = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oV( i64* %Base_Arg, i64* %ln9oW, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9oX, i64 %ln9oY, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.202173 UTC

@c9j5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j5_info$def to i8*)
define internal ghccc void @c9j5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kd_srt_struct* @u9kd_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j5_info$def to i64)) to i32),i32 0)}>
{
c9j5:
  %ls8XC = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9oZ = load i64*, i64** %Sp_Var
  %ln9p0 = getelementptr inbounds i64, i64* %ln9oZ, i32 1
  %ln9p1 = bitcast i64* %ln9p0 to i64*
  %ln9p2 = load i64, i64* %ln9p1, !tbaa !2
  store i64 %ln9p2, i64* %ls8XC
  %ln9p4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j9_info$def to i64
  %ln9p3 = load i64*, i64** %Sp_Var
  %ln9p5 = getelementptr inbounds i64, i64* %ln9p3, i32 1
  store i64 %ln9p4, i64* %ln9p5, !tbaa !2
  %ln9p6 = load i64, i64* %ls8XC
  store i64 %ln9p6, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9p7 = load i64*, i64** %Sp_Var
  %ln9p8 = getelementptr inbounds i64, i64* %ln9p7, i32 1
  %ln9p9 = ptrtoint i64* %ln9p8 to i64
  %ln9pa = inttoptr i64 %ln9p9 to i64*
  store i64* %ln9pa, i64** %Sp_Var
  %ln9pb = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pc = load i64*, i64** %Sp_Var
  %ln9pd = load i64, i64* %R2_Var
  %ln9pe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pb( i64* %Base_Arg, i64* %ln9pc, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9pd, i64 %ln9pe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.203291 UTC

@c9j9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j9_info$def to i8*)
define internal ghccc void @c9j9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kc_srt_struct* @u9kc_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9j9_info$def to i64)) to i32),i32 0)}>
{
c9j9:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9pf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jd_info$def to i64
  %ln9pg = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9pf, i64* %ln9pg, !tbaa !2
  %ln9ph = ptrtoint %r8Vh_closure_struct* @r8Vh_closure$def to i64
  %ln9pi = add i64 %ln9ph, 1
  store i64 %ln9pi, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9pj = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pk = load i64, i64* %R2_Var
  %ln9pl = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9pk, i64 %ln9pl, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.204313 UTC

@c9jd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jd_info$def to i8*)
define internal ghccc void @c9jd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kb_srt_struct* @u9kb_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jd_info$def to i64)) to i32),i32 0)}>
{
c9jd:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9pm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jh_info$def to i64
  %ln9pn = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9pm, i64* %ln9pn, !tbaa !2
  %ln9po = ptrtoint i8* @base_DataziFixed_zdfHasResolutionE5_closure to i64
  store i64 %ln9po, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9pp = bitcast i8* @integerzmgmp_GHCziIntegerziType_divInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pq = load i64, i64* %R2_Var
  %ln9pr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9pq, i64 %ln9pr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.20588 UTC

@c9jh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jh_info$def to i8*)
define internal ghccc void @c9jh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ka_srt_struct* @u9ka_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jh_info$def to i64)) to i32),i32 0)}>
{
c9jh:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9ps = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jl_info$def to i64
  %ln9pt = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9ps, i64* %ln9pt, !tbaa !2
  store i64 %R1_Arg, i64* %R4_Var
  %ln9pu = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9pv = add i64 %ln9pu, 2
  store i64 %ln9pv, i64* %R3_Var
  %ln9pw = ptrtoint i8* @base_DataziFixed_zdfHasResolutionE12zuzdcresolution_closure to i64
  %ln9px = add i64 %ln9pw, 1
  store i64 %ln9px, i64* %R2_Var
  %ln9py = bitcast i8* @base_DataziFixed_showFixed_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pz = load i64, i64* %R2_Var
  %ln9pA = load i64, i64* %R3_Var
  %ln9pB = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9py( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9pz, i64 %ln9pA, i64 %ln9pB, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.207168 UTC

@c9jl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jl_info$def to i8*)
define internal ghccc void @c9jl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9k9_srt_struct* @u9k9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jl_info$def to i64)) to i32),i32 0)}>
{
c9jl:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9pC = ptrtoint i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziNominalDiffTime_zdfShowNominalDiffTime3_closure to i64
  store i64 %ln9pC, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9pD = load i64*, i64** %Sp_Var
  %ln9pE = getelementptr inbounds i64, i64* %ln9pD, i32 1
  %ln9pF = ptrtoint i64* %ln9pE to i64
  %ln9pG = inttoptr i64 %ln9pF to i64*
  store i64* %ln9pG, i64** %Sp_Var
  %ln9pH = bitcast i8* @base_GHCziBase_zpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pI = load i64*, i64** %Sp_Var
  %ln9pJ = load i64, i64* %R2_Var
  %ln9pK = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pH( i64* %Base_Arg, i64* %ln9pI, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9pJ, i64 %ln9pK, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.209365 UTC

@s8XI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8XI_info$def to i8*)
define internal ghccc void @s8XI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ko_srt_struct* @u9ko_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8XI_info$def to i64)) to i32),i32 0)}>
{
c9jL:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8X1 = alloca i64, i32 1
  %ls8Xc = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9pL = load i64*, i64** %Hp_Var
  %ln9pM = getelementptr inbounds i64, i64* %ln9pL, i32 4
  %ln9pN = ptrtoint i64* %ln9pM to i64
  %ln9pO = inttoptr i64 %ln9pN to i64*
  store i64* %ln9pO, i64** %Hp_Var
  %ln9pP = load i64*, i64** %Hp_Var
  %ln9pQ = ptrtoint i64* %ln9pP to i64
  %ln9pR = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9pS = bitcast i64* %ln9pR to i64*
  %ln9pT = load i64, i64* %ln9pS, !tbaa !5
  %ln9pU = icmp ugt i64 %ln9pQ, %ln9pT
  %ln9pV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9pU, i1 0 )
  br i1 %ln9pV, label %c9jP, label %c9jO
c9jO:
  %ln9pY = load i64, i64* %R1_Var
  %ln9pZ = add i64 %ln9pY, 16
  %ln9q0 = inttoptr i64 %ln9pZ to i64*
  %ln9q1 = load i64, i64* %ln9q0, !tbaa !4
  store i64 %ln9q1, i64* %ls8X1
  %ln9q4 = load i64, i64* %R1_Var
  %ln9q5 = add i64 %ln9q4, 24
  %ln9q6 = inttoptr i64 %ln9q5 to i64*
  %ln9q7 = load i64, i64* %ln9q6, !tbaa !4
  store i64 %ln9q7, i64* %ls8Xc
  %ln9q9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8XH_info$def to i64
  %ln9q8 = load i64*, i64** %Hp_Var
  %ln9qa = getelementptr inbounds i64, i64* %ln9q8, i32 -3
  store i64 %ln9q9, i64* %ln9qa, !tbaa !3
  %ln9qc = load i64, i64* %ls8X1
  %ln9qb = load i64*, i64** %Hp_Var
  %ln9qd = getelementptr inbounds i64, i64* %ln9qb, i32 -1
  store i64 %ln9qc, i64* %ln9qd, !tbaa !3
  %ln9qf = load i64, i64* %ls8Xc
  %ln9qe = load i64*, i64** %Hp_Var
  %ln9qg = getelementptr inbounds i64, i64* %ln9qe, i32 0
  store i64 %ln9qf, i64* %ln9qg, !tbaa !3
  %ln9qh = load i64*, i64** %Hp_Var
  %ln9qi = getelementptr inbounds i64, i64* %ln9qh, i32 -3
  %ln9qj = ptrtoint i64* %ln9qi to i64
  store i64 %ln9qj, i64* %R3_Var
  %ln9qk = ptrtoint %r8Vg_bytes_struct* @r8Vg_bytes$def to i64
  store i64 %ln9qk, i64* %R2_Var
  %ln9ql = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qm = load i64*, i64** %Hp_Var
  %ln9qn = load i64, i64* %R1_Var
  %ln9qo = load i64, i64* %R2_Var
  %ln9qp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ql( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9qm, i64 %ln9qn, i64 %ln9qo, i64 %ln9qp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9jP:
  %ln9qq = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9qq, !tbaa !5
  %ln9qr = load i64, i64* %R1_Var
  store i64 %ln9qr, i64* %R1_Var
  %ln9qs = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9qt = bitcast i64* %ln9qs to i64*
  %ln9qu = load i64, i64* %ln9qt, !tbaa !5
  %ln9qv = inttoptr i64 %ln9qu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qw = load i64*, i64** %Hp_Var
  %ln9qx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qv( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9qw, i64 %ln9qx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.211907 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
c9jQ:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9qy = load i64*, i64** %Sp_Var
  %ln9qz = getelementptr inbounds i64, i64* %ln9qy, i32 -5
  %ln9qA = ptrtoint i64* %ln9qz to i64
  %ln9qB = icmp ult i64 %ln9qA, %SpLim_Arg
  %ln9qC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9qB, i1 0 )
  br i1 %ln9qC, label %c9jR, label %c9jS
c9jS:
  %ln9qE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hD_info$def to i64
  %ln9qD = load i64*, i64** %Sp_Var
  %ln9qF = getelementptr inbounds i64, i64* %ln9qD, i32 -1
  store i64 %ln9qE, i64* %ln9qF, !tbaa !2
  %ln9qG = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9qH = add i64 %ln9qG, 2
  store i64 %ln9qH, i64* %R4_Var
  %ln9qI = ptrtoint %r8Vy_closure_struct* @r8Vy_closure$def to i64
  store i64 %ln9qI, i64* %R3_Var
  %ln9qJ = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9qJ, i64* %R2_Var
  %ln9qK = load i64*, i64** %Sp_Var
  %ln9qL = getelementptr inbounds i64, i64* %ln9qK, i32 -1
  %ln9qM = ptrtoint i64* %ln9qL to i64
  %ln9qN = inttoptr i64 %ln9qM to i64*
  store i64* %ln9qN, i64** %Sp_Var
  %ln9qO = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qP = load i64*, i64** %Sp_Var
  %ln9qQ = load i64, i64* %R1_Var
  %ln9qR = load i64, i64* %R2_Var
  %ln9qS = load i64, i64* %R3_Var
  %ln9qT = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qO( i64* %Base_Arg, i64* %ln9qP, i64* %Hp_Arg, i64 %ln9qQ, i64 %ln9qR, i64 %ln9qS, i64 %ln9qT, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9jR:
  %ln9qU = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %ln9qU, i64* %R1_Var
  %ln9qV = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9qW = bitcast i64* %ln9qV to i64*
  %ln9qX = load i64, i64* %ln9qW, !tbaa !5
  %ln9qY = inttoptr i64 %ln9qX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qZ = load i64*, i64** %Sp_Var
  %ln9r0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qY( i64* %Base_Arg, i64* %ln9qZ, i64* %Hp_Arg, i64 %ln9r0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.214124 UTC

@c9hD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hD_info$def to i8*)
define internal ghccc void @c9hD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kB_srt_struct* @u9kB_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hD_info$def to i64)) to i32),i32 0)}>
{
c9hD:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9r1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hF_info$def to i64
  %ln9r2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9r1, i64* %ln9r2, !tbaa !2
  %ln9r3 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9r4 = add i64 %ln9r3, 2
  store i64 %ln9r4, i64* %R4_Var
  %ln9r5 = ptrtoint %r8Vw_closure_struct* @r8Vw_closure$def to i64
  store i64 %ln9r5, i64* %R3_Var
  %ln9r6 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9r6, i64* %R2_Var
  %ln9r7 = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9r8 = load i64, i64* %R2_Var
  %ln9r9 = load i64, i64* %R3_Var
  %ln9ra = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9r7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9r8, i64 %ln9r9, i64 %ln9ra, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.215196 UTC

@c9hF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hF_info$def to i8*)
define internal ghccc void @c9hF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kA_srt_struct* @u9kA_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hF_info$def to i64)) to i32),i32 0)}>
{
c9hF:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9rb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to i64
  %ln9rc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9rb, i64* %ln9rc, !tbaa !2
  %ln9rd = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9re = add i64 %ln9rd, 2
  store i64 %ln9re, i64* %R4_Var
  %ln9rf = ptrtoint %r8Vw_closure_struct* @r8Vw_closure$def to i64
  store i64 %ln9rf, i64* %R3_Var
  %ln9rg = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9rg, i64* %R2_Var
  %ln9rh = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ri = load i64, i64* %R2_Var
  %ln9rj = load i64, i64* %R3_Var
  %ln9rk = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9ri, i64 %ln9rj, i64 %ln9rk, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.21619 UTC

@c9hH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to i8*)
define internal ghccc void @c9hH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kz_srt_struct* @u9kz_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to i64)) to i32),i32 0)}>
{
c9hH:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9rl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hJ_info$def to i64
  %ln9rm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9rl, i64* %ln9rm, !tbaa !2
  %ln9rn = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9ro = add i64 %ln9rn, 2
  store i64 %ln9ro, i64* %R4_Var
  %ln9rp = ptrtoint %r8Vv_closure_struct* @r8Vv_closure$def to i64
  store i64 %ln9rp, i64* %R3_Var
  %ln9rq = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9rq, i64* %R2_Var
  %ln9rr = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rs = load i64, i64* %R2_Var
  %ln9rt = load i64, i64* %R3_Var
  %ln9ru = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9rs, i64 %ln9rt, i64 %ln9ru, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.217199 UTC

@c9hJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hJ_info$def to i8*)
define internal ghccc void @c9hJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ky_srt_struct* @u9ky_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hJ_info$def to i64)) to i32),i32 0)}>
{
c9hJ:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9rv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hL_info$def to i64
  %ln9rw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9rv, i64* %ln9rw, !tbaa !2
  %ln9rx = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9ry = add i64 %ln9rx, 2
  store i64 %ln9ry, i64* %R4_Var
  %ln9rz = ptrtoint %r8Vu_closure_struct* @r8Vu_closure$def to i64
  store i64 %ln9rz, i64* %R3_Var
  %ln9rA = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9rA, i64* %R2_Var
  %ln9rB = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rC = load i64, i64* %R2_Var
  %ln9rD = load i64, i64* %R3_Var
  %ln9rE = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9rC, i64 %ln9rD, i64 %ln9rE, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.218222 UTC

@c9hL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hL_info$def to i8*)
define internal ghccc void @c9hL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kx_srt_struct* @u9kx_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hL_info$def to i64)) to i32),i32 0)}>
{
c9hL:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9rF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hN_info$def to i64
  %ln9rG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9rF, i64* %ln9rG, !tbaa !2
  %ln9rH = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9rI = add i64 %ln9rH, 2
  store i64 %ln9rI, i64* %R4_Var
  %ln9rJ = ptrtoint %r8Vt_closure_struct* @r8Vt_closure$def to i64
  store i64 %ln9rJ, i64* %R3_Var
  %ln9rK = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9rK, i64* %R2_Var
  %ln9rL = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rM = load i64, i64* %R2_Var
  %ln9rN = load i64, i64* %R3_Var
  %ln9rO = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9rM, i64 %ln9rN, i64 %ln9rO, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.220053 UTC

@c9hN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hN_info$def to i8*)
define internal ghccc void @c9hN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kw_srt_struct* @u9kw_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hN_info$def to i64)) to i32),i32 0)}>
{
c9hN:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9rP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hP_info$def to i64
  %ln9rQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9rP, i64* %ln9rQ, !tbaa !2
  %ln9rR = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9rS = add i64 %ln9rR, 2
  store i64 %ln9rS, i64* %R4_Var
  %ln9rT = ptrtoint %r8Vs_closure_struct* @r8Vs_closure$def to i64
  store i64 %ln9rT, i64* %R3_Var
  %ln9rU = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9rU, i64* %R2_Var
  %ln9rV = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rW = load i64, i64* %R2_Var
  %ln9rX = load i64, i64* %R3_Var
  %ln9rY = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9rW, i64 %ln9rX, i64 %ln9rY, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.222167 UTC

@c9hP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hP_info$def to i8*)
define internal ghccc void @c9hP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kv_srt_struct* @u9kv_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hP_info$def to i64)) to i32),i32 0)}>
{
c9hP:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9rZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hR_info$def to i64
  %ln9s0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9rZ, i64* %ln9s0, !tbaa !2
  %ln9s1 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9s2 = add i64 %ln9s1, 2
  store i64 %ln9s2, i64* %R4_Var
  %ln9s3 = ptrtoint %r8Vr_closure_struct* @r8Vr_closure$def to i64
  store i64 %ln9s3, i64* %R3_Var
  %ln9s4 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9s4, i64* %R2_Var
  %ln9s5 = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9s6 = load i64, i64* %R2_Var
  %ln9s7 = load i64, i64* %R3_Var
  %ln9s8 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9s5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9s6, i64 %ln9s7, i64 %ln9s8, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.223746 UTC

@c9hR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hR_info$def to i8*)
define internal ghccc void @c9hR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ku_srt_struct* @u9ku_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hR_info$def to i64)) to i32),i32 0)}>
{
c9hR:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9s9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hT_info$def to i64
  %ln9sa = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9s9, i64* %ln9sa, !tbaa !2
  %ln9sb = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9sc = add i64 %ln9sb, 2
  store i64 %ln9sc, i64* %R4_Var
  %ln9sd = ptrtoint %r8Vq_closure_struct* @r8Vq_closure$def to i64
  store i64 %ln9sd, i64* %R3_Var
  %ln9se = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9se, i64* %R2_Var
  %ln9sf = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sg = load i64, i64* %R2_Var
  %ln9sh = load i64, i64* %R3_Var
  %ln9si = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9sg, i64 %ln9sh, i64 %ln9si, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.225114 UTC

@c9hT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hT_info$def to i8*)
define internal ghccc void @c9hT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kt_srt_struct* @u9kt_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hT_info$def to i64)) to i32),i32 0)}>
{
c9hT:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9sj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hV_info$def to i64
  %ln9sk = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9sj, i64* %ln9sk, !tbaa !2
  store i64 0, i64* %R2_Var
  %ln9sl = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9sm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.227051 UTC

@c9hV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hV_info$def to i8*)
define internal ghccc void @c9hV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9ks_srt_struct* @u9ks_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hV_info$def to i64)) to i32),i32 0)}>
{
c9hV:
  %ls8X1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9so = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hX_info$def to i64
  %ln9sn = load i64*, i64** %Sp_Var
  %ln9sp = getelementptr inbounds i64, i64* %ln9sn, i32 -1
  store i64 %ln9so, i64* %ln9sp, !tbaa !2
  %ln9sq = load i64, i64* %R1_Var
  store i64 %ln9sq, i64* %ls8X1
  %ln9sr = ptrtoint %r8Vf_closure_struct* @r8Vf_closure$def to i64
  store i64 %ln9sr, i64* %R1_Var
  %ln9st = load i64, i64* %ls8X1
  %ln9ss = load i64*, i64** %Sp_Var
  %ln9su = getelementptr inbounds i64, i64* %ln9ss, i32 0
  store i64 %ln9st, i64* %ln9su, !tbaa !2
  %ln9sv = load i64*, i64** %Sp_Var
  %ln9sw = getelementptr inbounds i64, i64* %ln9sv, i32 -1
  %ln9sx = ptrtoint i64* %ln9sw to i64
  %ln9sy = inttoptr i64 %ln9sx to i64*
  store i64* %ln9sy, i64** %Sp_Var
  %ln9sz = load i64, i64* %R1_Var
  %ln9sA = and i64 %ln9sz, 7
  %ln9sB = icmp ne i64 %ln9sA, 0
  br i1 %ln9sB, label %u9k8, label %c9hY
c9hY:
  %ln9sD = load i64, i64* %R1_Var
  %ln9sE = inttoptr i64 %ln9sD to i64*
  %ln9sF = load i64, i64* %ln9sE, !tbaa !4
  %ln9sG = inttoptr i64 %ln9sF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sH = load i64*, i64** %Sp_Var
  %ln9sI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sG( i64* %Base_Arg, i64* %ln9sH, i64* %Hp_Arg, i64 %ln9sI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9k8:
  %ln9sJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sK = load i64*, i64** %Sp_Var
  %ln9sL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sJ( i64* %Base_Arg, i64* %ln9sK, i64* %Hp_Arg, i64 %ln9sL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.22867 UTC

@c9hX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hX_info$def to i8*)
define internal ghccc void @c9hX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kr_srt_struct* @u9kr_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hX_info$def to i64)) to i32),i32 0)}>
{
c9hX:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9sN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9i2_info$def to i64
  %ln9sM = load i64*, i64** %Sp_Var
  %ln9sO = getelementptr inbounds i64, i64* %ln9sM, i32 0
  store i64 %ln9sN, i64* %ln9sO, !tbaa !2
  %ln9sP = ptrtoint %r8Ve_closure_struct* @r8Ve_closure$def to i64
  store i64 %ln9sP, i64* %R6_Var
  %ln9sQ = add i64 %R1_Arg, 7
  %ln9sR = inttoptr i64 %ln9sQ to i64*
  %ln9sS = load i64, i64* %ln9sR, !tbaa !4
  store i64 %ln9sS, i64* %R5_Var
  %ln9sT = add i64 %R1_Arg, 23
  %ln9sU = inttoptr i64 %ln9sT to i64*
  %ln9sV = load i64, i64* %ln9sU, !tbaa !4
  store i64 %ln9sV, i64* %R4_Var
  %ln9sW = add i64 %R1_Arg, 15
  %ln9sX = inttoptr i64 %ln9sW to i64*
  %ln9sY = load i64, i64* %ln9sX, !tbaa !4
  store i64 %ln9sY, i64* %R3_Var
  %ln9sZ = ptrtoint i8* @base_GHCziFloat_zdfNumFloat_closure to i64
  store i64 %ln9sZ, i64* %R2_Var
  %ln9t1 = ptrtoint %r8Ve_closure_struct* @r8Ve_closure$def to i64
  %ln9t0 = load i64*, i64** %Sp_Var
  %ln9t2 = getelementptr inbounds i64, i64* %ln9t0, i32 -3
  store i64 %ln9t1, i64* %ln9t2, !tbaa !2
  %ln9t4 = ptrtoint %r8Vi_closure_struct* @r8Vi_closure$def to i64
  %ln9t5 = add i64 %ln9t4, 1
  %ln9t3 = load i64*, i64** %Sp_Var
  %ln9t6 = getelementptr inbounds i64, i64* %ln9t3, i32 -2
  store i64 %ln9t5, i64* %ln9t6, !tbaa !2
  %ln9t8 = ptrtoint %r8Vi_closure_struct* @r8Vi_closure$def to i64
  %ln9t9 = add i64 %ln9t8, 1
  %ln9t7 = load i64*, i64** %Sp_Var
  %ln9ta = getelementptr inbounds i64, i64* %ln9t7, i32 -1
  store i64 %ln9t9, i64* %ln9ta, !tbaa !2
  %ln9tb = load i64*, i64** %Sp_Var
  %ln9tc = getelementptr inbounds i64, i64* %ln9tb, i32 -3
  %ln9td = ptrtoint i64* %ln9tc to i64
  %ln9te = inttoptr i64 %ln9td to i64*
  store i64* %ln9te, i64** %Sp_Var
  %ln9tf = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziLevel2_zdwgemv_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tg = load i64*, i64** %Sp_Var
  %ln9th = load i64, i64* %R2_Var
  %ln9ti = load i64, i64* %R3_Var
  %ln9tj = load i64, i64* %R4_Var
  %ln9tk = load i64, i64* %R5_Var
  %ln9tl = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tf( i64* %Base_Arg, i64* %ln9tg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9th, i64 %ln9ti, i64 %ln9tj, i64 %ln9tk, i64 %ln9tl, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.230171 UTC

@c9i2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9i2_info$def to i8*)
define internal ghccc void @c9i2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kq_srt_struct* @u9kq_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9i2_info$def to i64)) to i32),i32 0)}>
{
c9i2:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9tm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9i6_info$def to i64
  %ln9tn = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9tm, i64* %ln9tn, !tbaa !2
  store i64 0, i64* %R2_Var
  %ln9to = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9to( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9tp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.231442 UTC

@c9i6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9i6_info$def to i8*)
define internal ghccc void @c9i6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u9kp_srt_struct* @u9kp_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9i6_info$def to i64)) to i32),i32 0)}>
{
c9i6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9tq = load i64*, i64** %Hp_Var
  %ln9tr = getelementptr inbounds i64, i64* %ln9tq, i32 4
  %ln9ts = ptrtoint i64* %ln9tr to i64
  %ln9tt = inttoptr i64 %ln9ts to i64*
  store i64* %ln9tt, i64** %Hp_Var
  %ln9tu = load i64*, i64** %Hp_Var
  %ln9tv = ptrtoint i64* %ln9tu to i64
  %ln9tw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9tx = bitcast i64* %ln9tw to i64*
  %ln9ty = load i64, i64* %ln9tx, !tbaa !5
  %ln9tz = icmp ugt i64 %ln9tv, %ln9ty
  %ln9tA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9tz, i1 0 )
  br i1 %ln9tA, label %c9k7, label %c9k6
c9k6:
  %ln9tC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8XI_info$def to i64
  %ln9tB = load i64*, i64** %Hp_Var
  %ln9tD = getelementptr inbounds i64, i64* %ln9tB, i32 -3
  store i64 %ln9tC, i64* %ln9tD, !tbaa !3
  %ln9tF = load i64*, i64** %Sp_Var
  %ln9tG = getelementptr inbounds i64, i64* %ln9tF, i32 1
  %ln9tH = bitcast i64* %ln9tG to i64*
  %ln9tI = load i64, i64* %ln9tH, !tbaa !2
  %ln9tE = load i64*, i64** %Hp_Var
  %ln9tJ = getelementptr inbounds i64, i64* %ln9tE, i32 -1
  store i64 %ln9tI, i64* %ln9tJ, !tbaa !3
  %ln9tL = load i64, i64* %R1_Var
  %ln9tK = load i64*, i64** %Hp_Var
  %ln9tM = getelementptr inbounds i64, i64* %ln9tK, i32 0
  store i64 %ln9tL, i64* %ln9tM, !tbaa !3
  %ln9tN = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9tO = add i64 %ln9tN, 2
  store i64 %ln9tO, i64* %R4_Var
  %ln9tP = load i64*, i64** %Hp_Var
  %ln9tQ = getelementptr inbounds i64, i64* %ln9tP, i32 -3
  %ln9tR = ptrtoint i64* %ln9tQ to i64
  store i64 %ln9tR, i64* %R3_Var
  %ln9tS = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9tS, i64* %R2_Var
  %ln9tT = load i64*, i64** %Sp_Var
  %ln9tU = getelementptr inbounds i64, i64* %ln9tT, i32 2
  %ln9tV = ptrtoint i64* %ln9tU to i64
  %ln9tW = inttoptr i64 %ln9tV to i64*
  store i64* %ln9tW, i64** %Sp_Var
  %ln9tX = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tY = load i64*, i64** %Sp_Var
  %ln9tZ = load i64*, i64** %Hp_Var
  %ln9u0 = load i64, i64* %R1_Var
  %ln9u1 = load i64, i64* %R2_Var
  %ln9u2 = load i64, i64* %R3_Var
  %ln9u3 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tX( i64* %Base_Arg, i64* %ln9tY, i64* %ln9tZ, i64 %ln9u0, i64 %ln9u1, i64 %ln9u2, i64 %ln9u3, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9k7:
  %ln9u4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9u4, !tbaa !5
  %ln9u5 = load i64, i64* %R1_Var
  store i64 %ln9u5, i64* %R1_Var
  %ln9u6 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9u7 = load i64*, i64** %Sp_Var
  %ln9u8 = load i64*, i64** %Hp_Var
  %ln9u9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9u6( i64* %Base_Arg, i64* %ln9u7, i64* %ln9u8, i64 %ln9u9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.233023 UTC

%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.233486 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)) to i32),i32 0)}>
{
c9ue:
  %ln9uh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.234272 UTC

%Main_main2_closure_struct = type <{i64, i64, i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.235193 UTC

@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
c9um:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9up = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %ln9uq = add i64 %ln9up, 1
  store i64 %ln9uq, i64* %R2_Var
  %ln9ur = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9us = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ur( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9us, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.23637 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:15:20.237877 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)) to i32),i32 0)}>
{
c9ux:
  %ln9uA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:15:20.238821 UTC

@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@stg_SRT_1_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_closure = external global i8
@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@base_GHCziFloat_zdfNumFloat_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymSq_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymSq_info = external global i8
@integerzmgmp_GHCziIntegerziType_Szh_con_info = external global i8
@ghczmprim_GHCziTypes_Fzh_con_info = external global i8
@ghczmprim_GHCziCString_unpackCStringzh_info = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@base_GHCziShow_zdwshowSignedInt_info = external global i8
@base_GHCziBase_zpzpzuzdszpzp_info = external global i8
@ghczmprim_GHCziCString_unpackAppendCStringzh_info = external global i8
@stg_SRT_2_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpTri_closure = external global i8
@base_GHCziNum_zdfNumInteger_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpTri_info = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@stg_gc_pp = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowTri_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowTri_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpSq_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymUpSq_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowSq_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateSymLowSq_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziInternalziNominalDiffTime_zdfShowNominalDiffTime3_closure = external global i8
@base_DataziFixed_showFixed_closure = external global i8
@integerzmgmp_GHCziIntegerziType_divInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_timesInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_minusInteger_closure = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_closure = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_closure = external global i8
@stg_SRT_3_info = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStrzq_closure = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziLevel2_zdwgemv_closure = external global i8
@stg_upd_frame_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_info = external global i8
@integerzmgmp_GHCziIntegerziType_minusInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_timesInteger_info = external global i8
@base_DataziFixed_zdfHasResolutionE5_closure = external global i8
@integerzmgmp_GHCziIntegerziType_divInteger_info = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_DataziFixed_zdfHasResolutionE12zuzdcresolution_closure = external global i8
@base_DataziFixed_showFixed_info = external global i8
@base_GHCziBase_zpzp_info = external global i8
@base_GHCziIOziHandleziText_hPutStrzq_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziLevel2_zdwgemv_info = external global i8
@stg_gc_unpt_r1 = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8


==================== LLVM Code ====================
2019-04-26 20:15:20.239853 UTC

@llvm.used = appending constant [66 x i8*] [i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%u9kB_srt_struct* @u9kB_srt$def to i8*), i8* bitcast (%u9kA_srt_struct* @u9kA_srt$def to i8*), i8* bitcast (%u9kz_srt_struct* @u9kz_srt$def to i8*), i8* bitcast (%u9ky_srt_struct* @u9ky_srt$def to i8*), i8* bitcast (%u9kx_srt_struct* @u9kx_srt$def to i8*), i8* bitcast (%u9kw_srt_struct* @u9kw_srt$def to i8*), i8* bitcast (%u9kv_srt_struct* @u9kv_srt$def to i8*), i8* bitcast (%u9ku_srt_struct* @u9ku_srt$def to i8*), i8* bitcast (%u9kt_srt_struct* @u9kt_srt$def to i8*), i8* bitcast (%u9ks_srt_struct* @u9ks_srt$def to i8*), i8* bitcast (%u9kr_srt_struct* @u9kr_srt$def to i8*), i8* bitcast (%u9kq_srt_struct* @u9kq_srt$def to i8*), i8* bitcast (%u9kp_srt_struct* @u9kp_srt$def to i8*), i8* bitcast (%u9ko_srt_struct* @u9ko_srt$def to i8*), i8* bitcast (%u9kn_srt_struct* @u9kn_srt$def to i8*), i8* bitcast (%u9km_srt_struct* @u9km_srt$def to i8*), i8* bitcast (%u9kl_srt_struct* @u9kl_srt$def to i8*), i8* bitcast (%u9kk_srt_struct* @u9kk_srt$def to i8*), i8* bitcast (%u9kj_srt_struct* @u9kj_srt$def to i8*), i8* bitcast (%u9ki_srt_struct* @u9ki_srt$def to i8*), i8* bitcast (%u9kh_srt_struct* @u9kh_srt$def to i8*), i8* bitcast (%u9kg_srt_struct* @u9kg_srt$def to i8*), i8* bitcast (%u9kf_srt_struct* @u9kf_srt$def to i8*), i8* bitcast (%u9ke_srt_struct* @u9ke_srt$def to i8*), i8* bitcast (%u9kd_srt_struct* @u9kd_srt$def to i8*), i8* bitcast (%u9kc_srt_struct* @u9kc_srt$def to i8*), i8* bitcast (%u9kb_srt_struct* @u9kb_srt$def to i8*), i8* bitcast (%u9ka_srt_struct* @u9ka_srt$def to i8*), i8* bitcast (%u9k9_srt_struct* @u9k9_srt$def to i8*), i8* bitcast (%r8Vy_closure_struct* @r8Vy_closure$def to i8*), i8* bitcast (%r8Vx_bytes_struct* @r8Vx_bytes$def to i8*), i8* bitcast (%r8Vw_closure_struct* @r8Vw_closure$def to i8*), i8* bitcast (%r8Vv_closure_struct* @r8Vv_closure$def to i8*), i8* bitcast (%r8Vu_closure_struct* @r8Vu_closure$def to i8*), i8* bitcast (%u9aN_srt_struct* @u9aN_srt$def to i8*), i8* bitcast (%r8Vt_closure_struct* @r8Vt_closure$def to i8*), i8* bitcast (%u98N_srt_struct* @u98N_srt$def to i8*), i8* bitcast (%r8Vs_closure_struct* @r8Vs_closure$def to i8*), i8* bitcast (%u96N_srt_struct* @u96N_srt$def to i8*), i8* bitcast (%r8Vr_closure_struct* @r8Vr_closure$def to i8*), i8* bitcast (%u94N_srt_struct* @u94N_srt$def to i8*), i8* bitcast (%r8Vq_closure_struct* @r8Vq_closure$def to i8*), i8* bitcast (%r8Vp_closure_struct* @r8Vp_closure$def to i8*), i8* bitcast (%r8Vo_closure_struct* @r8Vo_closure$def to i8*), i8* bitcast (%r8Vn_closure_struct* @r8Vn_closure$def to i8*), i8* bitcast (%r8Vm_closure_struct* @r8Vm_closure$def to i8*), i8* bitcast (%r8Vl_bytes_struct* @r8Vl_bytes$def to i8*), i8* bitcast (%r8Vk_bytes_struct* @r8Vk_bytes$def to i8*), i8* bitcast (%r8Vj_bytes_struct* @r8Vj_bytes$def to i8*), i8* bitcast (%r8Vi_closure_struct* @r8Vi_closure$def to i8*), i8* bitcast (%r8Vh_closure_struct* @r8Vh_closure$def to i8*), i8* bitcast (%r8Vg_bytes_struct* @r8Vg_bytes$def to i8*), i8* bitcast (%r8Vf_closure_struct* @r8Vf_closure$def to i8*), i8* bitcast (%u8YP_srt_struct* @u8YP_srt$def to i8*), i8* bitcast (%r8Ve_closure_struct* @r8Ve_closure$def to i8*), i8* bitcast (%u8XS_srt_struct* @u8XS_srt$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*), i8* bitcast (%r8Vd_closure_struct* @r8Vd_closure$def to i8*)], section "llvm.metadata"

