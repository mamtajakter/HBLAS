
==================== FINAL INTERFACE ====================
2019-02-22 04:56:31.053131 UTC

interface hblas-0.0.0.0-9O6ACSbliqkLuuWfQkbTjI:HBLAS.Level2 8022
  interface hash: 62f6208b3a50898ead664b614307779f
  ABI hash: f5ae3e7c64d0c66c737fcdf7e3941dcd
  export-list hash: a1b2bf2dea241ed70c77e85de686e71d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e9ea2690bc6fd3381b16d4c5d41136d6
  sig of: Nothing
  used TH splices: False
  where
exports:
  HBLAS.Level2.gemv
  HBLAS.Level2.gemv'
  HBLAS.Level2.ger
  HBLAS.Level2.getLowerTotalMatrix
  HBLAS.Level2.getLowerTotalRow
  HBLAS.Level2.getUpperTotalMatrix
  HBLAS.Level2.getUpperTotalRow
  HBLAS.Level2.getXYTranspose
  HBLAS.Level2.symv
  HBLAS.Level2.symvLower
  HBLAS.Level2.symvUpper
  HBLAS.Level2.syr
  HBLAS.Level2.syr2
  HBLAS.Level2.syr2Lower1
  HBLAS.Level2.syr2Lower2
  HBLAS.Level2.syr2Upper1
  HBLAS.Level2.syr2Upper2
  HBLAS.Level2.syrLower
  HBLAS.Level2.syrUpper
  HBLAS.Level2.trmv
  HBLAS.Level2.trmvHelper
  HBLAS.Level2.trmvLower
  HBLAS.Level2.trmvUpper
  HBLAS.Level2.trsv
  HBLAS.Level2.trsvHelper
  HBLAS.Level2.trsvLower
  HBLAS.Level2.trsvUpper
module dependencies: HBLAS.Level1
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 loop-0.3.0 matrix-0.3.5.0
                      primitive-0.6.3.0 transformers-0.5.2.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  HBLAS.Level1 d46dd99bad0e06cb8418247d1ee74354
  exports: 5228b1a19ddc33f82680d6d3f25cc0a7
  axpy 1c00ea2196b8eaa015a72236bd4dc6e6
  dot b84f7c263f18168ecf0f85f000f429cf
  scal 12452081a94aa3dff7f25ee84df0eff2
import  -/  matrix-0.3.5.0:Data.Matrix 26e07bbf230d6ad3e3caf27287213599
import  -/  vector-0.12.0.1:Data.Vector 05d09acb6f8f89c1df7193ef513155f3
addDependentFile "/Users/mamtajakter/.stack/programs/x86_64-osx/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
c59aa0703cea017d6cb10ac1eeb43ac4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HBLAS.Level2.$trModule3
                   HBLAS.Level2.$trModule1) -}
7dc1e3fd781d2c9b3b1b73a6a457bbbd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.Level2.$trModule2) -}
af2ba50a913a1904d8a38c11ffa243be
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HBLAS.Level2"#) -}
9848c1aa55181a0eb9ea39ae15ed9c53
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.Level2.$trModule4) -}
4788b3a89e41cd3524ce1e41cd12abbd
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hblas-0.0.0.0-9O6ACSbliqkLuuWfQkbTjI"#) -}
404dee6d19e7ad6afe3ce09568a0d88f
  $wgemv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,1*U(U,U,U)><L,U(U,U,U)><L,U><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w3 :: n)
                   (w4 :: n) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                         let {
                           f :: n -> n = GHC.Num.* @ n w w4
                         } in
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ n
                                                 ww2
                                                 (GHC.Prim.+# ww sc1) of ds3 { Unit# ipv5 ->
                                          f ipv5 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds1 { (#,#) ipv5 ipv6 ->
                                  (# ipv5
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv6 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv3
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds1 { (#,#) ipv3 ipv4 ->
                 case w1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ipv1
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv6 ipv7 ->
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ipv1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv7
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ (Data.Vector.Vector n)
                                                 ipv2
                                                 (GHC.Prim.+# ipv sc1) of ds3 { Unit# ipv8 ->
                                          HBLAS.Level1.dot @ n w w2 ipv8 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv7
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds4 { (#,#) ipv8 ipv9 ->
                                  (# ipv8
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv9 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv6
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds2 { (#,#) ipv6 ipv7 ->
                 HBLAS.Level1.axpy @ n w w3 ipv7 ipv4 } } }) -}
83c0d58e1a6834942f96810787fa125b
  $wgemv' ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><S,U><L,U><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Data.Vector.Vector n))
                   (w1 :: Data.Vector.Vector n) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv1
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ (Data.Vector.Vector n)
                                                 ww2
                                                 (GHC.Prim.+# ww sc1) of ds3 { Unit# ipv2 ->
                                          HBLAS.Level1.dot @ n w w1 ipv2 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv1
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                  (# ipv2
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv3 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
d6d209c038fe7c31688c59117ac8a914
  $wger ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U><L,U><L,U><L,U><S,U><L,U><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Data.Vector.Vector n))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# n)
                   (w1 :: Data.Vector.Vector n)
                   (w2 :: n) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww4
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                         let {
                           f :: n -> n = GHC.Num.* @ n w w2
                         } in
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ww4) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ n
                                                 ww5
                                                 (GHC.Prim.+# ww3 sc1) of ds3 { Unit# ipv5 ->
                                          f ipv5 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds1 { (#,#) ipv5 ipv6 ->
                                  (# ipv5
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv6 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv3
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds1 { (#,#) ipv3 ipv4 ->
                 case ipv4 of ww6 { Data.Vector.Vector ww7 ww8 ww9 ->
                 case HBLAS.Level2.$wgetXYTranspose
                        @ n
                        w
                        ww7
                        ww8
                        ww9
                        w1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector (Data.Vector.Vector n) #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Vector (Data.Vector.Vector n) #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ (Data.Vector.Vector n)
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    n#
                                    (Data.Vector.Mutable.uninitialised @ (Data.Vector.Vector n))
                                    s1
                                      `cast`
                                    (Nth:2
                                         (Nth:2
                                              (Trans
                                                   (<GHC.ST.STRep
                                                       GHC.Prim.RealWorld
                                                       (Data.Primitive.Array.MutableArray
                                                          (Control.Monad.Primitive.PrimState
                                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                                          (Data.Vector.Vector n))>_R
                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     (Data.Vector.Vector n)>_R))
                                                   (((GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                     ->_R ((#,#)
                                                             <'GHC.Types.TupleRep '[]>_R
                                                             <'GHC.Types.LiftedRep>_R
                                                             (GHC.Prim.State#
                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                             <Data.Primitive.Array.MutableArray
                                                                (Control.Monad.Primitive.PrimState
                                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                                                (Data.Vector.Vector n)>_R)_R)
                                                    ->_R <GHC.ST.ST
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               (Data.Vector.Vector
                                                                  n))>_R)))) of ds2 { (#,#) ipv6 ipv7 ->
                             letrec {
                               $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> Data.Vector.Vector n
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.Int#
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                 <join 5> {- Arity: 5,
                                             Strictness: <S,U><L,1*U(U,U,U)><S,U><L,U><L,U> -}
                               = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                                   (sc1 :: Data.Vector.Vector n)
                                   (sc2 :: GHC.Prim.Int#)
                                   (sc3 :: GHC.Prim.Int#)
                                   (sc4 :: GHC.Prim.Int#) ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.>=# sc2 ipv1) of wild {
                                   GHC.Types.False
                                   -> case GHC.Prim.writeArray#
                                             @ (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                             @ (Data.Vector.Vector n)
                                             ipv7
                                             sc4
                                             (case sc1 of v1 { Data.Vector.Vector ipv8 ipv9 ipv10 ->
                                              case GHC.Prim.indexArray#
                                                     @ (Data.Vector.Vector n)
                                                     ipv2
                                                     (GHC.Prim.+# ipv sc2) of ds3 { Unit# ipv11 ->
                                              case ipv11 of v3 { Data.Vector.Vector ipv12 ipv13 ipv14 ->
                                              case GHC.Magic.runRW#
                                                     @ ('GHC.Types.TupleRep
                                                          '['GHC.Types.TupleRep '[],
                                                            'GHC.Types.LiftedRep])
                                                     @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          Data.Vector.Vector n #)
                                                     (\ (s2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                      let {
                                                        $j1 :: GHC.Prim.Int#
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     Data.Vector.Vector n #)
                                                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                                                        = \ (n#1 :: GHC.Prim.Int#)[OneShot] ->
                                                          case GHC.Prim.newArray#
                                                                 @ n
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 n#1
                                                                 (Data.Vector.Mutable.uninitialised
                                                                    @ n)
                                                                 s2
                                                                   `cast`
                                                                 (Nth:2
                                                                      (Nth:2
                                                                           (Trans
                                                                                (<GHC.ST.STRep
                                                                                    GHC.Prim.RealWorld
                                                                                    (Data.Primitive.Array.MutableArray
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                       n)>_R
                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R))
                                                                                (((GHC.Prim.State#
                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                  ->_R ((#,#)
                                                                                          <'GHC.Types.TupleRep
                                                                                             '[]>_R
                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                          (GHC.Prim.State#
                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                          <Data.Primitive.Array.MutableArray
                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                (GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld))
                                                                                             n>_R)_R)
                                                                                 ->_R <GHC.ST.ST
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R)))) of ds4 { (#,#) ipv15 ipv16 ->
                                                          letrec {
                                                            $s$wfoldlM'_loop1 :: GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                                 -> n
                                                                                 -> GHC.Prim.Int#
                                                                                 -> GHC.Prim.Int#
                                                                                 -> GHC.Prim.Int#
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       Data.Vector.Vector
                                                                                         n #)
                                                              <join 5> {- Arity: 5,
                                                                          Strictness: <S,U><L,U><S,U><L,U><L,U> -}
                                                            = \ (sc5 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)
                                                                (sc6 :: n)
                                                                (sc7 :: GHC.Prim.Int#)
                                                                (sc8 :: GHC.Prim.Int#)
                                                                (sc9 :: GHC.Prim.Int#) ->
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.>=#
                                                                        sc7
                                                                        ipv13) of wild1 {
                                                                GHC.Types.False
                                                                -> case GHC.Prim.writeArray#
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          @ n
                                                                          ipv16
                                                                          sc9
                                                                          (case GHC.Prim.indexArray#
                                                                                  @ n
                                                                                  ipv14
                                                                                  (GHC.Prim.+#
                                                                                     ipv12
                                                                                     sc7) of ds5 { Unit# ipv17 ->
                                                                           GHC.Num.+
                                                                             @ n
                                                                             w
                                                                             sc6
                                                                             ipv17 })
                                                                          sc5
                                                                            `cast`
                                                                          (Nth:2
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             ()>_R
                                                                                          ->_R Sym (GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <()>_R))
                                                                                         (((GHC.Prim.State#
                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   <()>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R)))) of s'# { DEFAULT ->
                                                                   case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.>=#
                                                                             sc8
                                                                             ipv9) of wild2 {
                                                                     GHC.Types.False
                                                                     -> case GHC.Prim.indexArray#
                                                                               @ n
                                                                               ipv10
                                                                               (GHC.Prim.+#
                                                                                  ipv8
                                                                                  sc8) of ds5 { Unit# ipv17 ->
                                                                        $s$wfoldlM'_loop1
                                                                          s'#
                                                                            `cast`
                                                                          (Nth:2
                                                                               (Nth:3
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (((GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        <()>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R)
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R
                                                                                               ->_R GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <()>_R)))))
                                                                          ipv17
                                                                          (GHC.Prim.+# sc7 1#)
                                                                          (GHC.Prim.+# sc8 1#)
                                                                          (GHC.Prim.+# sc9 1#) }
                                                                     GHC.Types.True
                                                                     -> case GHC.Prim.unsafeFreezeArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               @ n
                                                                               ipv16
                                                                               s'# of ds5 { (#,#) ipv17 ipv18 ->
                                                                        (# ipv17
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.Array
                                                                                                           n)>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R))))),
                                                                           Data.Vector.Vector
                                                                             @ n
                                                                             0#
                                                                             (GHC.Prim.+# sc9 1#)
                                                                             ipv18 #) } } }
                                                                GHC.Types.True
                                                                -> case GHC.Prim.unsafeFreezeArray#
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          @ n
                                                                          ipv16
                                                                          sc5
                                                                            `cast`
                                                                          (Nth:2
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.Array.Array
                                                                                                n)>_R
                                                                                          ->_R Sym (GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <Data.Primitive.Array.Array
                                                                                                           n>_R))
                                                                                         (((GHC.Prim.State#
                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   <Data.Primitive.Array.Array
                                                                                                      n>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.Array.Array
                                                                                                     n)>_R)))) of ds5 { (#,#) ipv17 ipv18 ->
                                                                   (# ipv17
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))))),
                                                                      Data.Vector.Vector
                                                                        @ n
                                                                        0#
                                                                        sc9
                                                                        ipv18 #) } }
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.>=# 0# ipv9) of wild1 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.indexArray#
                                                                      @ n
                                                                      ipv10
                                                                      ipv8 of ds5 { Unit# ipv17 ->
                                                               $s$wfoldlM'_loop1
                                                                 ipv15
                                                                   `cast`
                                                                 (Nth:2
                                                                      (Nth:3
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (((GHC.Prim.State#
                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)))))
                                                                 ipv17
                                                                 0#
                                                                 1#
                                                                 0# }
                                                            GHC.Types.True
                                                            -> case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv16
                                                                      ipv15 of ds5 { (#,#) ipv17 ipv18 ->
                                                               (# ipv17
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    0#
                                                                    ipv18 #) } } }
                                                      } in
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.<=# ipv9 ipv13) of wild2 {
                                                        GHC.Types.False -> $j1 ipv13
                                                        GHC.Types.True
                                                        -> $j1 ipv9 }) of ds4 { (#,#) ipv15 ipv16 ->
                                              ipv16 } } } })
                                             sc
                                               `cast`
                                             (Nth:2
                                                  (Nth:2
                                                       (Trans
                                                            (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <()>_R))
                                                            (((GHC.Prim.State#
                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                      <()>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     GHC.Prim.RealWorld
                                                                     ()>_R)))) of s'# { DEFAULT ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# sc3 ww1) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ (Data.Vector.Vector n)
                                                  ww2
                                                  (GHC.Prim.+# ww sc3) of ds3 { Unit# ipv8 ->
                                           $s$wfoldlM'_loop
                                             s'#
                                               `cast`
                                             (Nth:2
                                                  (Nth:3
                                                       (Nth:2
                                                            (Trans
                                                                 (((GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   ->_R ((#,#)
                                                                           <'GHC.Types.TupleRep
                                                                              '[]>_R
                                                                           <'GHC.Types.LiftedRep>_R
                                                                           (GHC.Prim.State#
                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                           <()>_R)_R)
                                                                  ->_R <GHC.ST.ST
                                                                          GHC.Prim.RealWorld ()>_R)
                                                                 (<GHC.ST.STRep
                                                                     GHC.Prim.RealWorld ()>_R
                                                                  ->_R GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <()>_R)))))
                                             ipv8
                                             (GHC.Prim.+# sc2 1#)
                                             (GHC.Prim.+# sc3 1#)
                                             (GHC.Prim.+# sc4 1#) }
                                        GHC.Types.True
                                        -> case GHC.Prim.unsafeFreezeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ (Data.Vector.Vector n)
                                                  ipv7
                                                  s'# of ds4 { (#,#) ipv8 ipv9 ->
                                           (# ipv8
                                                `cast`
                                              (Nth:2
                                                   (Nth:3
                                                        (Nth:2
                                                             (Trans
                                                                  (((GHC.Prim.State#
                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                    ->_R ((#,#)
                                                                            <'GHC.Types.TupleRep
                                                                               '[]>_R
                                                                            <'GHC.Types.LiftedRep>_R
                                                                            (GHC.Prim.State#
                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                            <Data.Primitive.Array.Array
                                                                               (Data.Vector.Vector
                                                                                  n)>_R)_R)
                                                                   ->_R <GHC.ST.ST
                                                                           GHC.Prim.RealWorld
                                                                           (Data.Primitive.Array.Array
                                                                              (Data.Vector.Vector
                                                                                 n))>_R)
                                                                  (<GHC.ST.STRep
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Primitive.Array.Array
                                                                         (Data.Vector.Vector n))>_R
                                                                   ->_R GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <Data.Primitive.Array.Array
                                                                               (Data.Vector.Vector
                                                                                  n)>_R))))),
                                              Data.Vector.Vector
                                                @ (Data.Vector.Vector n)
                                                0#
                                                (GHC.Prim.+# sc4 1#)
                                                ipv9 #) } } }
                                   GHC.Types.True
                                   -> case GHC.Prim.unsafeFreezeArray#
                                             @ (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                             @ (Data.Vector.Vector n)
                                             ipv7
                                             sc
                                               `cast`
                                             (Nth:2
                                                  (Nth:2
                                                       (Trans
                                                            (<GHC.ST.STRep
                                                                GHC.Prim.RealWorld
                                                                (Data.Primitive.Array.Array
                                                                   (Data.Vector.Vector n))>_R
                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <Data.Primitive.Array.Array
                                                                              (Data.Vector.Vector
                                                                                 n)>_R))
                                                            (((GHC.Prim.State#
                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                      <Data.Primitive.Array.Array
                                                                         (Data.Vector.Vector
                                                                            n)>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     GHC.Prim.RealWorld
                                                                     (Data.Primitive.Array.Array
                                                                        (Data.Vector.Vector
                                                                           n))>_R)))) of ds4 { (#,#) ipv8 ipv9 ->
                                      (# ipv8
                                           `cast`
                                         (Nth:2
                                              (Nth:3
                                                   (Nth:2
                                                        (Trans
                                                             (((GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N))_R
                                                               ->_R ((#,#)
                                                                       <'GHC.Types.TupleRep '[]>_R
                                                                       <'GHC.Types.LiftedRep>_R
                                                                       (GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       <Data.Primitive.Array.Array
                                                                          (Data.Vector.Vector
                                                                             n)>_R)_R)
                                                              ->_R <GHC.ST.ST
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Primitive.Array.Array
                                                                         (Data.Vector.Vector n))>_R)
                                                             (<GHC.ST.STRep
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    (Data.Vector.Vector n))>_R
                                                              ->_R GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          (Data.Vector.Vector
                                                                             n)>_R))))),
                                         Data.Vector.Vector
                                           @ (Data.Vector.Vector n)
                                           0#
                                           sc4
                                           ipv9 #) } }
                             } in
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# 0# ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.indexArray#
                                         @ (Data.Vector.Vector n)
                                         ww2
                                         ww of ds3 { Unit# ipv8 ->
                                  $s$wfoldlM'_loop
                                    ipv6
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     (Data.Vector.Vector n)>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    (Data.Vector.Vector n))>_R)
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               (Data.Vector.Vector n))>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     (Data.Vector.Vector n)>_R)))))
                                    ipv8
                                    0#
                                    1#
                                    0# }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ (Data.Vector.Vector n)
                                         ipv7
                                         ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                                  (# ipv8
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      (Data.Vector.Vector n)>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array
                                                                     (Data.Vector.Vector n))>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array
                                                                (Data.Vector.Vector n))>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      (Data.Vector.Vector
                                                                         n)>_R))))),
                                     Data.Vector.Vector @ (Data.Vector.Vector n) 0# 0# ipv9 #) } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww1 ipv1) of wild2 {
                           GHC.Types.False -> $j ipv1
                           GHC.Types.True -> $j ww1 }) of ds2 { (#,#) ipv6 ipv7 ->
                 ipv7 } } } }) -}
516428bf87d545fd9f302be594de718d
  $wgetLowerTotalMatrix ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(U,U,U)><S,U><S,U>, Inline: [0] -}
b4766ac8d30dc7e899d0d7fa000ff604
  $wgetLowerTotalRow ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 7,
     Strictness: <L,U(U,U,U)><S,U><S,U><S,U><S,U><L,U(U)><S,U>,
     Inline: [0] -}
d02d9f92f7692793ed22336c379c011b
  $wgetUpperTotalMatrix ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(U,U,U)><S,U><S,U>, Inline: [0] -}
8cc889acbddf7d96186a5f0e2efd3ea4
  $wgetUpperTotalRow ::
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 7,
     Strictness: <L,U(U,U,U)><S,U><S,U><S,U><S,U><L,1*U(1*U)><S,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww3 ww4) of wild {
                   GHC.Types.False
                   -> case w1 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case GHC.Magic.runRW#
                                  @ ('GHC.Types.TupleRep
                                       '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                  @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   let {
                                     x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ww1
                                   } in
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x1 1#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# x1 ww1) of wild5 {
                                          GHC.Types.False
                                          -> case GHC.Prim.newArray#
                                                    @ n
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    x1
                                                    (Data.Vector.Mutable.uninitialised @ n)
                                                    s1
                                                      `cast`
                                                    (Nth:2
                                                         (Nth:2
                                                              (Trans
                                                                   (<GHC.ST.STRep
                                                                       GHC.Prim.RealWorld
                                                                       (Data.Primitive.Array.MutableArray
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n)>_R
                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <Data.Primitive.Array.MutableArray
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                     n>_R))
                                                                   (((GHC.Prim.State#
                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                     ->_R ((#,#)
                                                                             <'GHC.Types.TupleRep
                                                                                '[]>_R
                                                                             <'GHC.Types.LiftedRep>_R
                                                                             (GHC.Prim.State#
                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                             <Data.Primitive.Array.MutableArray
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                                n>_R)_R)
                                                                    ->_R <GHC.ST.ST
                                                                            GHC.Prim.RealWorld
                                                                            (Data.Primitive.Array.MutableArray
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                             case GHC.Prim.writeArray#
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    @ n
                                                    ipv1
                                                    0#
                                                    (case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=# ww3 0#) of wild3 {
                                                       GHC.Types.False
                                                       -> case w of v2 { Data.Vector.Vector ipv2 ipv3 ipv4 ->
                                                          case HBLAS.Level2.getUpperTotalRow3
                                                                 @ n
                                                                 ipv3
                                                                 ww3
                                                                 HBLAS.Level2.getUpperTotalRow2
                                                          ret_ty n
                                                          of {} }
                                                       GHC.Types.True
                                                       -> case w of v2 { Data.Vector.Vector ipv2 ipv3 ipv4 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# ww3 ipv3) of wild7 {
                                                            GHC.Types.False
                                                            -> case HBLAS.Level2.getUpperTotalRow3
                                                                      @ n
                                                                      ipv3
                                                                      ww3
                                                                      HBLAS.Level2.getUpperTotalRow2
                                                               ret_ty n
                                                               of {}
                                                            GHC.Types.True
                                                            -> case GHC.Prim.indexArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      (GHC.Prim.+#
                                                                         ipv2
                                                                         ww3) of ds3 { Unit# ipv5 ->
                                                               case ipv5 of ww5 { Data.Vector.Vector ww6 ww7 ww8 ->
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=#
                                                                         wild2
                                                                         0#) of wild8 {
                                                                 GHC.Types.False
                                                                 -> HBLAS.Level2.getUpperTotalRow1
                                                                      @ n
                                                                      ww7
                                                                      wild2
                                                                      HBLAS.Level2.getUpperTotalRow2
                                                                 GHC.Types.True
                                                                 -> case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.<#
                                                                              wild2
                                                                              ww7) of wild9 {
                                                                      GHC.Types.False
                                                                      -> HBLAS.Level2.getUpperTotalRow1
                                                                           @ n
                                                                           ww7
                                                                           wild2
                                                                           HBLAS.Level2.getUpperTotalRow2
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.indexArray#
                                                                                @ n
                                                                                ww8
                                                                                (GHC.Prim.+#
                                                                                   ww6
                                                                                   wild2) of ds1 { Unit# ipv6 ->
                                                                         ipv6 } } } } } } } })
                                                    ipv of s'# { DEFAULT ->
                                             case GHC.Prim.copyArray#
                                                    @ n
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    ww2
                                                    ww
                                                    ipv1
                                                    1#
                                                    ww1
                                                    s'# of s'#1 { DEFAULT ->
                                             case GHC.Prim.unsafeFreezeArray#
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    @ n
                                                    ipv1
                                                    s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                             (# ipv2
                                                  `cast`
                                                (Nth:2
                                                     (Nth:3
                                                          (Nth:2
                                                               (Trans
                                                                    (((GHC.Prim.State#
                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                      ->_R ((#,#)
                                                                              <'GHC.Types.TupleRep
                                                                                 '[]>_R
                                                                              <'GHC.Types.LiftedRep>_R
                                                                              (GHC.Prim.State#
                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                              <Data.Primitive.Array.Array
                                                                                 n>_R)_R)
                                                                     ->_R <GHC.ST.ST
                                                                             GHC.Prim.RealWorld
                                                                             (Data.Primitive.Array.Array
                                                                                n)>_R)
                                                                    (<GHC.ST.STRep
                                                                        GHC.Prim.RealWorld
                                                                        (Data.Primitive.Array.Array
                                                                           n)>_R
                                                                     ->_R GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <Data.Primitive.Array.Array
                                                                                 n>_R))))),
                                                Data.Vector.Vector
                                                  @ n
                                                  0#
                                                  (GHC.Prim.+# 1# ww1)
                                                  ipv3 #) } } } }
                                          GHC.Types.True
                                          -> case Data.Vector.Fusion.Bundle.Size.$wlvl5 x1
                                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.Vector n #)
                                             of {} }
                                     GHC.Types.True
                                     -> case Data.Vector.Fusion.Bundle.Size.$wlvl5 x1
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Vector.Vector n #)
                                        of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                           case ipv2 of ww5 { Data.Vector.Vector ww6 ww7 ww8 ->
                           HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow1
                             @ n
                             ww4
                             (GHC.Prim.+# wild2 1#)
                             (GHC.Prim.-# ww3 1#)
                             ww8
                             ww7
                             ww6
                             w } }
                        0#
                        -> HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow1
                             @ n
                             ww4
                             1#
                             (GHC.Prim.-# ww3 1#)
                             ww2
                             ww1
                             ww
                             w } }
                   GHC.Types.True -> (# ww, ww1, ww2 #) }) -}
64c6dfdd3a24c2cf492c914617ab926a
  $wgetXYTranspose ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)),A,A,A,A)><L,U><S,1*U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
972d829a426e4371d2ab677086f96b92
  $wsymv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> n
    -> GHC.Prim.Char#
    -> Data.Vector.Vector n
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><L,1*U(U,U,U)><S,U><S,U><S,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w3 :: n)
                   (w4 :: n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT -> HBLAS.Level2.$wsymvUpper @ n w w1 w2 ww ww1 ww2 w3 w4
                   'l'# -> HBLAS.Level2.$wsymvLower @ n w w1 w2 ww ww1 ww2 w3 w4 }) -}
9fafb3d21a9e4d2b5e9cc2b6f1e7020c
  $wsymvLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><L,1*U(U,U,U)><L,U><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w3 :: n)
                   (w4 :: n) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                         let {
                           f :: n -> n = GHC.Num.* @ n w w4
                         } in
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ n
                                                 ww2
                                                 (GHC.Prim.+# ww sc1) of ds3 { Unit# ipv5 ->
                                          f ipv5 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds1 { (#,#) ipv5 ipv6 ->
                                  (# ipv5
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv6 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv3
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds1 { (#,#) ipv3 ipv4 ->
                 case w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case HBLAS.Level2.$wgetLowerTotalMatrix
                        @ n
                        w1
                        0#
                        ipv1 of v1 { Data.Vector.Vector ipv6 ipv7 ipv8 ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ipv7
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv9 ipv10 ->
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ipv7) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv10
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ (Data.Vector.Vector n)
                                                 ipv8
                                                 (GHC.Prim.+# ipv6 sc1) of ds3 { Unit# ipv11 ->
                                          case ipv11 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                                          HBLAS.Level1.$wdot @ n w ipv ipv1 ipv2 ww5 ww6 ww7 } })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv10
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds4 { (#,#) ipv11 ipv12 ->
                                  (# ipv11
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv12 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv9
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds2 { (#,#) ipv9 ipv10 ->
                 HBLAS.Level1.axpy @ n w w3 ipv10 ipv4 } } } }) -}
2a857e0fdc5b82315a939ef3e55a225a
  $wsymvUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><L,1*U(U,U,U)><L,U><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w3 :: n)
                   (w4 :: n) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                         let {
                           f :: n -> n = GHC.Num.* @ n w w4
                         } in
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ n
                                                 ww2
                                                 (GHC.Prim.+# ww sc1) of ds3 { Unit# ipv5 ->
                                          f ipv5 })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv4
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds1 { (#,#) ipv5 ipv6 ->
                                  (# ipv5
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv6 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv3
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds1 { (#,#) ipv3 ipv4 ->
                 case w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case HBLAS.Level2.$wgetUpperTotalMatrix
                        @ n
                        w1
                        0#
                        ipv1 of v1 { Data.Vector.Vector ipv6 ipv7 ipv8 ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ n
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ipv7
                                (Data.Vector.Mutable.uninitialised @ n)
                                s1
                                  `cast`
                                (Nth:2
                                     (Nth:2
                                          (Trans
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R Sym (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <Data.Primitive.Array.MutableArray
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                                 n>_R))
                                               (((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)))) of ds2 { (#,#) ipv9 ipv10 ->
                         letrec {
                           $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Int#
                                               -> GHC.Prim.Int#
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Vector n #)
                             <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                           = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                               (sc1 :: GHC.Prim.Int#)
                               (sc2 :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc1 ipv7) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv10
                                         sc2
                                         (case GHC.Prim.indexArray#
                                                 @ (Data.Vector.Vector n)
                                                 ipv8
                                                 (GHC.Prim.+# ipv6 sc1) of ds3 { Unit# ipv11 ->
                                          case ipv11 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                                          HBLAS.Level1.$wdot @ n w ipv ipv1 ipv2 ww5 ww6 ww7 } })
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 ()>_R)))) of s'# { DEFAULT ->
                                  $s$wfoldlM'_loop
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              (Nth:2
                                                   (Trans
                                                        (((GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                  <()>_R)_R)
                                                         ->_R <GHC.ST.ST GHC.Prim.RealWorld ()>_R)
                                                        (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                         ->_R GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N <()>_R)))))
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Prim.+# sc2 1#) }
                               GHC.Types.True
                               -> case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ n
                                         ipv10
                                         sc
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.Array n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.Array
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.Array
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.Array
                                                                    n)>_R)))) of ds4 { (#,#) ipv11 ipv12 ->
                                  (# ipv11
                                       `cast`
                                     (Nth:2
                                          (Nth:3
                                               (Nth:2
                                                    (Trans
                                                         (((GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                   <GHC.Prim.RealWorld>_N))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R)_R)
                                                          ->_R <GHC.ST.ST
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R)
                                                         (<GHC.ST.STRep
                                                             GHC.Prim.RealWorld
                                                             (Data.Primitive.Array.Array n)>_R
                                                          ->_R GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <Data.Primitive.Array.Array
                                                                      n>_R))))),
                                     Data.Vector.Vector @ n 0# sc2 ipv12 #) } }
                         } in
                         $s$wfoldlM'_loop
                           ipv9
                             `cast`
                           (Nth:2
                                (Nth:3
                                     (Nth:2
                                          (Trans
                                               (((GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N))_R
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)_R)
                                                ->_R <GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Primitive.Array.MutableArray
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           n)>_R)
                                               (<GHC.ST.STRep
                                                   GHC.Prim.RealWorld
                                                   (Data.Primitive.Array.MutableArray
                                                      (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                      n)>_R
                                                ->_R GHC.ST.N:ST[0]
                                                         <GHC.Prim.RealWorld>_N
                                                         <Data.Primitive.Array.MutableArray
                                                            (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                            n>_R)))))
                           0#
                           0# }) of ds2 { (#,#) ipv9 ipv10 ->
                 HBLAS.Level1.axpy @ n w w3 ipv10 ipv4 } } } }) -}
3e2861cee3374a51c5fa7c314a73d879
  $wsyr ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> GHC.Prim.Char#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Data.Vector.Vector n) #)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (w2 :: n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT
                   -> case HBLAS.Level2.$wsyrUpper
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } }
                   'l'#
                   -> case HBLAS.Level2.$wsyrLower
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } } }) -}
3e08878f9e5ca86771e4664a7ab971da
  $wsyr2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> GHC.Prim.Char#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Data.Vector.Vector n) #)
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><S,U><S,U><S,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# n)
                   (w2 :: n)
                   (ww6 :: GHC.Prim.Char#) ->
                 case ww6 of wild {
                   DEFAULT
                   -> case HBLAS.Level2.$wsyr2Upper1
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } }
                   'l'#
                   -> case HBLAS.Level2.$wsyr2Lower1
                             @ n
                             w
                             w1
                             ww
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             w2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      let {
                        x :: GHC.Prim.Int# = GHC.Prim.-# ipv1 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False
                        -> case HBLAS.Level2.syr1 @ n ipv1 x
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Array# (Data.Vector.Vector n) #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x ipv1) of wild5 {
                             GHC.Types.False
                             -> case HBLAS.Level2.syr1 @ n ipv1 x
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                          GHC.Prim.Array# (Data.Vector.Vector n) #)
                                of {}
                             GHC.Types.True -> (# ipv, x, ipv2 #) } } } }) -}
2ad31e4f9ce1167f4765cee16ed6237e
  $wsyr2Lower1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
20e8b7f1f7fff3429efa97329edc6d8c
  $wsyr2Lower2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><L,U(U,U,U)><L,U>,
     Inline: [0] -}
9b4bbe6d90955042c4a1034e1c417453
  $wsyr2Upper1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 9,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
56604bbefedbe55bcdc58584a0588392
  $wsyr2Upper2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><L,U(U,U,U)><L,U>,
     Inline: [0] -}
09a9d0d590be0138423e4b9ea528a194
  $wsyrLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
6ad8d576ce910909158487d608e5d386
  $wsyrUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
7379e88cbd3a33799db02cf27ca710c3
  $wtrmv ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Char#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><L,U><S,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Real.Fractional n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              let {
                                $j :: GHC.Prim.Int#
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Vector n #)
                                  <join 1> {- Arity: 1, Strictness: <S,U> -}
                                = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                  case GHC.Prim.newArray#
                                         @ n
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         n#
                                         (Data.Vector.Mutable.uninitialised @ n)
                                         s1
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.MutableArray
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                  case n# of wild1 {
                                    DEFAULT
                                    -> case GHC.Prim.writeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              0#
                                              (GHC.Num.fromInteger
                                                 @ n
                                                 (GHC.Real.$p1Fractional @ n w)
                                                 HBLAS.Level2.trmv1)
                                              ipv of s'# { DEFAULT ->
                                       letrec {
                                         $wdo_set :: GHC.Prim.Int#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           Data.Vector.Vector n #)
                                           <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                       Inline: [0] -}
                                         = \ (ww4 :: GHC.Prim.Int#)
                                             (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<#
                                                     (GHC.Prim.*# 2# ww4)
                                                     wild1) of wild2 {
                                             GHC.Types.False
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       (GHC.Prim.-# wild1 ww4)
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                case GHC.Prim.unsafeFreezeArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                (# ipv2
                                                     `cast`
                                                   (Nth:2
                                                        (Nth:3
                                                             (Nth:2
                                                                  (Trans
                                                                       (((GHC.Prim.State#
                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                         ->_R ((#,#)
                                                                                 <'GHC.Types.TupleRep
                                                                                    '[]>_R
                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                 (GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R)_R)
                                                                        ->_R <GHC.ST.ST
                                                                                GHC.Prim.RealWorld
                                                                                (Data.Primitive.Array.Array
                                                                                   n)>_R)
                                                                       (<GHC.ST.STRep
                                                                           GHC.Prim.RealWorld
                                                                           (Data.Primitive.Array.Array
                                                                              n)>_R
                                                                        ->_R GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R))))),
                                                   Data.Vector.Vector @ n 0# wild1 ipv3 #) } }
                                             GHC.Types.True
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       ww4
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                $wdo_set
                                                  (GHC.Prim.*# 2# ww4)
                                                  s'#1
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <()>_R))))) } }
                                       } in
                                       $wdo_set
                                         1#
                                         s'#
                                           `cast`
                                         (Nth:2
                                              (Nth:3
                                                   (Nth:2
                                                        (Trans
                                                             (((GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N))_R
                                                               ->_R ((#,#)
                                                                       <'GHC.Types.TupleRep '[]>_R
                                                                       <'GHC.Types.LiftedRep>_R
                                                                       (GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       <()>_R)_R)
                                                              ->_R <GHC.ST.ST
                                                                      GHC.Prim.RealWorld ()>_R)
                                                             (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                              ->_R GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))))) }
                                    0#
                                    -> case GHC.Prim.unsafeFreezeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              ipv of ds1 { (#,#) ipv2 ipv3 ->
                                       (# ipv2
                                            `cast`
                                          (Nth:2
                                               (Nth:3
                                                    (Nth:2
                                                         (Trans
                                                              (((GHC.Prim.State#
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                ->_R ((#,#)
                                                                        <'GHC.Types.TupleRep '[]>_R
                                                                        <'GHC.Types.LiftedRep>_R
                                                                        (GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R)_R)
                                                               ->_R <GHC.ST.ST
                                                                       GHC.Prim.RealWorld
                                                                       (Data.Primitive.Array.Array
                                                                          n)>_R)
                                                              (<GHC.ST.STRep
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R
                                                               ->_R GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R))))),
                                          Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww1 0#) of wild2 {
                                GHC.Types.False -> $j ww1
                                GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                      HBLAS.Level2.trmv_$s$wtrmvUpper
                        @ n
                        ww1
                        0#
                        ww
                        ww1
                        ww2
                        ww7
                        ww6
                        ww5
                        w1
                        w } }
                   'l'#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector n #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              let {
                                $j :: GHC.Prim.Int#
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Vector n #)
                                  <join 1> {- Arity: 1, Strictness: <S,U> -}
                                = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                  case GHC.Prim.newArray#
                                         @ n
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         n#
                                         (Data.Vector.Mutable.uninitialised @ n)
                                         s1
                                           `cast`
                                         (Nth:2
                                              (Nth:2
                                                   (Trans
                                                        (<GHC.ST.STRep
                                                            GHC.Prim.RealWorld
                                                            (Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               n)>_R
                                                         ->_R Sym (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Primitive.Array.MutableArray
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R))
                                                        (((GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                          ->_R ((#,#)
                                                                  <'GHC.Types.TupleRep '[]>_R
                                                                  <'GHC.Types.LiftedRep>_R
                                                                  (GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  <Data.Primitive.Array.MutableArray
                                                                     (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                     n>_R)_R)
                                                         ->_R <GHC.ST.ST
                                                                 GHC.Prim.RealWorld
                                                                 (Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                  case n# of wild1 {
                                    DEFAULT
                                    -> case GHC.Prim.writeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              0#
                                              (GHC.Num.fromInteger
                                                 @ n
                                                 (GHC.Real.$p1Fractional @ n w)
                                                 HBLAS.Level2.trmv1)
                                              ipv of s'# { DEFAULT ->
                                       letrec {
                                         $wdo_set :: GHC.Prim.Int#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           Data.Vector.Vector n #)
                                           <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                       Inline: [0] -}
                                         = \ (ww4 :: GHC.Prim.Int#)
                                             (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<#
                                                     (GHC.Prim.*# 2# ww4)
                                                     wild1) of wild2 {
                                             GHC.Types.False
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       (GHC.Prim.-# wild1 ww4)
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                case GHC.Prim.unsafeFreezeArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                (# ipv2
                                                     `cast`
                                                   (Nth:2
                                                        (Nth:3
                                                             (Nth:2
                                                                  (Trans
                                                                       (((GHC.Prim.State#
                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                         ->_R ((#,#)
                                                                                 <'GHC.Types.TupleRep
                                                                                    '[]>_R
                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                 (GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R)_R)
                                                                        ->_R <GHC.ST.ST
                                                                                GHC.Prim.RealWorld
                                                                                (Data.Primitive.Array.Array
                                                                                   n)>_R)
                                                                       (<GHC.ST.STRep
                                                                           GHC.Prim.RealWorld
                                                                           (Data.Primitive.Array.Array
                                                                              n)>_R
                                                                        ->_R GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <Data.Primitive.Array.Array
                                                                                    n>_R))))),
                                                   Data.Vector.Vector @ n 0# wild1 ipv3 #) } }
                                             GHC.Types.True
                                             -> case GHC.Prim.copyMutableArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       @ n
                                                       ipv1
                                                       0#
                                                       ipv1
                                                       ww4
                                                       ww4
                                                       w2
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:2
                                                                 (Trans
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R))
                                                                      (((GHC.Prim.State#
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)))) of s'#1 { DEFAULT ->
                                                $wdo_set
                                                  (GHC.Prim.*# 2# ww4)
                                                  s'#1
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <()>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               ()>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld ()>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <()>_R))))) } }
                                       } in
                                       $wdo_set
                                         1#
                                         s'#
                                           `cast`
                                         (Nth:2
                                              (Nth:3
                                                   (Nth:2
                                                        (Trans
                                                             (((GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N))_R
                                                               ->_R ((#,#)
                                                                       <'GHC.Types.TupleRep '[]>_R
                                                                       <'GHC.Types.LiftedRep>_R
                                                                       (GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       <()>_R)_R)
                                                              ->_R <GHC.ST.ST
                                                                      GHC.Prim.RealWorld ()>_R)
                                                             (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                              ->_R GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <()>_R))))) }
                                    0#
                                    -> case GHC.Prim.unsafeFreezeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ n
                                              ipv1
                                              ipv of ds1 { (#,#) ipv2 ipv3 ->
                                       (# ipv2
                                            `cast`
                                          (Nth:2
                                               (Nth:3
                                                    (Nth:2
                                                         (Trans
                                                              (((GHC.Prim.State#
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                ->_R ((#,#)
                                                                        <'GHC.Types.TupleRep '[]>_R
                                                                        <'GHC.Types.LiftedRep>_R
                                                                        (GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R)_R)
                                                               ->_R <GHC.ST.ST
                                                                       GHC.Prim.RealWorld
                                                                       (Data.Primitive.Array.Array
                                                                          n)>_R)
                                                              (<GHC.ST.STRep
                                                                  GHC.Prim.RealWorld
                                                                  (Data.Primitive.Array.Array n)>_R
                                                               ->_R GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Primitive.Array.Array
                                                                           n>_R))))),
                                          Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww1 0#) of wild2 {
                                GHC.Types.False -> $j ww1
                                GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                      HBLAS.Level2.trmv_$s$wtrmvLower
                        @ n
                        ww1
                        0#
                        ww
                        ww1
                        ww2
                        ww7
                        ww6
                        ww5
                        w1
                        w } } }) -}
98c22038de9d00737aa7eae902b35a78
  $wtrmvHelper ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> n
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><L,U><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Num.Num n)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# n) ->
                 letrec {
                   $s$wfoldlM'_loop :: GHC.Prim.Int# -> GHC.Prim.Int# -> n -> n
                     <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,1*U> -}
                   = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) (sc2 :: n) ->
                     case sc2 of z2 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# sc1 ww1) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ n
                                 ww2
                                 (GHC.Prim.+# ww sc1) of ds3 { Unit# ipv ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# sc ww4) of wild1 {
                            GHC.Types.False
                            -> $s$wfoldlM'_loop
                                 (GHC.Prim.+# sc 1#)
                                 (GHC.Prim.+# sc1 1#)
                                 (GHC.Num.+
                                    @ n
                                    w
                                    z2
                                    (case GHC.Prim.indexArray#
                                            @ n
                                            ww5
                                            (GHC.Prim.+# ww3 sc) of ds1 { Unit# ipv1 ->
                                     GHC.Num.* @ n w ipv ipv1 }))
                            GHC.Types.True -> z2 } }
                       GHC.Types.True -> z2 } }
                 } in
                 $s$wfoldlM'_loop
                   0#
                   0#
                   (GHC.Num.fromInteger @ n w HBLAS.Level2.trmv1)) -}
f483adae96f5161c584aa5c7707d0ce6
  $wtrmvLower ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 8,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
38e5b355966d9536091d557073308fe8
  $wtrmvUpper ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 8,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S,U><S,U><S,U><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
538f4d5e641317de227fa19749a8373c
  $wtrsv ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Char#
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n
                   (w :: GHC.Real.Fractional n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# n)
                   (ww3 :: GHC.Prim.Char#) ->
                 case ww3 of wild {
                   DEFAULT
                   -> case HBLAS.Level2.trsv_$s$wtrsvUpper
                             @ n
                             -1#
                             (GHC.Prim.-# ww1 1#)
                             ww
                             ww1
                             ww2
                             (case GHC.Magic.runRW#
                                     @ ('GHC.Types.TupleRep
                                          '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                     @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.Vector.Vector n #)
                                     (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      let {
                                        $j :: GHC.Prim.Int#
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Vector.Vector n #)
                                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                                        = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                          case GHC.Prim.newArray#
                                                 @ n
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 n#
                                                 (Data.Vector.Mutable.uninitialised @ n)
                                                 s1
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:2
                                                           (Trans
                                                                (<GHC.ST.STRep
                                                                    GHC.Prim.RealWorld
                                                                    (Data.Primitive.Array.MutableArray
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n)>_R
                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <Data.Primitive.Array.MutableArray
                                                                                  (Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        GHC.Prim.RealWorld))
                                                                                  n>_R))
                                                                (((GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          (GHC.Prim.State#
                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                          <Data.Primitive.Array.MutableArray
                                                                             (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                             n>_R)_R)
                                                                 ->_R <GHC.ST.ST
                                                                         GHC.Prim.RealWorld
                                                                         (Data.Primitive.Array.MutableArray
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                          case n# of wild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      0#
                                                      (GHC.Num.fromInteger
                                                         @ n
                                                         (GHC.Real.$p1Fractional @ n w)
                                                         HBLAS.Level2.trmv1)
                                                      ipv of s'# { DEFAULT ->
                                               letrec {
                                                 $wdo_set :: GHC.Prim.Int#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   Data.Vector.Vector n #)
                                                   <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                               Inline: [0] -}
                                                 = \ (ww4 :: GHC.Prim.Int#)
                                                     (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<#
                                                             (GHC.Prim.*# 2# ww4)
                                                             wild1) of wild2 {
                                                     GHC.Types.False
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               (GHC.Prim.-# wild1 ww4)
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        case GHC.Prim.unsafeFreezeArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                        (# ipv2
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:3
                                                                     (Nth:2
                                                                          (Trans
                                                                               (((GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         (GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R)_R)
                                                                                ->_R <GHC.ST.ST
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           n)>_R)
                                                                               (<GHC.ST.STRep
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.Array
                                                                                      n)>_R
                                                                                ->_R GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R))))),
                                                           Data.Vector.Vector
                                                             @ n
                                                             0#
                                                             wild1
                                                             ipv3 #) } }
                                                     GHC.Types.True
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               ww4
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        $wdo_set
                                                          (GHC.Prim.*# 2# ww4)
                                                          s'#1
                                                            `cast`
                                                          (Nth:2
                                                               (Nth:3
                                                                    (Nth:2
                                                                         (Trans
                                                                              (((GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R))))) } }
                                               } in
                                               $wdo_set
                                                 1#
                                                 s'#
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:3
                                                           (Nth:2
                                                                (Trans
                                                                     (((GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               (GHC.Prim.State#
                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                               <()>_R)_R)
                                                                      ->_R <GHC.ST.ST
                                                                              GHC.Prim.RealWorld
                                                                              ()>_R)
                                                                     (<GHC.ST.STRep
                                                                         GHC.Prim.RealWorld ()>_R
                                                                      ->_R GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <()>_R))))) }
                                            0#
                                            -> case GHC.Prim.unsafeFreezeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      ipv of ds1 { (#,#) ipv2 ipv3 ->
                                               (# ipv2
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               (Data.Primitive.Array.Array
                                                                                  n)>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld
                                                                          (Data.Primitive.Array.Array
                                                                             n)>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R))))),
                                                  Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<=# ww1 0#) of wild2 {
                                        GHC.Types.False -> $j ww1
                                        GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                              ipv2 })
                             w1
                             w of ww4 { (#,#) ww5 ww6 ->
                      ww5 }
                   'l'#
                   -> case HBLAS.Level2.trsv_$s$wtrsvLower
                             @ n
                             ww1
                             0#
                             ww
                             ww1
                             ww2
                             (case GHC.Magic.runRW#
                                     @ ('GHC.Types.TupleRep
                                          '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                     @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.Vector.Vector n #)
                                     (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      let {
                                        $j :: GHC.Prim.Int#
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Vector.Vector n #)
                                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                                        = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                          case GHC.Prim.newArray#
                                                 @ n
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 n#
                                                 (Data.Vector.Mutable.uninitialised @ n)
                                                 s1
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:2
                                                           (Trans
                                                                (<GHC.ST.STRep
                                                                    GHC.Prim.RealWorld
                                                                    (Data.Primitive.Array.MutableArray
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n)>_R
                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <Data.Primitive.Array.MutableArray
                                                                                  (Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        GHC.Prim.RealWorld))
                                                                                  n>_R))
                                                                (((GHC.Prim.State#
                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          (GHC.Prim.State#
                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                          <Data.Primitive.Array.MutableArray
                                                                             (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                             n>_R)_R)
                                                                 ->_R <GHC.ST.ST
                                                                         GHC.Prim.RealWorld
                                                                         (Data.Primitive.Array.MutableArray
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n)>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                          case n# of wild1 {
                                            DEFAULT
                                            -> case GHC.Prim.writeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      0#
                                                      (GHC.Num.fromInteger
                                                         @ n
                                                         (GHC.Real.$p1Fractional @ n w)
                                                         HBLAS.Level2.trmv1)
                                                      ipv of s'# { DEFAULT ->
                                               letrec {
                                                 $wdo_set :: GHC.Prim.Int#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   Data.Vector.Vector n #)
                                                   <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                               Inline: [0] -}
                                                 = \ (ww4 :: GHC.Prim.Int#)
                                                     (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<#
                                                             (GHC.Prim.*# 2# ww4)
                                                             wild1) of wild2 {
                                                     GHC.Types.False
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               (GHC.Prim.-# wild1 ww4)
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        case GHC.Prim.unsafeFreezeArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                                        (# ipv2
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:3
                                                                     (Nth:2
                                                                          (Trans
                                                                               (((GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         (GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R)_R)
                                                                                ->_R <GHC.ST.ST
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           n)>_R)
                                                                               (<GHC.ST.STRep
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.Array
                                                                                      n)>_R
                                                                                ->_R GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.Array
                                                                                            n>_R))))),
                                                           Data.Vector.Vector
                                                             @ n
                                                             0#
                                                             wild1
                                                             ipv3 #) } }
                                                     GHC.Types.True
                                                     -> case GHC.Prim.copyMutableArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ n
                                                               ipv1
                                                               0#
                                                               ipv1
                                                               ww4
                                                               ww4
                                                               w2
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:2
                                                                         (Trans
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <()>_R))
                                                                              (((GHC.Prim.State#
                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)))) of s'#1 { DEFAULT ->
                                                        $wdo_set
                                                          (GHC.Prim.*# 2# ww4)
                                                          s'#1
                                                            `cast`
                                                          (Nth:2
                                                               (Nth:3
                                                                    (Nth:2
                                                                         (Trans
                                                                              (((GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                ->_R ((#,#)
                                                                                        <'GHC.Types.TupleRep
                                                                                           '[]>_R
                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                        (GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        <()>_R)_R)
                                                                               ->_R <GHC.ST.ST
                                                                                       GHC.Prim.RealWorld
                                                                                       ()>_R)
                                                                              (<GHC.ST.STRep
                                                                                  GHC.Prim.RealWorld
                                                                                  ()>_R
                                                                               ->_R GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R))))) } }
                                               } in
                                               $wdo_set
                                                 1#
                                                 s'#
                                                   `cast`
                                                 (Nth:2
                                                      (Nth:3
                                                           (Nth:2
                                                                (Trans
                                                                     (((GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               (GHC.Prim.State#
                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                               <()>_R)_R)
                                                                      ->_R <GHC.ST.ST
                                                                              GHC.Prim.RealWorld
                                                                              ()>_R)
                                                                     (<GHC.ST.STRep
                                                                         GHC.Prim.RealWorld ()>_R
                                                                      ->_R GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <()>_R))))) }
                                            0#
                                            -> case GHC.Prim.unsafeFreezeArray#
                                                      @ (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                      @ n
                                                      ipv1
                                                      ipv of ds1 { (#,#) ipv2 ipv3 ->
                                               (# ipv2
                                                    `cast`
                                                  (Nth:2
                                                       (Nth:3
                                                            (Nth:2
                                                                 (Trans
                                                                      (((GHC.Prim.State#
                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                        ->_R ((#,#)
                                                                                <'GHC.Types.TupleRep
                                                                                   '[]>_R
                                                                                <'GHC.Types.LiftedRep>_R
                                                                                (GHC.Prim.State#
                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R)_R)
                                                                       ->_R <GHC.ST.ST
                                                                               GHC.Prim.RealWorld
                                                                               (Data.Primitive.Array.Array
                                                                                  n)>_R)
                                                                      (<GHC.ST.STRep
                                                                          GHC.Prim.RealWorld
                                                                          (Data.Primitive.Array.Array
                                                                             n)>_R
                                                                       ->_R GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <Data.Primitive.Array.Array
                                                                                   n>_R))))),
                                                  Data.Vector.Vector @ n 0# 0# ipv3 #) } } }
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<=# ww1 0#) of wild2 {
                                        GHC.Types.False -> $j ww1
                                        GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                              ipv2 })
                             w1
                             w of ww4 { (#,#) ww5 ww6 ->
                      ww5 } }) -}
3b040f8c06a78b246d8e9b298fcfaf13
  $wtrsvLower ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
2ec33d021c26cb040123ccc54f05fbcc
  $wtrsvUpper ::
    GHC.Real.Fractional n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S,U><S,U>,
     Inline: [0] -}
3ece9fe3f8e972a60dffadf259935899
  gemv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,1*U(U,U,U)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wgemv @ n w w1 w2 ww1 ww2 ww3 w4 w5 }) -}
899ca020865ce22460e25d3319d3bed1
  gemv' ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n -> Data.Vector.Vector n
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><S(SSS),1*U(U,U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wgemv' @ n w ww1 ww2 ww3 w2 }) -}
96cac811cd322c9bb26f9170520158dd
  ger ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wger @ n w ww1 ww2 ww3 ww5 ww6 ww7 w3 w4 } }) -}
49669a3a9d3a057ee3f244d42bfd290c
  ger_$s$wgetXYTranspose ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Num.Num n => Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U><L,U(A,A,C(C(U)),A,A,A,A)> -}
87775ef9d8d8be7c04d0d63d129b634b
  getLowerTotalMatrix ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,A><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wgetLowerTotalMatrix @ n w1 ww1 ww3 } }) -}
043c100e3f94f2789f3660fdd975274c
  getLowerTotalRow ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,A><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(U)><L,U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Types.Int) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w5 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wgetLowerTotalRow
                        @ n
                        w1
                        ww1
                        ww2
                        ww3
                        ww5
                        w4
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
ed3a59890c24dd325aef7a4be60d3aeb
  getLowerTotalRow_$s$wgetLowerTotalRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 9,
     Strictness: <S,U><L,U><S,U><S,U><S,U><S,U><L,U><L,U><L,U> -}
a47d009a1f031a61f98cc95cb0e756be
  getUpperTotalMatrix ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,A><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wgetUpperTotalMatrix @ n w1 ww1 ww3 } }) -}
bf75c8b30e463a875feab971917f7c93
  getUpperTotalRow ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,A><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(U)><L,1*U(1*U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Types.Int) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w5 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wgetUpperTotalRow
                        @ n
                        w1
                        ww1
                        ww2
                        ww3
                        ww5
                        w4
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
343458321b026f8cbd3ddb2160fc9662
  getUpperTotalRow1 ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Addr# -> n
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
58bbe1ad1563bace0b42067680f25ae7
  getUpperTotalRow2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("./Data/Vector/Generic.hs"#) -}
0214533ccfe056c8b4a474dabe2fd5e4
  getUpperTotalRow3 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Addr# -> Data.Vector.Vector n
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
6818cf3a305e131d2424ae672124a5b9
  getUpperTotalRow_$s$wgetUpperTotalRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector n)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 9,
     Strictness: <S,U><L,1*U><S,U><S,U><S,U><S,U><L,U><L,U><L,U> -}
40fef49adc4567cd169621495010b330
  getUpperTotalRow_$s$wgetUpperTotalRow1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 7,
     Strictness: <S,U><L,1*U><S,U><S,U><S,U><S,U><L,U(U,U,U)> -}
89bc44dd7e626ecfaaac5cd0edb4d311
  getXYTranspose ::
    GHC.Num.Num n =>
    Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C(U)),A,A,A,A)><S(SSS),1*U(U,1*U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector n)
                   (w2 :: Data.Vector.Vector n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wgetXYTranspose @ n w ww1 ww2 ww3 w2 }) -}
f8d1fe24732d2aaf0d1f0b5041ace86c
  symv ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><L,1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U><L,U><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n)
                   (w6 :: GHC.Types.Char) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w6 of ww4 { GHC.Types.C# ww5 ->
                 HBLAS.Level2.$wsymv @ n w w1 w2 ww1 ww2 ww3 w4 w5 ww5 } }) -}
4a3f6c92d991176fd115347e346835ea
  symvLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><L,1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsymvLower @ n w w1 w2 ww1 ww2 ww3 w4 w5 }) -}
6a5b08370cbab4fed65bbb206050b24b
  symvUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> n
    -> Data.Vector.Vector n
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,C(U))><L,U(U,U,U)><L,1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: n) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsymvUpper @ n w w1 w2 ww1 ww2 ww3 w4 w5 }) -}
0a7adab2b303220213c658ebd744733b
  syr ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U><S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n)
                   (w4 :: GHC.Types.Char) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w4 of ww4 { GHC.Types.C# ww5 ->
                 case HBLAS.Level2.$wsyr
                        @ n
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        w3
                        ww5 of ww6 { (#,,#) ww7 ww8 ww9 ->
                 Data.Vector.Vector @ (Data.Vector.Vector n) ww7 ww8 ww9 } } }) -}
665e472489823bc34ed27ebe6c92c678
  syr1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
dc96da8085fc57a9a111e90299b8e33f
  syr2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U><S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n)
                   (w5 :: GHC.Types.Char) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 case w5 of ww8 { GHC.Types.C# ww9 ->
                 case HBLAS.Level2.$wsyr2
                        @ n
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        w4
                        ww9 of ww10 { (#,,#) ww11 ww12 ww13 ->
                 Data.Vector.Vector
                   @ (Data.Vector.Vector n)
                   ww11
                   ww12
                   ww13 } } } }) -}
3805bdefc254299e1ae3711b52e74275
  syr2Lower1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wsyr2Lower1
                   @ n
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7
                   w4 } }) -}
ec08af7ab33c56f7a42aa44b136e09ed
  syr2Lower2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyr2Lower2 @ n w w1 ww1 ww2 ww3 w3 w4 }) -}
f708dbfcdf2f1206152ae61077469ca1
  syr2Upper1 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wsyr2Upper1
                   @ n
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7
                   w4 } }) -}
87f3165aefd0b1b2cc36a7244776f229
  syr2Upper2 ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyr2Upper2 @ n w w1 ww1 ww2 ww3 w3 w4 }) -}
1655b79eaa0caf52be98682cfed2f103
  syrLower ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyrLower @ n w w1 ww1 ww2 ww3 w3 }) -}
667b95e35061cba91bdf0864018c295b
  syrUpper ::
    GHC.Num.Num n =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> n
    -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w2 :: Data.Vector.Vector n)
                   (w3 :: n) ->
                 case w2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 HBLAS.Level2.$wsyrUpper @ n w w1 ww1 ww2 ww3 w3 }) -}
e79ee86187603697f963f6e9f90715db
  trmv ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n -> GHC.Types.Char -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: GHC.Types.Char) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w4 of ww4 { GHC.Types.C# ww5 ->
                 case HBLAS.Level2.$wtrmv
                        @ n
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        ww5 of ww6 { (#,,#) ww7 ww8 ww9 ->
                 Data.Vector.Vector @ n ww7 ww8 ww9 } } }) -}
f68511a1a40633d156b6d39537ac5ae0
  trmv1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
6fdac5751cda752bb2aa959b1d55c5bc
  trmvHelper ::
    GHC.Num.Num n => Data.Vector.Vector n -> Data.Vector.Vector n -> n
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Vector n)
                   (w2 :: Data.Vector.Vector n) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 HBLAS.Level2.$wtrmvHelper @ n w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
f7bc6f2772bf38c602ec2398b8c3c5bc
  trmvLower ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w5 of ww4 { GHC.Types.I# ww5 ->
                 case w6 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wtrmvLower
                        @ n
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        w4
                        ww5
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
71197e5aeb6512d23caa60ca859c77df
  trmvUpper ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w5 of ww4 { GHC.Types.I# ww5 ->
                 case w6 of ww6 { GHC.Types.I# ww7 ->
                 case HBLAS.Level2.$wtrmvUpper
                        @ n
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        w4
                        ww5
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Data.Vector.Vector @ n ww9 ww10 ww11 } } } }) -}
6b9e0d87570612a6307b8fd67b906e07
  trmv_$s$wtrmvLower ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 10,
     Strictness: <S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U><L,U(U,U,U)><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)> -}
d29569c657ff6ba937c0a02aa1abda50
  trmv_$s$wtrmvUpper ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> GHC.Prim.Array# n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Array# n #)
  {- Arity: 10,
     Strictness: <S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U><L,U(U,U,U)><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)> -}
909b2144f0021da7ce7746359ad68ed4
  trsv ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n -> GHC.Types.Char -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: GHC.Types.Char) ->
                 case w3 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w4 of ww4 { GHC.Types.C# ww5 ->
                 HBLAS.Level2.$wtrsv @ n w1 w2 ww1 ww2 ww3 ww5 } }) -}
3b528c3f306ebb2225fd7124611dc008
  trsvHelper ::
    GHC.Num.Num n =>
    Data.Vector.Vector n -> Data.Vector.Vector n -> n -> n
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLLLL),U(C(C1(U)),1*C1(C1(U)),C(C1(U)),A,A,A,1*C1(U))><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   (veca :: Data.Vector.Vector n)
                   (vecx :: Data.Vector.Vector n)
                   (valueb :: n) ->
                 GHC.Num.-
                   @ n
                   $dNum
                   valueb
                   (case veca of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                    case vecx of v1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                    letrec {
                      $s$wfoldlM'_loop :: GHC.Prim.Int# -> GHC.Prim.Int# -> n -> n
                        <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,1*U> -}
                      = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) (sc2 :: n) ->
                        case sc2 of z2 { DEFAULT ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.>=# sc1 ipv1) of wild {
                          GHC.Types.False
                          -> case GHC.Prim.indexArray#
                                    @ n
                                    ipv2
                                    (GHC.Prim.+# ipv sc1) of ds3 { Unit# ipv6 ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc ipv4) of wild1 {
                               GHC.Types.False
                               -> $s$wfoldlM'_loop
                                    (GHC.Prim.+# sc 1#)
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Num.+
                                       @ n
                                       $dNum
                                       z2
                                       (case GHC.Prim.indexArray#
                                               @ n
                                               ipv5
                                               (GHC.Prim.+# ipv3 sc) of ds1 { Unit# ipv7 ->
                                        GHC.Num.* @ n $dNum ipv6 ipv7 }))
                               GHC.Types.True -> z2 } }
                          GHC.Types.True -> z2 } }
                    } in
                    $s$wfoldlM'_loop
                      0#
                      0#
                      (GHC.Num.fromInteger @ n $dNum HBLAS.Level2.trmv1) } })) -}
7ef899f7d6d26deddbce7b9525e7e0ff
  trsvLower ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Data.Vector.Vector n, Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w5 of ww { GHC.Types.I# ww1 ->
                 case w6 of ww2 { GHC.Types.I# ww3 ->
                 case HBLAS.Level2.$wtrsvLower
                        @ n
                        w1
                        w2
                        w3
                        w4
                        ww1
                        ww3 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } } }) -}
d83199c88bf8cf22ee9b850adb51da07
  trsvUpper ::
    (GHC.Num.Num n, GHC.Real.Fractional n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Data.Vector.Vector n, Data.Vector.Vector n)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Vector (Data.Vector.Vector n))
                   (w3 :: Data.Vector.Vector n)
                   (w4 :: Data.Vector.Vector n)
                   (w5 :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int) ->
                 case w5 of ww { GHC.Types.I# ww1 ->
                 case w6 of ww2 { GHC.Types.I# ww3 ->
                 case HBLAS.Level2.$wtrsvUpper
                        @ n
                        w1
                        w2
                        w3
                        w4
                        ww1
                        ww3 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } } }) -}
70678455e4efed75aa863129fa5472b6
  trsv_$s$wtrsvLower ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 8,
     Strictness: <S,U><S,U><L,U><L,U><L,U><L,U(U,U,U)><L,U(U,U,U)><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)> -}
53f6170de0f3fa317cf6194784d57343
  trsv_$s$wtrsvUpper ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Real.Fractional n =>
       (# Data.Vector.Vector n, Data.Vector.Vector n #)
  {- Arity: 8,
     Strictness: <S,U><S,U><L,U><L,U><L,U><L,U(U,U,U)><L,U(U,U,U)><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)> -}
"SC:$wgetLowerTotalRow0" [0] forall @ n
                                    (sc :: GHC.Prim.Int#)
                                    (sc1 :: GHC.Prim.Int#)
                                    (sc2 :: GHC.Prim.Int#)
                                    (sc3 :: GHC.Prim.Array# n)
                                    (sc4 :: GHC.Prim.Int#)
                                    (sc5 :: GHC.Prim.Int#)
                                    (sc6 :: GHC.Prim.Int#)
                                    (sc7 :: GHC.Prim.Int#)
                                    (sc8 :: GHC.Prim.Array# (Data.Vector.Vector n))
  HBLAS.Level2.$wgetLowerTotalRow @ n
                                  (Data.Vector.Vector @ (Data.Vector.Vector n) sc6 sc7 sc8)
                                  sc5
                                  sc4
                                  sc3
                                  sc2
                                  (GHC.Types.I# sc1)
                                  sc
  = HBLAS.Level2.getLowerTotalRow_$s$wgetLowerTotalRow
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SC:$wgetUpperTotalRow0" [0] forall @ n
                                    (sc :: GHC.Prim.Int#)
                                    (sc1 :: GHC.Prim.Int#)
                                    (sc2 :: GHC.Prim.Int#)
                                    (sc3 :: GHC.Prim.Array# n)
                                    (sc4 :: GHC.Prim.Int#)
                                    (sc5 :: GHC.Prim.Int#)
                                    (sc6 :: GHC.Prim.Int#)
                                    (sc7 :: GHC.Prim.Int#)
                                    (sc8 :: GHC.Prim.Array# (Data.Vector.Vector n))
  HBLAS.Level2.$wgetUpperTotalRow @ n
                                  (Data.Vector.Vector @ (Data.Vector.Vector n) sc6 sc7 sc8)
                                  sc5
                                  sc4
                                  sc3
                                  sc2
                                  (GHC.Types.I# sc1)
                                  sc
  = HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SC:$wgetUpperTotalRow1" [0] forall @ n
                                    (sc :: GHC.Prim.Int#)
                                    (sc1 :: GHC.Prim.Int#)
                                    (sc2 :: GHC.Prim.Int#)
                                    (sc3 :: GHC.Prim.Array# n)
                                    (sc4 :: GHC.Prim.Int#)
                                    (sc5 :: GHC.Prim.Int#)
                                    (sc6 :: Data.Vector.Vector (Data.Vector.Vector n))
  HBLAS.Level2.$wgetUpperTotalRow @ n
                                  sc6
                                  sc5
                                  sc4
                                  sc3
                                  sc2
                                  (GHC.Types.I# sc1)
                                  sc
  = HBLAS.Level2.getUpperTotalRow_$s$wgetUpperTotalRow1
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
"SC:$wgetXYTranspose0" [0] forall @ n
                                  (sc :: GHC.Prim.Int#)
                                  (sc1 :: GHC.Prim.Int#)
                                  (sc2 :: GHC.Prim.Array# n)
                                  (sc3 :: GHC.Prim.Array# n)
                                  (sc4 :: GHC.Prim.Int#)
                                  (sc5 :: GHC.Prim.Int#)
                                  (sc6 :: GHC.Num.Num n)
  HBLAS.Level2.$wgetXYTranspose @ n
                                sc6
                                sc5
                                sc4
                                sc3
                                (Data.Vector.Vector @ n sc sc1 sc2)
  = HBLAS.Level2.ger_$s$wgetXYTranspose
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
"SC:$wtrmvLower0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: GHC.Prim.Array# n)
                             (sc6 :: GHC.Prim.Int#)
                             (sc7 :: GHC.Prim.Int#)
                             (sc8 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc9 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrmvLower @ n
                           sc9
                           sc8
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trmv_$s$wtrmvLower
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$wtrmvUpper0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: GHC.Prim.Array# n)
                             (sc6 :: GHC.Prim.Int#)
                             (sc7 :: GHC.Prim.Int#)
                             (sc8 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc9 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrmvUpper @ n
                           sc9
                           sc8
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trmv_$s$wtrmvUpper
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$wtrsvLower0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: Data.Vector.Vector n)
                             (sc6 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc7 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrsvLower @ n
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trsv_$s$wtrsvLower
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$wtrsvUpper0" [0] forall @ n
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: GHC.Prim.Int#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sc4 :: GHC.Prim.Array# n)
                             (sc5 :: Data.Vector.Vector n)
                             (sc6 :: Data.Vector.Vector (Data.Vector.Vector n))
                             (sc7 :: GHC.Real.Fractional n)
  HBLAS.Level2.$wtrsvUpper @ n
                           sc7
                           sc6
                           sc5
                           (Data.Vector.Vector @ n sc2 sc3 sc4)
                           sc1
                           sc
  = HBLAS.Level2.trsv_$s$wtrsvUpper
      @ n
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

