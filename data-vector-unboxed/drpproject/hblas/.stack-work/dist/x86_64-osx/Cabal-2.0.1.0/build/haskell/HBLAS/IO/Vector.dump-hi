
==================== FINAL INTERFACE ====================
2020-05-31 21:52:56.539186 UTC

interface hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j:HBLAS.IO.Vector 8022
  interface hash: 17276e12bf3bd3a13a774fb0953b7c10
  ABI hash: 46b2cc1d9242c3ac29f8ff566f50c865
  export-list hash: 4338c733c3ef45307c15302ed6352ce2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1fabf3b1ad6350a82a2ee1d9db30a593
  sig of: Nothing
  used TH splices: False
  where
exports:
  HBLAS.IO.Vector.createFlatMatrix
  HBLAS.IO.Vector.createSymLowSq
  HBLAS.IO.Vector.createSymLowTri
  HBLAS.IO.Vector.createVec0
  HBLAS.IO.Vector.createVecX
  HBLAS.IO.Vector.createVecX'
  HBLAS.IO.Vector.helperSymLowSq
  HBLAS.IO.Vector.helperSymLowTri
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 primitive-0.6.3.0
                      transformers-0.5.2.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  vector-0.12.0.1:Data.Vector.Unboxed 479ef134bc2fb9694c4fd3a0ff5e0b8d
import  -/  vector-0.12.0.1:Data.Vector.Unboxed.Base a76f45e9ab7025ce49d09aaa12d53b96
addDependentFile "/Users/mamtajakter/.stack/programs/x86_64-osx/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
d7380e00a110c08487d71ad5cb0d3690
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HBLAS.IO.Vector.$trModule3
                   HBLAS.IO.Vector.$trModule1) -}
a5270357f146187af5659ab7a6792d90
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.IO.Vector.$trModule2) -}
fcf06dfcff08c85e727ee044be4d27f6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HBLAS.IO.Vector"#) -}
fdba16bcafb302a8c304be3680623883
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.IO.Vector.$trModule4) -}
1488bb43e2a10e011790db99b8ac259b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j"#) -}
7aa22b864fb58bd3318893f623d6332b
  $wcreateFlatMatrix ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,A,A,C(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False -> Data.Vector.Unboxed.empty @ n w1
                                          GHC.Types.True
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               $dVector1 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               x :: n = GHC.Num.fromInteger @ n w 1
                                             } in
                                             case Data.Vector.Generic.Base.elemseq
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector1
                                                    @ (Data.Vector.Unboxed.Base.Vector n)
                                                    (GHC.Err.undefined
                                                       @ 'GHC.Types.LiftedRep
                                                       @ (Data.Vector.Unboxed.Base.Vector n)
                                                       (GHC.Stack.Types.PushCallStack
                                                          (GHC.CString.unpackCString# "undefined"#)
                                                          (GHC.Stack.Types.SrcLoc
                                                             (GHC.CString.unpackCString#
                                                                "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                             (GHC.CString.unpackCString#
                                                                "Data.Vector.Generic"#)
                                                             (GHC.CString.unpackCString#
                                                                "./Data/Vector/Generic.hs"#)
                                                             (GHC.Types.I# 520#)
                                                             (GHC.Types.I# 26#)
                                                             (GHC.Types.I# 520#)
                                                             (GHC.Types.I# 35#))
                                                          GHC.Stack.Types.EmptyCallStack)
                                                         `cast`
                                                       (Sym (GHC.Classes.N:IP[0]
                                                                 <"callStack">_N
                                                                 <GHC.Stack.Types.CallStack>_N)))
                                                    x
                                                    (let {
                                                       len :: GHC.Types.Int
                                                       = case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.<=# ww1 0#) of wild2 {
                                                           GHC.Types.False -> GHC.Types.I# ww1
                                                           GHC.Types.True -> GHC.Types.I# 0# }
                                                     } in
                                                     case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Unboxed.Base.Vector
                                                                   n #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             let {
                                                               $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                              (Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector)
                                                                              n
                                                               = Data.Vector.Generic.Base.$p1Vector
                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                   @ n
                                                                   $dVector1
                                                             } in
                                                             case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (GHC.ST.ST
                                                                          GHC.Prim.RealWorld)
                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                        @ GHC.Prim.RealWorld)
                                                                     len)
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R)
                                                                    s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Bool
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Bool) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild1 {
                                                                    GHC.Types.False -> (# s8, z1 #)
                                                                    GHC.Types.True
                                                                    -> case (Data.Vector.Generic.Mutable.Base.basicSet
                                                                               @ (Data.Vector.Generic.Base.Mutable
                                                                                    Data.Vector.Unboxed.Base.Vector)
                                                                               @ n
                                                                               (Data.Vector.Generic.Base.$p1Vector
                                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                                  @ n
                                                                                  $dVector1)
                                                                               @ (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld)
                                                                               (Control.Monad.Primitive.$fPrimMonadST
                                                                                  @ GHC.Prim.RealWorld)
                                                                               (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                                  @ n
                                                                                  $dMVector
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  z1
                                                                                  len
                                                                                  ipv5)
                                                                               x)
                                                                              `cast`
                                                                            (GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <()>_R)
                                                                              s8 of ds2 { (#,#) ipv1 ipv7 ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (case len of wild6 { GHC.Types.I# y ->
                                                                           GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 y) })
                                                                          GHC.Types.False)
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         ipv1 } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     GHC.Types.True)
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                             (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                @ Data.Vector.Unboxed.Base.Vector
                                                                @ n
                                                                $dVector1
                                                                @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                   @ GHC.Prim.RealWorld)
                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                   @ n
                                                                   $dMVector
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   (GHC.Types.I# 0#)
                                                                   ipv7
                                                                   ipv5))
                                                               `cast`
                                                             (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Vector.Unboxed.Base.Vector
                                                                     n>_R)
                                                               ipv6 } }) of ds1 { (#,#) ipv1 ipv2 ->
                                                     ipv2 }) of v2 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v2 of n1 { GHC.Types.I# ipv ->
                                             case HBLAS.IO.Vector.$wcreateFlatMatrix
                                                    @ n
                                                    w
                                                    w1
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v1 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v1 of n2 { GHC.Types.I# ipv1 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 ipv) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> let {
                                                                 $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                (Data.Vector.Generic.Base.Mutable
                                                                                   Data.Vector.Unboxed.Base.Vector)
                                                                                n
                                                                 = Data.Vector.Generic.Base.$p1Vector
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector
                                                               } in
                                                               case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                       @ n
                                                                       $dMVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (GHC.Types.I# x1))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n>_R)
                                                                      s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                              n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Unboxed.Base.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                $dVector
                                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                   @ n
                                                                                   $dMVector
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                   z1
                                                                                   m1
                                                                                   ipv5))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv2 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v2)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v2))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v1))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                               (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     ipv7
                                                                     ipv5))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Unboxed.Base.Vector
                                                                       n>_R)
                                                                 ipv6 } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                             ipv3 } } } } } }) -}
bde79a3753774ef6bb32ea92f8d3ee72
  $wcreateSymLowSq ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False -> Data.Vector.Unboxed.empty @ n w1
                                          GHC.Types.True
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             case HBLAS.IO.Vector.$whelperSymLowSq
                                                    @ n
                                                    w
                                                    w1
                                                    0#
                                                    1#
                                                    ww
                                                    ww1 of v2 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v2 of n1 { GHC.Types.I# ipv ->
                                             case HBLAS.IO.Vector.$wcreateSymLowSq
                                                    @ n
                                                    w
                                                    w1
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v1 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v1 of n2 { GHC.Types.I# ipv1 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 ipv) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> let {
                                                                 $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                (Data.Vector.Generic.Base.Mutable
                                                                                   Data.Vector.Unboxed.Base.Vector)
                                                                                n
                                                                 = Data.Vector.Generic.Base.$p1Vector
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector
                                                               } in
                                                               case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                       @ n
                                                                       $dMVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (GHC.Types.I# x1))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n>_R)
                                                                      s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                              n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                  Data.Vector.Unboxed.Base.Vector
                                                                                  n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                $dVector
                                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                   @ n
                                                                                   $dMVector
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                   z1
                                                                                   m1
                                                                                   ipv5))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv2 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v2)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v2))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v1))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                               (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     ipv7
                                                                     ipv5))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Unboxed.Base.Vector
                                                                       n>_R)
                                                                 ipv6 } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                             ipv3 } } } } } }) -}
d5f2e14aa4ba324d9b65ecf57723ebb3
  $wcreateSymLowTri ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False -> Data.Vector.Unboxed.empty @ n w1
                                          GHC.Types.True
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             case HBLAS.IO.Vector.$whelperSymLowTri
                                                    @ n
                                                    w
                                                    w1
                                                    0#
                                                    1#
                                                    ww
                                                    ww1 of v2 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v2 of n1 { GHC.Types.I# ipv ->
                                             case HBLAS.IO.Vector.$wcreateSymLowTri
                                                    @ n
                                                    w
                                                    w1
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v1 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v1 of n2 { GHC.Types.I# ipv1 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 ipv) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> let {
                                                                 $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                (Data.Vector.Generic.Base.Mutable
                                                                                   Data.Vector.Unboxed.Base.Vector)
                                                                                n
                                                                 = Data.Vector.Generic.Base.$p1Vector
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector
                                                               } in
                                                               case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                       @ n
                                                                       $dMVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (GHC.Types.I# x1))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n>_R)
                                                                      s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                              n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                  Data.Vector.Unboxed.Base.Vector
                                                                                  n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                $dVector
                                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                   @ n
                                                                                   $dMVector
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                   z1
                                                                                   m1
                                                                                   ipv5))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv2 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v2)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v2))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v1))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                               (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     ipv7
                                                                     ipv5))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Unboxed.Base.Vector
                                                                       n>_R)
                                                                 ipv6 } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                             ipv3 } } } } } }) -}
b69e7b739bdf32d9f0362f94b2329aed
  $wcreateVecX ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 5,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(SL),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S,U><L,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww2) of wild {
                                          GHC.Types.False -> Data.Vector.Unboxed.empty @ n w1
                                          GHC.Types.True
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               x :: n = GHC.Num.fromInteger @ n w 1
                                             } in
                                             Data.Vector.Generic.Base.elemseq
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               $dVector
                                               @ (Data.Vector.Unboxed.Base.Vector n)
                                               (GHC.Err.undefined
                                                  @ 'GHC.Types.LiftedRep
                                                  @ (Data.Vector.Unboxed.Base.Vector n)
                                                  (GHC.Stack.Types.PushCallStack
                                                     (GHC.CString.unpackCString# "undefined"#)
                                                     (GHC.Stack.Types.SrcLoc
                                                        (GHC.CString.unpackCString#
                                                           "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                        (GHC.CString.unpackCString#
                                                           "Data.Vector.Generic"#)
                                                        (GHC.CString.unpackCString#
                                                           "./Data/Vector/Generic.hs"#)
                                                        (GHC.Types.I# 683#)
                                                        (GHC.Types.I# 21#)
                                                        (GHC.Types.I# 683#)
                                                        (GHC.Types.I# 30#))
                                                     GHC.Stack.Types.EmptyCallStack)
                                                    `cast`
                                                  (Sym (GHC.Classes.N:IP[0]
                                                            <"callStack">_N
                                                            <GHC.Stack.Types.CallStack>_N)))
                                               x
                                               (case HBLAS.IO.Vector.$wcreateVecX
                                                       @ n
                                                       w
                                                       w1
                                                       (GHC.Prim.+# ww 1#)
                                                       (GHC.Prim.+# ww1 1#)
                                                       ww2 of v2 { DEFAULT ->
                                                case Data.Vector.Generic.Base.basicLength
                                                       @ Data.Vector.Unboxed.Base.Vector
                                                       @ n
                                                       $dVector
                                                       v2 of n1 { GHC.Types.I# ipv ->
                                                case GHC.Magic.runRW#
                                                       @ ('GHC.Types.TupleRep
                                                            '['GHC.Types.TupleRep '[],
                                                              'GHC.Types.LiftedRep])
                                                       @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            Data.Vector.Unboxed.Base.Vector n #)
                                                       (\ (s1 :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld)[OneShot] ->
                                                        let {
                                                          x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv 1#
                                                        } in
                                                        case GHC.Prim.tagToEnum#
                                                               @ GHC.Types.Bool
                                                               (GHC.Prim.<# x1 ipv) of wild4 {
                                                          GHC.Types.False
                                                          -> case GHC.Prim.tagToEnum#
                                                                    @ GHC.Types.Bool
                                                                    (GHC.Prim.<# x1 1#) of wild5 {
                                                               GHC.Types.False
                                                               -> let {
                                                                    $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                   (Data.Vector.Generic.Base.Mutable
                                                                                      Data.Vector.Unboxed.Base.Vector)
                                                                                   n
                                                                    = Data.Vector.Generic.Base.$p1Vector
                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                        @ n
                                                                        $dVector
                                                                  } in
                                                                  case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                          @ (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                          @ n
                                                                          $dMVector
                                                                          @ (GHC.ST.ST
                                                                               GHC.Prim.RealWorld)
                                                                          (Control.Monad.Primitive.$fPrimMonadST
                                                                             @ GHC.Prim.RealWorld)
                                                                          (GHC.Types.I# x1))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               n>_R)
                                                                         s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                                  letrec {
                                                                    foldlM'_loop :: GHC.Types.SPEC
                                                                                    -> GHC.Types.Int
                                                                                    -> Data.Either.Either
                                                                                         GHC.Types.Bool
                                                                                         GHC.Types.Bool
                                                                                    -> GHC.ST.ST
                                                                                         GHC.Prim.RealWorld
                                                                                         GHC.Types.Int
                                                                      {- Arity: 3 -}
                                                                    = \ (ds4 :: GHC.Types.SPEC)
                                                                        (z :: GHC.Types.Int)
                                                                        (s7 :: Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool) ->
                                                                      case ds4 of ds5 { DEFAULT ->
                                                                      case z of z1 { GHC.Types.I# ipv6 ->
                                                                      (\ (s8 :: GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld) ->
                                                                       let {
                                                                         $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                 Data.Vector.Unboxed.Base.Vector
                                                                                 n
                                                                               -> Data.Either.Either
                                                                                    GHC.Types.Bool
                                                                                    GHC.Types.Bool
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     GHC.Types.Int #)
                                                                           <join 2> {- Arity: 2 -}
                                                                         = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                      n)[OneShot]
                                                                             (s' :: Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool)[OneShot] ->
                                                                           case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                           case (f1
                                                                                   @ (GHC.ST.ST
                                                                                        GHC.Prim.RealWorld)
                                                                                   (Control.Monad.Primitive.$fPrimMonadST
                                                                                      @ GHC.Prim.RealWorld)
                                                                                   $dVector
                                                                                   (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Unboxed.Base.Vector)
                                                                                      @ n
                                                                                      $dMVector
                                                                                      @ (Control.Monad.Primitive.PrimState
                                                                                           (GHC.ST.ST
                                                                                              GHC.Prim.RealWorld))
                                                                                      z1
                                                                                      m1
                                                                                      ipv5))
                                                                                  `cast`
                                                                                (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <()>_R)
                                                                                  s8 of ds2 { (#,#) ipv1 ipv7 ->
                                                                           (foldlM'_loop
                                                                              GHC.Types.SPEC
                                                                              (case m1 of wild6 { GHC.Types.I# y ->
                                                                               GHC.Types.I#
                                                                                 (GHC.Prim.+#
                                                                                    ipv6
                                                                                    y) })
                                                                              s')
                                                                             `cast`
                                                                           (GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <GHC.Types.Int>_R)
                                                                             ipv1 } }
                                                                       } in
                                                                       case s7 of wild2 {
                                                                         Data.Either.Left sa
                                                                         -> case sa of wild1 {
                                                                              GHC.Types.False
                                                                              -> (foldlM'_loop
                                                                                    GHC.Types.SPEC
                                                                                    z1
                                                                                    (Data.Either.Right
                                                                                       @ GHC.Types.Bool
                                                                                       @ GHC.Types.Bool
                                                                                       GHC.Types.True))
                                                                                   `cast`
                                                                                 (GHC.ST.N:ST[0]
                                                                                      <GHC.Prim.RealWorld>_N
                                                                                      <GHC.Types.Int>_R)
                                                                                   s8
                                                                              GHC.Types.True
                                                                              -> $j
                                                                                   (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      (Data.Vector.Generic.Base.basicLength
                                                                                         @ Data.Vector.Unboxed.Base.Vector
                                                                                         @ n
                                                                                         $dVector
                                                                                         v2)
                                                                                      (\ @ m1 :: *
                                                                                                 -> *
                                                                                         ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                           m1)
                                                                                         ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                         Data.Vector.Unboxed.Base.Vector
                                                                                                         n)
                                                                                         (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                  Data.Vector.Unboxed.Base.Vector
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)
                                                                                                  n) ->
                                                                                       Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                         @ Data.Vector.Unboxed.Base.Vector
                                                                                         @ n
                                                                                         $dVector
                                                                                         @ m1
                                                                                         $dPrimMonad
                                                                                         mv
                                                                                         v2))
                                                                                   (Data.Either.Left
                                                                                      @ GHC.Types.Bool
                                                                                      @ GHC.Types.Bool
                                                                                      GHC.Types.False) }
                                                                         Data.Either.Right sb
                                                                         -> case sb of wild1 {
                                                                              GHC.Types.False
                                                                              -> (# s8, z1 #)
                                                                              GHC.Types.True
                                                                              -> $j
                                                                                   (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      (GHC.Types.I#
                                                                                         1#)
                                                                                      (\ @ m1 :: *
                                                                                                 -> *
                                                                                         ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                           m1)
                                                                                         ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                         Data.Vector.Unboxed.Base.Vector
                                                                                                         n) ->
                                                                                       let {
                                                                                         $dMVector1 :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                         (Data.Vector.Generic.Base.Mutable
                                                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                                                         n
                                                                                         = Data.Vector.Generic.Base.$p1Vector
                                                                                             @ Data.Vector.Unboxed.Base.Vector
                                                                                             @ n
                                                                                             $dVector1
                                                                                       } in
                                                                                       \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                                  Data.Vector.Unboxed.Base.Vector
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)
                                                                                                  n) ->
                                                                                       Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                         @ (Data.Vector.Generic.Base.Mutable
                                                                                              Data.Vector.Unboxed.Base.Vector)
                                                                                         @ n
                                                                                         $dMVector1
                                                                                         @ m1
                                                                                         $dPrimMonad
                                                                                         v1
                                                                                         (GHC.Types.I#
                                                                                            0#)
                                                                                         x))
                                                                                   (Data.Either.Right
                                                                                      @ GHC.Types.Bool
                                                                                      @ GHC.Types.Bool
                                                                                      GHC.Types.False) } })
                                                                        `cast`
                                                                      (Sym (GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <GHC.Types.Int>_R)) } }
                                                                  } in
                                                                  case (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I# 0#)
                                                                          (Data.Either.Left
                                                                             @ GHC.Types.Bool
                                                                             @ GHC.Types.Bool
                                                                             GHC.Types.True))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                                  (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector
                                                                     @ (GHC.ST.ST
                                                                          GHC.Prim.RealWorld)
                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                        @ GHC.Prim.RealWorld)
                                                                     (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                        @ (Data.Vector.Generic.Base.Mutable
                                                                             Data.Vector.Unboxed.Base.Vector)
                                                                        @ n
                                                                        $dMVector
                                                                        @ (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                        (GHC.Types.I# 0#)
                                                                        ipv7
                                                                        ipv5))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Vector.Unboxed.Base.Vector
                                                                          n>_R)
                                                                    ipv6 } }
                                                               GHC.Types.True
                                                               -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                         x1
                                                                  ret_ty (# GHC.Prim.State#
                                                                              GHC.Prim.RealWorld,
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                              n #)
                                                                  of {} }
                                                          GHC.Types.True
                                                          -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                    x1
                                                             ret_ty (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Vector.Unboxed.Base.Vector
                                                                         n #)
                                                             of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                                                ipv2 } } }) }) -}
981f1a0f40a7d3482c88b6bc39e988b0
  $whelperSymLowSq ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#)
                                          (ww3 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=# ww ww2) of wild {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<# ww ww3) of wild1 {
                                               GHC.Types.False -> Data.Vector.Unboxed.empty @ n w1
                                               GHC.Types.True
                                               -> let {
                                                    $dVector :: Data.Vector.Generic.Base.Vector
                                                                  Data.Vector.Unboxed.Base.Vector n
                                                    = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                                  } in
                                                  let {
                                                    $dVector1 :: Data.Vector.Generic.Base.Vector
                                                                   Data.Vector.Unboxed.Base.Vector n
                                                    = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                                  } in
                                                  let {
                                                    x :: n = GHC.Num.fromInteger @ n w 0
                                                  } in
                                                  case Data.Vector.Generic.Base.elemseq
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ n
                                                         $dVector1
                                                         @ (Data.Vector.Unboxed.Base.Vector n)
                                                         (GHC.Err.undefined
                                                            @ 'GHC.Types.LiftedRep
                                                            @ (Data.Vector.Unboxed.Base.Vector n)
                                                            (GHC.Stack.Types.PushCallStack
                                                               (GHC.CString.unpackCString#
                                                                  "undefined"#)
                                                               (GHC.Stack.Types.SrcLoc
                                                                  (GHC.CString.unpackCString#
                                                                     "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                                  (GHC.CString.unpackCString#
                                                                     "Data.Vector.Generic"#)
                                                                  (GHC.CString.unpackCString#
                                                                     "./Data/Vector/Generic.hs"#)
                                                                  (GHC.Types.I# 514#)
                                                                  (GHC.Types.I# 24#)
                                                                  (GHC.Types.I# 514#)
                                                                  (GHC.Types.I# 33#))
                                                               GHC.Stack.Types.EmptyCallStack)
                                                              `cast`
                                                            (Sym (GHC.Classes.N:IP[0]
                                                                      <"callStack">_N
                                                                      <GHC.Stack.Types.CallStack>_N)))
                                                         x
                                                         (case GHC.Magic.runRW#
                                                                 @ ('GHC.Types.TupleRep
                                                                      '['GHC.Types.TupleRep '[],
                                                                        'GHC.Types.LiftedRep])
                                                                 @ (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      Data.Vector.Unboxed.Base.Vector
                                                                        n #)
                                                                 (\ (s1 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld)[OneShot] ->
                                                                  let {
                                                                    $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                   (Data.Vector.Generic.Base.Mutable
                                                                                      Data.Vector.Unboxed.Base.Vector)
                                                                                   n
                                                                    = Data.Vector.Generic.Base.$p1Vector
                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                        @ n
                                                                        $dVector1
                                                                  } in
                                                                  case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                          @ (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                          @ n
                                                                          $dMVector
                                                                          @ (GHC.ST.ST
                                                                               GHC.Prim.RealWorld)
                                                                          (Control.Monad.Primitive.$fPrimMonadST
                                                                             @ GHC.Prim.RealWorld)
                                                                          (GHC.Types.I# 1#))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               n>_R)
                                                                         s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                                  letrec {
                                                                    foldlM'_loop :: GHC.Types.SPEC
                                                                                    -> GHC.Types.Int
                                                                                    -> GHC.Types.Bool
                                                                                    -> GHC.ST.ST
                                                                                         GHC.Prim.RealWorld
                                                                                         GHC.Types.Int
                                                                      {- Arity: 3 -}
                                                                    = \ (ds4 :: GHC.Types.SPEC)
                                                                        (z :: GHC.Types.Int)
                                                                        (s7 :: GHC.Types.Bool) ->
                                                                      case ds4 of ds5 { DEFAULT ->
                                                                      case z of z1 { GHC.Types.I# ipv6 ->
                                                                      (\ (s8 :: GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld) ->
                                                                       case s7 of wild2 {
                                                                         GHC.Types.False
                                                                         -> (# s8, z1 #)
                                                                         GHC.Types.True
                                                                         -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                    @ (Data.Vector.Generic.Base.Mutable
                                                                                         Data.Vector.Unboxed.Base.Vector)
                                                                                    @ n
                                                                                    (Data.Vector.Generic.Base.$p1Vector
                                                                                       @ Data.Vector.Unboxed.Base.Vector
                                                                                       @ n
                                                                                       $dVector1)
                                                                                    @ (GHC.ST.ST
                                                                                         GHC.Prim.RealWorld)
                                                                                    (Control.Monad.Primitive.$fPrimMonadST
                                                                                       @ GHC.Prim.RealWorld)
                                                                                    (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                                       @ n
                                                                                       $dMVector
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       z1
                                                                                       (GHC.Types.I#
                                                                                          1#)
                                                                                       ipv5)
                                                                                    (GHC.Types.I#
                                                                                       0#)
                                                                                    x)
                                                                                   `cast`
                                                                                 (GHC.ST.N:ST[0]
                                                                                      <GHC.Prim.RealWorld>_N
                                                                                      <()>_R)
                                                                                   s8 of ds2 { (#,#) ipv1 ipv7 ->
                                                                            (foldlM'_loop
                                                                               GHC.Types.SPEC
                                                                               (GHC.Types.I#
                                                                                  (GHC.Prim.+#
                                                                                     ipv6
                                                                                     1#))
                                                                               GHC.Types.False)
                                                                              `cast`
                                                                            (GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <GHC.Types.Int>_R)
                                                                              ipv1 } })
                                                                        `cast`
                                                                      (Sym (GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <GHC.Types.Int>_R)) } }
                                                                  } in
                                                                  case (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I# 0#)
                                                                          GHC.Types.True)
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                                  (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector1
                                                                     @ (GHC.ST.ST
                                                                          GHC.Prim.RealWorld)
                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                        @ GHC.Prim.RealWorld)
                                                                     (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                        @ (Data.Vector.Generic.Base.Mutable
                                                                             Data.Vector.Unboxed.Base.Vector)
                                                                        @ n
                                                                        $dMVector
                                                                        @ (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                        (GHC.Types.I# 0#)
                                                                        ipv7
                                                                        ipv5))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Vector.Unboxed.Base.Vector
                                                                          n>_R)
                                                                    ipv6 } }) of ds1 { (#,#) ipv1 ipv2 ->
                                                          ipv2 }) of v2 { DEFAULT ->
                                                  case Data.Vector.Generic.Base.basicLength
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ n
                                                         $dVector
                                                         v2 of n1 { GHC.Types.I# ipv ->
                                                  case HBLAS.IO.Vector.$whelperSymLowSq
                                                         @ n
                                                         w
                                                         w1
                                                         (GHC.Prim.+# ww 1#)
                                                         (GHC.Prim.+# ww1 1#)
                                                         ww2
                                                         ww3 of v1 { DEFAULT ->
                                                  case Data.Vector.Generic.Base.basicLength
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ n
                                                         $dVector
                                                         v1 of n2 { GHC.Types.I# ipv1 ->
                                                  case GHC.Magic.runRW#
                                                         @ ('GHC.Types.TupleRep
                                                              '['GHC.Types.TupleRep '[],
                                                                'GHC.Types.LiftedRep])
                                                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              Data.Vector.Unboxed.Base.Vector n #)
                                                         (\ (s1 :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld)[OneShot] ->
                                                          let {
                                                            x1 :: GHC.Prim.Int#
                                                            = GHC.Prim.+# ipv ipv1
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv) of wild4 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<#
                                                                         x1
                                                                         ipv1) of wild5 {
                                                                 GHC.Types.False
                                                                 -> let {
                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                     n
                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                          @ Data.Vector.Unboxed.Base.Vector
                                                                          @ n
                                                                          $dVector
                                                                    } in
                                                                    case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                            @ (Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector)
                                                                            @ n
                                                                            $dMVector
                                                                            @ (GHC.ST.ST
                                                                                 GHC.Prim.RealWorld)
                                                                            (Control.Monad.Primitive.$fPrimMonadST
                                                                               @ GHC.Prim.RealWorld)
                                                                            (GHC.Types.I# x1))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                                 n>_R)
                                                                           s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                                    letrec {
                                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                                      -> GHC.Types.Int
                                                                                      -> Data.Either.Either
                                                                                           GHC.Types.Bool
                                                                                           GHC.Types.Bool
                                                                                      -> GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           GHC.Types.Int
                                                                        {- Arity: 3 -}
                                                                      = \ (ds4 :: GHC.Types.SPEC)
                                                                          (z :: GHC.Types.Int)
                                                                          (s7 :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool) ->
                                                                        case ds4 of ds5 { DEFAULT ->
                                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                                        (\ (s8 :: GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld) ->
                                                                         let {
                                                                           $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Unboxed.Base.Vector
                                                                                   n
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       GHC.Types.Int #)
                                                                             <join 2> {- Arity: 2 -}
                                                                           = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        Data.Vector.Unboxed.Base.Vector
                                                                                        n)[OneShot]
                                                                               (s' :: Data.Either.Either
                                                                                        GHC.Types.Bool
                                                                                        GHC.Types.Bool)[OneShot] ->
                                                                             case x2 of wild2 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                             case (f1
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld)
                                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                                        @ GHC.Prim.RealWorld)
                                                                                     $dVector
                                                                                     (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                        @ (Data.Vector.Generic.Base.Mutable
                                                                                             Data.Vector.Unboxed.Base.Vector)
                                                                                        @ n
                                                                                        $dMVector
                                                                                        @ (Control.Monad.Primitive.PrimState
                                                                                             (GHC.ST.ST
                                                                                                GHC.Prim.RealWorld))
                                                                                        z1
                                                                                        m1
                                                                                        ipv5))
                                                                                    `cast`
                                                                                  (GHC.ST.N:ST[0]
                                                                                       <GHC.Prim.RealWorld>_N
                                                                                       <()>_R)
                                                                                    s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                             (foldlM'_loop
                                                                                GHC.Types.SPEC
                                                                                (case m1 of wild6 { GHC.Types.I# y ->
                                                                                 GHC.Types.I#
                                                                                   (GHC.Prim.+#
                                                                                      ipv6
                                                                                      y) })
                                                                                s')
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)
                                                                               ipv2 } }
                                                                         } in
                                                                         case s7 of wild2 {
                                                                           Data.Either.Left sa
                                                                           -> case sa of wild3 {
                                                                                GHC.Types.False
                                                                                -> (foldlM'_loop
                                                                                      GHC.Types.SPEC
                                                                                      z1
                                                                                      (Data.Either.Right
                                                                                         @ GHC.Types.Bool
                                                                                         @ GHC.Types.Bool
                                                                                         GHC.Types.True))
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <GHC.Types.Int>_R)
                                                                                     s8
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                                        @ n
                                                                                        (Data.Vector.Generic.Base.basicLength
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           v2)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Unboxed.Base.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Unboxed.Base.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           mv
                                                                                           v2))
                                                                                     (Data.Either.Left
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) }
                                                                           Data.Either.Right sb
                                                                           -> case sb of wild3 {
                                                                                GHC.Types.False
                                                                                -> (# s8, z1 #)
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                                        @ n
                                                                                        (Data.Vector.Generic.Base.basicLength
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           v1)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Unboxed.Base.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Unboxed.Base.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           mv
                                                                                           v1))
                                                                                     (Data.Either.Right
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) } })
                                                                          `cast`
                                                                        (Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)) } }
                                                                    } in
                                                                    case (foldlM'_loop
                                                                            GHC.Types.SPEC
                                                                            (GHC.Types.I# 0#)
                                                                            (Data.Either.Left
                                                                               @ GHC.Types.Bool
                                                                               @ GHC.Types.Bool
                                                                               GHC.Types.True))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <GHC.Types.Int>_R)
                                                                           ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                                    (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                       @ Data.Vector.Unboxed.Base.Vector
                                                                       @ n
                                                                       $dVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                          @ (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                          @ n
                                                                          $dMVector
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          (GHC.Types.I# 0#)
                                                                          ipv7
                                                                          ipv5))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Unboxed.Base.Vector
                                                                            n>_R)
                                                                      ipv6 } }
                                                                 GHC.Types.True
                                                                 -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                           x1
                                                                    ret_ty (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                                n #)
                                                                    of {} }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                                  ipv3 } } } } } }
                                          GHC.Types.True
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               $dVector1 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               x :: n = GHC.Num.fromInteger @ n w 1
                                             } in
                                             case Data.Vector.Generic.Base.elemseq
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector1
                                                    @ (Data.Vector.Unboxed.Base.Vector n)
                                                    (GHC.Err.undefined
                                                       @ 'GHC.Types.LiftedRep
                                                       @ (Data.Vector.Unboxed.Base.Vector n)
                                                       (GHC.Stack.Types.PushCallStack
                                                          (GHC.CString.unpackCString# "undefined"#)
                                                          (GHC.Stack.Types.SrcLoc
                                                             (GHC.CString.unpackCString#
                                                                "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                             (GHC.CString.unpackCString#
                                                                "Data.Vector.Generic"#)
                                                             (GHC.CString.unpackCString#
                                                                "./Data/Vector/Generic.hs"#)
                                                             (GHC.Types.I# 514#)
                                                             (GHC.Types.I# 24#)
                                                             (GHC.Types.I# 514#)
                                                             (GHC.Types.I# 33#))
                                                          GHC.Stack.Types.EmptyCallStack)
                                                         `cast`
                                                       (Sym (GHC.Classes.N:IP[0]
                                                                 <"callStack">_N
                                                                 <GHC.Stack.Types.CallStack>_N)))
                                                    x
                                                    (case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Unboxed.Base.Vector
                                                                   n #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             let {
                                                               $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                              (Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector)
                                                                              n
                                                               = Data.Vector.Generic.Base.$p1Vector
                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                   @ n
                                                                   $dVector1
                                                             } in
                                                             case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (GHC.ST.ST
                                                                          GHC.Prim.RealWorld)
                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                        @ GHC.Prim.RealWorld)
                                                                     (GHC.Types.I# 1#))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R)
                                                                    s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Bool
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Bool) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild1 {
                                                                    GHC.Types.False -> (# s8, z1 #)
                                                                    GHC.Types.True
                                                                    -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                               @ (Data.Vector.Generic.Base.Mutable
                                                                                    Data.Vector.Unboxed.Base.Vector)
                                                                               @ n
                                                                               (Data.Vector.Generic.Base.$p1Vector
                                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                                  @ n
                                                                                  $dVector1)
                                                                               @ (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld)
                                                                               (Control.Monad.Primitive.$fPrimMonadST
                                                                                  @ GHC.Prim.RealWorld)
                                                                               (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                                  @ n
                                                                                  $dMVector
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  z1
                                                                                  (GHC.Types.I# 1#)
                                                                                  ipv5)
                                                                               (GHC.Types.I# 0#)
                                                                               x)
                                                                              `cast`
                                                                            (GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <()>_R)
                                                                              s8 of ds2 { (#,#) ipv1 ipv7 ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 1#))
                                                                          GHC.Types.False)
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         ipv1 } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     GHC.Types.True)
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                             (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                @ Data.Vector.Unboxed.Base.Vector
                                                                @ n
                                                                $dVector1
                                                                @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                   @ GHC.Prim.RealWorld)
                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                   @ n
                                                                   $dMVector
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   (GHC.Types.I# 0#)
                                                                   ipv7
                                                                   ipv5))
                                                               `cast`
                                                             (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Vector.Unboxed.Base.Vector
                                                                     n>_R)
                                                               ipv6 } }) of ds1 { (#,#) ipv1 ipv2 ->
                                                     ipv2 }) of v2 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v2 of n1 { GHC.Types.I# ipv ->
                                             case HBLAS.IO.Vector.$whelperSymLowSq
                                                    @ n
                                                    w
                                                    w1
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2
                                                    ww3 of v1 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v1 of n2 { GHC.Types.I# ipv1 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 ipv) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> let {
                                                                 $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                (Data.Vector.Generic.Base.Mutable
                                                                                   Data.Vector.Unboxed.Base.Vector)
                                                                                n
                                                                 = Data.Vector.Generic.Base.$p1Vector
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector
                                                               } in
                                                               case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                       @ n
                                                                       $dMVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (GHC.Types.I# x1))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n>_R)
                                                                      s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                              n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Unboxed.Base.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                $dVector
                                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                   @ n
                                                                                   $dMVector
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                   z1
                                                                                   m1
                                                                                   ipv5))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv2 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v2)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v2))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v1))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                               (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     ipv7
                                                                     ipv5))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Unboxed.Base.Vector
                                                                       n>_R)
                                                                 ipv6 } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                             ipv3 } } } } } }) -}
2215bd374716b213388a1d883fb7c9c2
  $whelperSymLowTri ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#)
                                          (ww3 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=# ww ww2) of wild {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<# ww ww3) of wild1 {
                                               GHC.Types.False -> Data.Vector.Unboxed.empty @ n w1
                                               GHC.Types.True
                                               -> let {
                                                    $dVector :: Data.Vector.Generic.Base.Vector
                                                                  Data.Vector.Unboxed.Base.Vector n
                                                    = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                                  } in
                                                  let {
                                                    $dVector1 :: Data.Vector.Generic.Base.Vector
                                                                   Data.Vector.Unboxed.Base.Vector n
                                                    = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                                  } in
                                                  let {
                                                    x :: n = GHC.Num.fromInteger @ n w 0
                                                  } in
                                                  case Data.Vector.Generic.Base.elemseq
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ n
                                                         $dVector1
                                                         @ (Data.Vector.Unboxed.Base.Vector n)
                                                         (GHC.Err.undefined
                                                            @ 'GHC.Types.LiftedRep
                                                            @ (Data.Vector.Unboxed.Base.Vector n)
                                                            (GHC.Stack.Types.PushCallStack
                                                               (GHC.CString.unpackCString#
                                                                  "undefined"#)
                                                               (GHC.Stack.Types.SrcLoc
                                                                  (GHC.CString.unpackCString#
                                                                     "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                                  (GHC.CString.unpackCString#
                                                                     "Data.Vector.Generic"#)
                                                                  (GHC.CString.unpackCString#
                                                                     "./Data/Vector/Generic.hs"#)
                                                                  (GHC.Types.I# 514#)
                                                                  (GHC.Types.I# 24#)
                                                                  (GHC.Types.I# 514#)
                                                                  (GHC.Types.I# 33#))
                                                               GHC.Stack.Types.EmptyCallStack)
                                                              `cast`
                                                            (Sym (GHC.Classes.N:IP[0]
                                                                      <"callStack">_N
                                                                      <GHC.Stack.Types.CallStack>_N)))
                                                         x
                                                         (case GHC.Magic.runRW#
                                                                 @ ('GHC.Types.TupleRep
                                                                      '['GHC.Types.TupleRep '[],
                                                                        'GHC.Types.LiftedRep])
                                                                 @ (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      Data.Vector.Unboxed.Base.Vector
                                                                        n #)
                                                                 (\ (s1 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld)[OneShot] ->
                                                                  let {
                                                                    $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                   (Data.Vector.Generic.Base.Mutable
                                                                                      Data.Vector.Unboxed.Base.Vector)
                                                                                   n
                                                                    = Data.Vector.Generic.Base.$p1Vector
                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                        @ n
                                                                        $dVector1
                                                                  } in
                                                                  case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                          @ (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                          @ n
                                                                          $dMVector
                                                                          @ (GHC.ST.ST
                                                                               GHC.Prim.RealWorld)
                                                                          (Control.Monad.Primitive.$fPrimMonadST
                                                                             @ GHC.Prim.RealWorld)
                                                                          (GHC.Types.I# 1#))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               n>_R)
                                                                         s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                                  letrec {
                                                                    foldlM'_loop :: GHC.Types.SPEC
                                                                                    -> GHC.Types.Int
                                                                                    -> GHC.Types.Bool
                                                                                    -> GHC.ST.ST
                                                                                         GHC.Prim.RealWorld
                                                                                         GHC.Types.Int
                                                                      {- Arity: 3 -}
                                                                    = \ (ds4 :: GHC.Types.SPEC)
                                                                        (z :: GHC.Types.Int)
                                                                        (s7 :: GHC.Types.Bool) ->
                                                                      case ds4 of ds5 { DEFAULT ->
                                                                      case z of z1 { GHC.Types.I# ipv6 ->
                                                                      (\ (s8 :: GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld) ->
                                                                       case s7 of wild2 {
                                                                         GHC.Types.False
                                                                         -> (# s8, z1 #)
                                                                         GHC.Types.True
                                                                         -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                    @ (Data.Vector.Generic.Base.Mutable
                                                                                         Data.Vector.Unboxed.Base.Vector)
                                                                                    @ n
                                                                                    (Data.Vector.Generic.Base.$p1Vector
                                                                                       @ Data.Vector.Unboxed.Base.Vector
                                                                                       @ n
                                                                                       $dVector1)
                                                                                    @ (GHC.ST.ST
                                                                                         GHC.Prim.RealWorld)
                                                                                    (Control.Monad.Primitive.$fPrimMonadST
                                                                                       @ GHC.Prim.RealWorld)
                                                                                    (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                                       @ n
                                                                                       $dMVector
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       z1
                                                                                       (GHC.Types.I#
                                                                                          1#)
                                                                                       ipv5)
                                                                                    (GHC.Types.I#
                                                                                       0#)
                                                                                    x)
                                                                                   `cast`
                                                                                 (GHC.ST.N:ST[0]
                                                                                      <GHC.Prim.RealWorld>_N
                                                                                      <()>_R)
                                                                                   s8 of ds2 { (#,#) ipv1 ipv7 ->
                                                                            (foldlM'_loop
                                                                               GHC.Types.SPEC
                                                                               (GHC.Types.I#
                                                                                  (GHC.Prim.+#
                                                                                     ipv6
                                                                                     1#))
                                                                               GHC.Types.False)
                                                                              `cast`
                                                                            (GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <GHC.Types.Int>_R)
                                                                              ipv1 } })
                                                                        `cast`
                                                                      (Sym (GHC.ST.N:ST[0]
                                                                                <GHC.Prim.RealWorld>_N
                                                                                <GHC.Types.Int>_R)) } }
                                                                  } in
                                                                  case (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I# 0#)
                                                                          GHC.Types.True)
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                                  (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector1
                                                                     @ (GHC.ST.ST
                                                                          GHC.Prim.RealWorld)
                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                        @ GHC.Prim.RealWorld)
                                                                     (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                        @ (Data.Vector.Generic.Base.Mutable
                                                                             Data.Vector.Unboxed.Base.Vector)
                                                                        @ n
                                                                        $dMVector
                                                                        @ (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                        (GHC.Types.I# 0#)
                                                                        ipv7
                                                                        ipv5))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Vector.Unboxed.Base.Vector
                                                                          n>_R)
                                                                    ipv6 } }) of ds1 { (#,#) ipv1 ipv2 ->
                                                          ipv2 }) of v2 { DEFAULT ->
                                                  case Data.Vector.Generic.Base.basicLength
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ n
                                                         $dVector
                                                         v2 of n1 { GHC.Types.I# ipv ->
                                                  case HBLAS.IO.Vector.$whelperSymLowTri
                                                         @ n
                                                         w
                                                         w1
                                                         (GHC.Prim.+# ww 1#)
                                                         (GHC.Prim.+# ww1 1#)
                                                         ww2
                                                         ww3 of v1 { DEFAULT ->
                                                  case Data.Vector.Generic.Base.basicLength
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ n
                                                         $dVector
                                                         v1 of n2 { GHC.Types.I# ipv1 ->
                                                  case GHC.Magic.runRW#
                                                         @ ('GHC.Types.TupleRep
                                                              '['GHC.Types.TupleRep '[],
                                                                'GHC.Types.LiftedRep])
                                                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              Data.Vector.Unboxed.Base.Vector n #)
                                                         (\ (s1 :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld)[OneShot] ->
                                                          let {
                                                            x1 :: GHC.Prim.Int#
                                                            = GHC.Prim.+# ipv ipv1
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv) of wild4 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<#
                                                                         x1
                                                                         ipv1) of wild5 {
                                                                 GHC.Types.False
                                                                 -> let {
                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                     n
                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                          @ Data.Vector.Unboxed.Base.Vector
                                                                          @ n
                                                                          $dVector
                                                                    } in
                                                                    case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                            @ (Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector)
                                                                            @ n
                                                                            $dMVector
                                                                            @ (GHC.ST.ST
                                                                                 GHC.Prim.RealWorld)
                                                                            (Control.Monad.Primitive.$fPrimMonadST
                                                                               @ GHC.Prim.RealWorld)
                                                                            (GHC.Types.I# x1))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                                 n>_R)
                                                                           s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                                    letrec {
                                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                                      -> GHC.Types.Int
                                                                                      -> Data.Either.Either
                                                                                           GHC.Types.Bool
                                                                                           GHC.Types.Bool
                                                                                      -> GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           GHC.Types.Int
                                                                        {- Arity: 3 -}
                                                                      = \ (ds4 :: GHC.Types.SPEC)
                                                                          (z :: GHC.Types.Int)
                                                                          (s7 :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool) ->
                                                                        case ds4 of ds5 { DEFAULT ->
                                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                                        (\ (s8 :: GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld) ->
                                                                         let {
                                                                           $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Unboxed.Base.Vector
                                                                                   n
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       GHC.Types.Int #)
                                                                             <join 2> {- Arity: 2 -}
                                                                           = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        Data.Vector.Unboxed.Base.Vector
                                                                                        n)[OneShot]
                                                                               (s' :: Data.Either.Either
                                                                                        GHC.Types.Bool
                                                                                        GHC.Types.Bool)[OneShot] ->
                                                                             case x2 of wild2 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                             case (f1
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld)
                                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                                        @ GHC.Prim.RealWorld)
                                                                                     $dVector
                                                                                     (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                        @ (Data.Vector.Generic.Base.Mutable
                                                                                             Data.Vector.Unboxed.Base.Vector)
                                                                                        @ n
                                                                                        $dMVector
                                                                                        @ (Control.Monad.Primitive.PrimState
                                                                                             (GHC.ST.ST
                                                                                                GHC.Prim.RealWorld))
                                                                                        z1
                                                                                        m1
                                                                                        ipv5))
                                                                                    `cast`
                                                                                  (GHC.ST.N:ST[0]
                                                                                       <GHC.Prim.RealWorld>_N
                                                                                       <()>_R)
                                                                                    s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                             (foldlM'_loop
                                                                                GHC.Types.SPEC
                                                                                (case m1 of wild6 { GHC.Types.I# y ->
                                                                                 GHC.Types.I#
                                                                                   (GHC.Prim.+#
                                                                                      ipv6
                                                                                      y) })
                                                                                s')
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)
                                                                               ipv2 } }
                                                                         } in
                                                                         case s7 of wild2 {
                                                                           Data.Either.Left sa
                                                                           -> case sa of wild3 {
                                                                                GHC.Types.False
                                                                                -> (foldlM'_loop
                                                                                      GHC.Types.SPEC
                                                                                      z1
                                                                                      (Data.Either.Right
                                                                                         @ GHC.Types.Bool
                                                                                         @ GHC.Types.Bool
                                                                                         GHC.Types.True))
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <GHC.Types.Int>_R)
                                                                                     s8
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                                        @ n
                                                                                        (Data.Vector.Generic.Base.basicLength
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           v2)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Unboxed.Base.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Unboxed.Base.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           mv
                                                                                           v2))
                                                                                     (Data.Either.Left
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) }
                                                                           Data.Either.Right sb
                                                                           -> case sb of wild3 {
                                                                                GHC.Types.False
                                                                                -> (# s8, z1 #)
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Unboxed.Base.Vector
                                                                                        @ n
                                                                                        (Data.Vector.Generic.Base.basicLength
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           v1)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Unboxed.Base.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Unboxed.Base.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                                           @ n
                                                                                           $dVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           mv
                                                                                           v1))
                                                                                     (Data.Either.Right
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) } })
                                                                          `cast`
                                                                        (Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)) } }
                                                                    } in
                                                                    case (foldlM'_loop
                                                                            GHC.Types.SPEC
                                                                            (GHC.Types.I# 0#)
                                                                            (Data.Either.Left
                                                                               @ GHC.Types.Bool
                                                                               @ GHC.Types.Bool
                                                                               GHC.Types.True))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <GHC.Types.Int>_R)
                                                                           ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                                    (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                       @ Data.Vector.Unboxed.Base.Vector
                                                                       @ n
                                                                       $dVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                          @ (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                          @ n
                                                                          $dMVector
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          (GHC.Types.I# 0#)
                                                                          ipv7
                                                                          ipv5))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Unboxed.Base.Vector
                                                                            n>_R)
                                                                      ipv6 } }
                                                                 GHC.Types.True
                                                                 -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                           x1
                                                                    ret_ty (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                                n #)
                                                                    of {} }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                                  ipv3 } } } } } }
                                          GHC.Types.True
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               $dVector1 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w1
                                             } in
                                             let {
                                               x :: n = GHC.Num.fromInteger @ n w 1
                                             } in
                                             case Data.Vector.Generic.Base.elemseq
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector1
                                                    @ (Data.Vector.Unboxed.Base.Vector n)
                                                    (GHC.Err.undefined
                                                       @ 'GHC.Types.LiftedRep
                                                       @ (Data.Vector.Unboxed.Base.Vector n)
                                                       (GHC.Stack.Types.PushCallStack
                                                          (GHC.CString.unpackCString# "undefined"#)
                                                          (GHC.Stack.Types.SrcLoc
                                                             (GHC.CString.unpackCString#
                                                                "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                             (GHC.CString.unpackCString#
                                                                "Data.Vector.Generic"#)
                                                             (GHC.CString.unpackCString#
                                                                "./Data/Vector/Generic.hs"#)
                                                             (GHC.Types.I# 514#)
                                                             (GHC.Types.I# 24#)
                                                             (GHC.Types.I# 514#)
                                                             (GHC.Types.I# 33#))
                                                          GHC.Stack.Types.EmptyCallStack)
                                                         `cast`
                                                       (Sym (GHC.Classes.N:IP[0]
                                                                 <"callStack">_N
                                                                 <GHC.Stack.Types.CallStack>_N)))
                                                    x
                                                    (case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Unboxed.Base.Vector
                                                                   n #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             let {
                                                               $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                              (Data.Vector.Generic.Base.Mutable
                                                                                 Data.Vector.Unboxed.Base.Vector)
                                                                              n
                                                               = Data.Vector.Generic.Base.$p1Vector
                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                   @ n
                                                                   $dVector1
                                                             } in
                                                             case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (GHC.ST.ST
                                                                          GHC.Prim.RealWorld)
                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                        @ GHC.Prim.RealWorld)
                                                                     (GHC.Types.I# 1#))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          n>_R)
                                                                    s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Bool
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Bool) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild1 {
                                                                    GHC.Types.False -> (# s8, z1 #)
                                                                    GHC.Types.True
                                                                    -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                               @ (Data.Vector.Generic.Base.Mutable
                                                                                    Data.Vector.Unboxed.Base.Vector)
                                                                               @ n
                                                                               (Data.Vector.Generic.Base.$p1Vector
                                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                                  @ n
                                                                                  $dVector1)
                                                                               @ (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld)
                                                                               (Control.Monad.Primitive.$fPrimMonadST
                                                                                  @ GHC.Prim.RealWorld)
                                                                               (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                                  @ n
                                                                                  $dMVector
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  z1
                                                                                  (GHC.Types.I# 1#)
                                                                                  ipv5)
                                                                               (GHC.Types.I# 0#)
                                                                               x)
                                                                              `cast`
                                                                            (GHC.ST.N:ST[0]
                                                                                 <GHC.Prim.RealWorld>_N
                                                                                 <()>_R)
                                                                              s8 of ds2 { (#,#) ipv1 ipv7 ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 1#))
                                                                          GHC.Types.False)
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         ipv1 } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     GHC.Types.True)
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                             (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                @ Data.Vector.Unboxed.Base.Vector
                                                                @ n
                                                                $dVector1
                                                                @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                   @ GHC.Prim.RealWorld)
                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                   @ n
                                                                   $dMVector
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   (GHC.Types.I# 0#)
                                                                   ipv7
                                                                   ipv5))
                                                               `cast`
                                                             (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <Data.Vector.Unboxed.Base.Vector
                                                                     n>_R)
                                                               ipv6 } }) of ds1 { (#,#) ipv1 ipv2 ->
                                                     ipv2 }) of v2 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v2 of n1 { GHC.Types.I# ipv ->
                                             case HBLAS.IO.Vector.$whelperSymLowTri
                                                    @ n
                                                    w
                                                    w1
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2
                                                    ww3 of v1 { DEFAULT ->
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    v1 of n2 { GHC.Types.I# ipv1 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 ipv) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> let {
                                                                 $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                (Data.Vector.Generic.Base.Mutable
                                                                                   Data.Vector.Unboxed.Base.Vector)
                                                                                n
                                                                 = Data.Vector.Generic.Base.$p1Vector
                                                                     @ Data.Vector.Unboxed.Base.Vector
                                                                     @ n
                                                                     $dVector
                                                               } in
                                                               case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                       @ (Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector)
                                                                       @ n
                                                                       $dMVector
                                                                       @ (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)
                                                                       (Control.Monad.Primitive.$fPrimMonadST
                                                                          @ GHC.Prim.RealWorld)
                                                                       (GHC.Types.I# x1))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <Data.Vector.Generic.Base.Mutable
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                            (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                            n>_R)
                                                                      s1 of ds1 { (#,#) ipv4 ipv5 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Unboxed.Base.Vector
                                                                              n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Unboxed.Base.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                $dVector
                                                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                                   @ (Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Unboxed.Base.Vector)
                                                                                   @ n
                                                                                   $dMVector
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                   z1
                                                                                   m1
                                                                                   ipv5))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds2 { (#,#) ipv2 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv2 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v2)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v2))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Unboxed.Base.Vector
                                                                                   @ n
                                                                                   (Data.Vector.Generic.Base.basicLength
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      v1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Unboxed.Base.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Base.basicUnsafeCopy
                                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                                      @ n
                                                                                      $dVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      mv
                                                                                      v1))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv4 of ds2 { (#,#) ipv6 ipv7 ->
                                                               (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  (Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ (Data.Vector.Generic.Base.Mutable
                                                                          Data.Vector.Unboxed.Base.Vector)
                                                                     @ n
                                                                     $dMVector
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     ipv7
                                                                     ipv5))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Unboxed.Base.Vector
                                                                       n>_R)
                                                                 ipv6 } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                           n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {} }) of ds1 { (#,#) ipv2 ipv3 ->
                                             ipv3 } } } } } }) -}
f7a4f9e75d8421228a2b3daab6c67f94
  createFlatMatrix ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int -> GHC.Types.Int -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,A,A,C(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateFlatMatrix @ n w w1 ww1 ww3 } }) -}
e7e9b0ec951a689d5e190731f09d13bd
  createSymLowSq ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int -> GHC.Types.Int -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymLowSq @ n w w1 ww1 ww3 } }) -}
ceafe05f77a6d214451c2fee817bcc11
  createSymLowTri ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int -> GHC.Types.Int -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymLowTri @ n w w1 ww1 ww3 } }) -}
3fc940b96f6462548ad303a1406db9e3
  createVec0 ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(S(LLLLLLLC(C(C(S))))L),1*U(1*U(1*U(A,C(C1(C1(U))),A,1*C1(C1(U)),A,A,A,A,A,1*C1(C1(C1(U))),A,A,A),1*C1(C1(U)),A,A,A,A,A,1*C1(C1(C1(U)))),A)><S,1*U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   (n1 :: GHC.Types.Int) ->
                 case n1 of n2 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum 0
                 } in
                 Data.Vector.Generic.Base.elemseq
                   @ Data.Vector.Unboxed.Base.Vector
                   @ n
                   $dVector
                   @ (Data.Vector.Unboxed.Base.Vector n)
                   (GHC.Err.undefined
                      @ 'GHC.Types.LiftedRep
                      @ (Data.Vector.Unboxed.Base.Vector n)
                      (GHC.Stack.Types.PushCallStack
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                         (GHC.Stack.Types.SrcLoc
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "Data.Vector.Generic"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                            (GHC.Types.I# 520#)
                            (GHC.Types.I# 26#)
                            (GHC.Types.I# 520#)
                            (GHC.Types.I# 35#))
                         GHC.Stack.Types.EmptyCallStack)
                        `cast`
                      (Sym (GHC.Classes.N:IP[0]
                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                   x
                   (Data.Vector.Generic.new
                      @ Data.Vector.Unboxed.Base.Vector
                      @ n
                      $dVector
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         $dVector
                         (Data.Vector.Fusion.Bundle.Monadic.replicate
                            @ Data.Vector.Fusion.Util.Id
                            @ n
                            @ Data.Vector.Unboxed.Base.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            n2
                            x))) }) -}
b023283626c5f0a66ed317cadfd427f6
  createVecX ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 5,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(SL),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 case w4 of ww4 { GHC.Types.I# ww5 ->
                 HBLAS.IO.Vector.$wcreateVecX @ n w w1 ww1 ww3 ww5 } } }) -}
c62957b6dbfc3a120302cd37628022ab
  createVecX' ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(S(LLLLLLLC(C(C(S))))L),1*U(1*U(1*U(A,C(C1(C1(U))),A,1*C1(C1(U)),A,A,A,A,A,1*C1(C1(C1(U))),A,A,A),1*C1(C1(U)),A,A,A,A,A,1*C1(C1(C1(U)))),A)><S,1*U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   (n1 :: GHC.Types.Int) ->
                 case n1 of n2 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum 1
                 } in
                 Data.Vector.Generic.Base.elemseq
                   @ Data.Vector.Unboxed.Base.Vector
                   @ n
                   $dVector
                   @ (Data.Vector.Unboxed.Base.Vector n)
                   (GHC.Err.undefined
                      @ 'GHC.Types.LiftedRep
                      @ (Data.Vector.Unboxed.Base.Vector n)
                      (GHC.Stack.Types.PushCallStack
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                         (GHC.Stack.Types.SrcLoc
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "Data.Vector.Generic"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                            (GHC.Types.I# 520#)
                            (GHC.Types.I# 26#)
                            (GHC.Types.I# 520#)
                            (GHC.Types.I# 35#))
                         GHC.Stack.Types.EmptyCallStack)
                        `cast`
                      (Sym (GHC.Classes.N:IP[0]
                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                   x
                   (Data.Vector.Generic.new
                      @ Data.Vector.Unboxed.Base.Vector
                      @ n
                      $dVector
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         $dVector
                         (Data.Vector.Fusion.Bundle.Monadic.replicate
                            @ Data.Vector.Fusion.Util.Id
                            @ n
                            @ Data.Vector.Unboxed.Base.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            n2
                            x))) }) -}
31cb52f62ad75cf435636f8cc58ac868
  helperSymLowSq ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 case w4 of ww4 { GHC.Types.I# ww5 ->
                 case w5 of ww6 { GHC.Types.I# ww7 ->
                 HBLAS.IO.Vector.$whelperSymLowSq
                   @ n
                   w
                   w1
                   ww1
                   ww3
                   ww5
                   ww7 } } } }) -}
78a6e0003df05dfae93a466647282068
  helperSymLowTri ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><S(S(S(LLLC(C(S))LLLLLLLLL)LLLLLLL)L),U(U(U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),A,A,C(C1(C1(U))),C(C1(C1(U)))),A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 case w4 of ww4 { GHC.Types.I# ww5 ->
                 case w5 of ww6 { GHC.Types.I# ww7 ->
                 HBLAS.IO.Vector.$whelperSymLowTri
                   @ n
                   w
                   w1
                   ww1
                   ww3
                   ww5
                   ww7 } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

