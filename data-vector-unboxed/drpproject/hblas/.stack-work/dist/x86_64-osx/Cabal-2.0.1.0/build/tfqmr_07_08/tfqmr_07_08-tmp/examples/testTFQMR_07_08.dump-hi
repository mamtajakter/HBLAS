
==================== FINAL INTERFACE ====================
2020-05-19 14:14:34.963663 UTC

interface main:Main 8022
  interface hash: f4a8090060bfa611ba0c58b8bd55c612
  ABI hash: 927e96a09dde60a7c4dfa4d9bfbc37c8
  export-list hash: bcce1861b541ed8a61dd5a1b6fbb1b16
  orphan hash: 318e59755926c1029feb9fee1849dde1
  flag hash: 30eb651424240b59da413f8bad8fe22d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.repeatNTimes
  Main.round4dp
  Main.tfqmr
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 hblas-0.0.0.0 integer-gmp-1.0.1.0 loop-0.3.0
                      matrix-0.3.5.0 primitive-0.6.3.0 time-1.8.0.2 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hblas-0.0.0.0:HBLAS.IO.Vector 1ca05aa8e8d0fa442ef76065603b5be9
import  -/  hblas-0.0.0.0:HBLAS.Level1 87eeefad4c50d402fa80f0d5b2fa68a6
import  -/  hblas-0.0.0.0:HBLAS.Level2 a1f0027acbef17c4e6bc5166c4cb6e67
import  -/  time-1.8.0.2:Data.Time 94c4b97ca0ea17df29bc6210fb9e1b2b
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a07e012374f68f0eec645405302031bb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9bbc4ffee03d887b4be58f486cb9ae4c
import  -/  vector-0.12.0.1:Data.Vector.Unboxed 479ef134bc2fb9694c4fd3a0ff5e0b8d
import  -/  vector-0.12.0.1:Data.Vector.Unboxed.Base a76f45e9ab7025ce49d09aaa12d53b96
197c1d5cd5536d4eb2ef9c3514a0bee5
  $s$wcreateFlatMatrix ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Unboxed.Base.Vector GHC.Types.Float
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [~] -}
66d3e2d01e5a9d3cc21a61564f29a675
  $s$wcreateVecX ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Float
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [~] -}
2b1eefedfe00b0f6d32e1c30b8b181df
  $s$wgemvFlatHelper ::
    Data.Vector.Unboxed.Base.Vector GHC.Types.Float
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Float
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Float
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Float
  {- Arity: 5,
     Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)><S,1*U(U,U,U)><S,U><S,U>,
     Inline: [~] -}
4037c972197a0c88217594c9989277ee
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
0f1a95d29eb129d139de800e53a25678
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c9f0ae6af767c92c7e2d66814cef1e4f
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
60b96fad6a4543de1c2e9acde552af27
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger# w1 Main.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             Main.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.I# ww1 -> Main.$wf ww1 w1 }
                        GHC.Types.True -> 1# } }
                   GHC.Types.True -> case Main.$s^1 ret_ty GHC.Prim.Int# of {} } }) -}
c38fb36d62e37c1de337e4c727d1b3e9
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
4af1e39e959f077d70b6a0fa03037c5a
  $wround4dp :: GHC.Real.RealFrac n => n -> n
  {- Arity: 2,
     Strictness: <S(LS(LC(C(S))LL)LLLLL),U(1*U(1*U(A,A,1*C1(C1(U)),A,A,A,1*C1(U)),A,A),1*U(A,1*C1(C1(U)),A,C(U)),A,A,1*C1(C1(U)),A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ n (w :: GHC.Real.RealFrac n) (w1 :: n) ->
                 let {
                   $dFractional :: GHC.Real.Fractional n = GHC.Real.$p2RealFrac @ n w
                 } in
                 GHC.Real./
                   @ n
                   $dFractional
                   (let {
                      $dReal :: GHC.Real.Real n = GHC.Real.$p1RealFrac @ n w
                    } in
                    let {
                      $dNum :: GHC.Num.Num n = GHC.Real.$p1Real @ n $dReal
                    } in
                    GHC.Num.fromInteger
                      @ n
                      $dNum
                      (GHC.Real.round
                         @ n
                         w
                         @ GHC.Integer.Type.Integer
                         GHC.Real.$fIntegralInteger
                         (GHC.Num.*
                            @ n
                            $dNum
                            w1
                            (GHC.Real.fromRational @ n $dFractional Main.round4dp1))))
                   (GHC.Real.fromRational @ n $dFractional Main.round4dp1)) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c6bcaef0b8d3eb893a9235f4daa4925f
  repeatNTimes ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) =>
    t -> m a -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ t
                   @ m :: * -> *
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($dNum :: GHC.Num.Num t)
                   ($dEq :: GHC.Classes.Eq t)
                   (eta :: t)
                   (eta1 :: m a) ->
                 let {
                   lvl60 :: t = GHC.Num.fromInteger @ t $dNum Main.repeatNTimes1
                 } in
                 let {
                   lvl61 :: m () = GHC.Base.return @ m $dMonad @ () GHC.Tuple.()
                 } in
                 let {
                   lvl62 :: t = GHC.Num.fromInteger @ t $dNum Main.$s^2
                 } in
                 letrec {
                   repeatNTimes2 :: t -> m a -> m ()
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (ds :: t) (ds1 :: m a) ->
                     case GHC.Classes.== @ t $dEq ds lvl62 of wild {
                       GHC.Types.False
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ a
                            @ ()
                            ds1
                            (repeatNTimes2 (GHC.Num.- @ t $dNum ds lvl60) ds1)
                       GHC.Types.True -> lvl61 }
                 } in
                 repeatNTimes2 eta eta1) -}
69e9c734f6c0a09c11d4d6d6ffaf7332
  repeatNTimes1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
bc2740b174f29c493f7225923bcad861
  round4dp ::
    (GHC.Num.Num n, GHC.Real.RealFrac n, GHC.Real.Fractional n,
     GHC.Classes.Ord n, GHC.Float.Floating n) =>
    n -> n
  {- Arity: 6,
     Strictness: <L,A><S(LS(LC(C(S))LL)LLLLL),U(U(U(A,A,C(C1(U)),A,A,A,C(U)),A,A),U(A,C(C1(U)),A,C(U)),A,A,C(C1(U)),A,A)><L,A><L,A><L,A><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.RealFrac n)
                   (w2 :: GHC.Real.Fractional n)
                   (w3 :: GHC.Classes.Ord n)
                   (w4 :: GHC.Float.Floating n)
                   (w5 :: n) ->
                 Main.$wround4dp @ n w1 w5) -}
eeae0c0a69279030e3d717e18bbeaeb1
  round4dp1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.round4dp2
                   Main.repeatNTimes1) -}
d26793f60ac535d06c4551d197f7f726
  round4dp2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10000) -}
7a428288764df2b7528918e06f79b161
  tfqmr ::
    (GHC.Num.Num n, GHC.Real.Fractional n, GHC.Classes.Ord n,
     GHC.Float.Floating n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> n
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 9,
     Strictness: <L,A><S(S(LLC(C(S))LLLC(S))LLL),1*U(1*U(C(C1(U)),C(C1(U)),C(C1(U)),1*C1(U),A,A,C(U)),A,A,A)><S(S(C(C(S))L)LLLLLLL),U(1*U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A)><S(LLLLC(S)LLLLLLLLLLLLLLLLLL),U(1*U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(S(LLLC(S(S))LLLC(C(C(S))))L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,C(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,U><S,U><S,U><S,1*U>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (9, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dFractional :: GHC.Real.Fractional n)
                   ($dOrd :: GHC.Classes.Ord n)
                   ($dFloating :: GHC.Float.Floating n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n) ->
                 let {
                   $dFractional1 :: GHC.Real.Fractional n
                   = GHC.Float.$p1Floating @ n $dFloating
                 } in
                 let {
                   $dEq :: GHC.Classes.Eq n = GHC.Classes.$p1Ord @ n $dOrd
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (a :: Data.Vector.Unboxed.Base.Vector n)
                   (b :: Data.Vector.Unboxed.Base.Vector n)
                   (vec0 :: Data.Vector.Unboxed.Base.Vector n)
                   (tol :: n) ->
                 case a of a1 { DEFAULT ->
                 case b of b1 { DEFAULT ->
                 case vec0 of vec1 { DEFAULT ->
                 case tol of tol1 { DEFAULT ->
                 case GHC.Num.fromInteger @ n $dNum1 0 of m { DEFAULT ->
                 case GHC.Num.fromInteger @ n $dNum1 0 of eta { DEFAULT ->
                 case GHC.Num.fromInteger @ n $dNum1 0 of theta { DEFAULT ->
                 case GHC.Num.fromInteger @ n $dNum1 1 of k { DEFAULT ->
                 let {
                   $dNum2 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional1
                 } in
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            b1))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum2 0
                 } in
                 case HBLAS.Level2.gemvFlatHelper
                        @ n
                        $dNum2
                        $dUnbox
                        $dFractional1
                        a1
                        (Data.Vector.Generic.Base.elemseq
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector
                           @ (Data.Vector.Unboxed.Base.Vector n)
                           (GHC.Err.undefined
                              @ 'GHC.Types.LiftedRep
                              @ (Data.Vector.Unboxed.Base.Vector n)
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b2 -> GHC.CString.unpackFoldrCString# @ b2 "undefined"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b2 ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b2
                                          "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b2 ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b2
                                          "Data.Vector.Generic"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b2 ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b2
                                          "./Data/Vector/Generic.hs"#))
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 26#)
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 35#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           x
                           (Data.Vector.Generic.new
                              @ Data.Vector.Unboxed.Base.Vector
                              @ n
                              $dVector
                              (Data.Vector.Generic.New.unstream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector
                                 (Data.Vector.Fusion.Bundle.Monadic.replicate
                                    @ Data.Vector.Fusion.Util.Id
                                    @ n
                                    @ Data.Vector.Unboxed.Base.Vector
                                    Data.Vector.Fusion.Util.$fMonadId
                                    n1
                                    x))))
                        b1
                        (GHC.Types.I# 0#)
                        n1 of v { DEFAULT ->
                 let {
                   $dFractional2 :: GHC.Real.Fractional n
                   = GHC.Float.$p1Floating @ n $dFloating
                 } in
                 let {
                   $dNum3 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional2
                 } in
                 let {
                   f1 :: n -> n -> n = GHC.Num.+ @ n $dNum3
                 } in
                 case GHC.Float.sqrt
                        @ n
                        $dFloating
                        (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                           @ Data.Vector.Fusion.Util.Id
                           @ n
                           @ n
                           @ Data.Vector.Unboxed.Base.Vector
                           Data.Vector.Fusion.Util.$fMonadId
                           (\ (a2 :: n) (b2 :: n)[OneShot] -> f1 a2 b2)
                             `cast`
                           (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                           (GHC.Num.fromInteger @ n $dNum3 0)
                           (Data.Vector.Fusion.Bundle.inplace
                              @ n
                              @ n
                              @ Data.Vector.Unboxed.Base.Vector
                              (\ @ m1 :: * -> * ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m1
                                 @ n
                                 @ n
                                 $dMonad
                                 (let {
                                    f3 :: n -> m1 n = GHC.Base.return @ m1 $dMonad @ n
                                  } in
                                  \ (x1 :: n) -> f3 (GHC.Num.* @ n $dNum3 x1 x1)))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 b1)))
                          `cast`
                        (Data.Vector.Fusion.Util.N:Id[0] <n>_R) of tau { DEFAULT ->
                 case GHC.Num.* @ n $dNum1 tau tau of rho { DEFAULT ->
                 letrec {
                   qmr :: n
                          -> (n, Data.Vector.Unboxed.Base.Vector n,
                              Data.Vector.Unboxed.Base.Vector n,
                              Data.Vector.Unboxed.Base.Vector n,
                              Data.Vector.Unboxed.Base.Vector n,
                              Data.Vector.Unboxed.Base.Vector n,
                              Data.Vector.Unboxed.Base.Vector n, n, n, n, n,
                              Data.Vector.Unboxed.Base.Vector n)
                          -> Data.Vector.Unboxed.Base.Vector n
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: n)
                       (ds1 :: (n, Data.Vector.Unboxed.Base.Vector n,
                                Data.Vector.Unboxed.Base.Vector n,
                                Data.Vector.Unboxed.Base.Vector n,
                                Data.Vector.Unboxed.Base.Vector n,
                                Data.Vector.Unboxed.Base.Vector n,
                                Data.Vector.Unboxed.Base.Vector n, n, n, n, n,
                                Data.Vector.Unboxed.Base.Vector n)) ->
                     case GHC.Classes.==
                            @ n
                            $dEq
                            ds
                            (GHC.Num.fromInteger @ n $dNum1 100) of wild {
                       GHC.Types.False
                       -> case ds of ds2 { DEFAULT ->
                          case ds1 of wild1 { (,,,,,,,,,,,) m' r' w' y1' d' v' u1' theta' eta' tau' rho' x' ->
                          case m' of m'1 { DEFAULT ->
                          case r' of r'1 { DEFAULT ->
                          case w' of w'1 { DEFAULT ->
                          case y1' of y1'1 { DEFAULT ->
                          case d' of d'1 { DEFAULT ->
                          case v' of v'1 { DEFAULT ->
                          case u1' of u1'1 { DEFAULT ->
                          case theta' of theta'1 { DEFAULT ->
                          case eta' of eta'1 { DEFAULT ->
                          case tau' of tau'1 { DEFAULT ->
                          case rho' of rho'1 { DEFAULT ->
                          case x' of x'1 { DEFAULT ->
                          case GHC.Num.fromInteger @ n $dNum1 1 of j { DEFAULT ->
                          case GHC.Num.+
                                 @ n
                                 $dNum1
                                 (GHC.Num.-
                                    @ n
                                    $dNum1
                                    (GHC.Num.* @ n $dNum1 (GHC.Num.fromInteger @ n $dNum1 2) ds2)
                                    (GHC.Num.fromInteger @ n $dNum1 2))
                                 j of mm' { DEFAULT ->
                          let {
                            f :: n -> n -> n = GHC.Num.+ @ n $dNum1
                          } in
                          let {
                            f2 :: n -> n -> n = GHC.Num.* @ n $dNum1
                          } in
                          case (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                  @ Data.Vector.Fusion.Util.Id
                                  @ n
                                  @ n
                                  @ Data.Vector.Unboxed.Base.Vector
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (\ (a2 :: n) (b2 :: n)[OneShot] -> f a2 b2)
                                    `cast`
                                  (<n>_R
                                   ->_R <n>_R
                                   ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                  (GHC.Num.fromInteger @ n $dNum1 0)
                                  (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                     @ Data.Vector.Fusion.Util.Id
                                     @ n
                                     @ n
                                     @ n
                                     @ Data.Vector.Unboxed.Base.Vector
                                     Data.Vector.Fusion.Util.$fMonadId
                                     (\ (a2 :: n) (b2 :: n)[OneShot] -> f2 a2 b2)
                                       `cast`
                                     (<n>_R
                                      ->_R <n>_R
                                      ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                     (Data.Vector.Generic.stream
                                        @ Data.Vector.Unboxed.Base.Vector
                                        @ n
                                        (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                        r'1)
                                     (Data.Vector.Generic.stream
                                        @ Data.Vector.Unboxed.Base.Vector
                                        @ n
                                        (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                        v'1)))
                                 `cast`
                               (Data.Vector.Fusion.Util.N:Id[0] <n>_R) of sigma { DEFAULT ->
                          case GHC.Real./ @ n $dFractional1 rho'1 sigma of alpha { DEFAULT ->
                          case GHC.Num.*
                                 @ n
                                 $dNum1
                                 (GHC.Num.negate @ n $dNum1 (GHC.Num.fromInteger @ n $dNum1 1))
                                 alpha of alpha1 { DEFAULT ->
                          let {
                            $dVector2 :: Data.Vector.Generic.Base.Vector
                                           Data.Vector.Unboxed.Base.Vector n
                            = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                          } in
                          case Data.Vector.Generic.new
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector2
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Unboxed.Base.Vector
                                    @ n
                                    $dVector2
                                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n
                                       @ n
                                       @ n
                                       @ Data.Vector.Unboxed.Base.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                        GHC.Num.+ @ n $dNum1 b2 (GHC.Num.* @ n $dNum1 alpha1 a2))
                                         `cast`
                                       (<n>_R
                                        ->_R <n>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          u1'1)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          w'1))) of ww' { DEFAULT ->
                          case GHC.Real./
                                 @ n
                                 $dFractional1
                                 (let {
                                    $dFractional3 :: GHC.Real.Fractional n
                                    = GHC.Float.$p1Floating @ n $dFloating
                                  } in
                                  let {
                                    $dNum4 :: GHC.Num.Num n
                                    = GHC.Real.$p1Fractional @ n $dFractional3
                                  } in
                                  let {
                                    f3 :: n -> n -> n = GHC.Num.+ @ n $dNum4
                                  } in
                                  GHC.Float.sqrt
                                    @ n
                                    $dFloating
                                    (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n
                                       @ n
                                       @ Data.Vector.Unboxed.Base.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n) (b2 :: n)[OneShot] -> f3 a2 b2)
                                         `cast`
                                       (<n>_R
                                        ->_R <n>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                       (GHC.Num.fromInteger @ n $dNum4 0)
                                       (Data.Vector.Fusion.Bundle.inplace
                                          @ n
                                          @ n
                                          @ Data.Vector.Unboxed.Base.Vector
                                          (\ @ m1 :: * -> *
                                             ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                                           Data.Vector.Fusion.Stream.Monadic.mapM
                                             @ m1
                                             @ n
                                             @ n
                                             $dMonad
                                             (let {
                                                f4 :: n -> m1 n = GHC.Base.return @ m1 $dMonad @ n
                                              } in
                                              \ (x1 :: n) -> f4 (GHC.Num.* @ n $dNum4 x1 x1)))
                                          (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                          (Data.Vector.Generic.stream
                                             @ Data.Vector.Unboxed.Base.Vector
                                             @ n
                                             (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                             ww')))
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                 tau'1 of ttheta' { DEFAULT ->
                          case GHC.Real./
                                 @ n
                                 $dFractional1
                                 (GHC.Num.fromInteger @ n $dNum1 1)
                                 (GHC.Float.sqrt
                                    @ n
                                    $dFloating
                                    (GHC.Num.+
                                       @ n
                                       $dNum1
                                       (GHC.Num.fromInteger @ n $dNum1 1)
                                       (GHC.Num.* @ n $dNum1 ttheta' ttheta'))) of c { DEFAULT ->
                          case GHC.Num.*
                                 @ n
                                 $dNum1
                                 (GHC.Num.* @ n $dNum1 tau'1 ttheta')
                                 c of ttau' { DEFAULT ->
                          case GHC.Real./
                                 @ n
                                 $dFractional1
                                 (GHC.Num.* @ n $dNum1 (GHC.Num.* @ n $dNum1 theta'1 theta'1) eta'1)
                                 alpha of alpha2 { DEFAULT ->
                          let {
                            $dVector1 :: Data.Vector.Generic.Base.Vector
                                           Data.Vector.Unboxed.Base.Vector n
                            = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                          } in
                          case Data.Vector.Generic.new
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector1
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Unboxed.Base.Vector
                                    @ n
                                    $dVector1
                                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n
                                       @ n
                                       @ n
                                       @ Data.Vector.Unboxed.Base.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                        GHC.Num.+ @ n $dNum1 b2 (GHC.Num.* @ n $dNum1 alpha2 a2))
                                         `cast`
                                       (<n>_R
                                        ->_R <n>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          d'1)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          y1'1))) of dd' { DEFAULT ->
                          case GHC.Num.*
                                 @ n
                                 $dNum1
                                 (GHC.Num.* @ n $dNum1 c c)
                                 alpha of eeta' { DEFAULT ->
                          let {
                            $dVector3 :: Data.Vector.Generic.Base.Vector
                                           Data.Vector.Unboxed.Base.Vector n
                            = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                          } in
                          case Data.Vector.Generic.new
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector3
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Unboxed.Base.Vector
                                    @ n
                                    $dVector3
                                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ n
                                       @ n
                                       @ n
                                       @ Data.Vector.Unboxed.Base.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                        GHC.Num.+ @ n $dNum1 b2 (GHC.Num.* @ n $dNum1 eeta' a2))
                                         `cast`
                                       (<n>_R
                                        ->_R <n>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          dd')
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          x'1))) of xx' { DEFAULT ->
                          case GHC.Classes.<=
                                 @ n
                                 $dOrd
                                 (GHC.Num.*
                                    @ n
                                    $dNum1
                                    ttau'
                                    (GHC.Float.sqrt
                                       @ n
                                       $dFloating
                                       (GHC.Num.+
                                          @ n
                                          $dNum1
                                          mm'
                                          (GHC.Num.fromInteger @ n $dNum1 1))))
                                 tol1 of wild2 {
                            GHC.Types.False
                            -> case GHC.Num.*
                                      @ n
                                      $dNum1
                                      (GHC.Num.negate @ n $dNum1 (GHC.Num.fromInteger @ n $dNum1 1))
                                      alpha of alpha3 { DEFAULT ->
                               let {
                                 $dVector4 :: Data.Vector.Generic.Base.Vector
                                                Data.Vector.Unboxed.Base.Vector n
                                 = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                               } in
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector4
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Unboxed.Base.Vector
                                         @ n
                                         $dVector4
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n
                                            @ n
                                            @ n
                                            @ Data.Vector.Unboxed.Base.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                             GHC.Num.+
                                               @ n
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n $dNum1 alpha3 a2))
                                              `cast`
                                            (<n>_R
                                             ->_R <n>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               v'1)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               y1'1))) of yy2 { DEFAULT ->
                               let {
                                 $dNum4 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional1
                               } in
                               case (Data.Vector.Fusion.Bundle.Monadic.length
                                       @ Data.Vector.Fusion.Util.Id
                                       @ Data.Vector.Unboxed.Base.Vector
                                       @ n
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                          @ Data.Vector.Fusion.Util.Id
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ n
                                          Data.Vector.Fusion.Util.$fMonadId
                                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                          yy2))
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <GHC.Types.Int>_R) of n2 { GHC.Types.I# ipv1 ->
                               let {
                                 $dVector5 :: Data.Vector.Generic.Base.Vector
                                                Data.Vector.Unboxed.Base.Vector n
                                 = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                               } in
                               let {
                                 x1 :: n = GHC.Num.fromInteger @ n $dNum4 0
                               } in
                               case HBLAS.Level2.gemvFlatHelper
                                      @ n
                                      $dNum4
                                      $dUnbox
                                      $dFractional1
                                      a1
                                      (Data.Vector.Generic.Base.elemseq
                                         @ Data.Vector.Unboxed.Base.Vector
                                         @ n
                                         $dVector5
                                         @ (Data.Vector.Unboxed.Base.Vector n)
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.LiftedRep
                                            @ (Data.Vector.Unboxed.Base.Vector n)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b2 ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b2
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b2 ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b2
                                                        "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b2 ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b2
                                                        "Data.Vector.Generic"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b2 ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b2
                                                        "./Data/Vector/Generic.hs"#))
                                                  (GHC.Types.I# 520#)
                                                  (GHC.Types.I# 26#)
                                                  (GHC.Types.I# 520#)
                                                  (GHC.Types.I# 35#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                         x1
                                         (Data.Vector.Generic.new
                                            @ Data.Vector.Unboxed.Base.Vector
                                            @ n
                                            $dVector5
                                            (Data.Vector.Generic.New.unstream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               $dVector5
                                               (Data.Vector.Fusion.Bundle.Monadic.replicate
                                                  @ Data.Vector.Fusion.Util.Id
                                                  @ n
                                                  @ Data.Vector.Unboxed.Base.Vector
                                                  Data.Vector.Fusion.Util.$fMonadId
                                                  n2
                                                  x1))))
                                      yy2
                                      (GHC.Types.I# 0#)
                                      n2 of uu2 { DEFAULT ->
                               case GHC.Num.*
                                      @ n
                                      $dNum1
                                      (GHC.Num.negate @ n $dNum1 (GHC.Num.fromInteger @ n $dNum1 1))
                                      alpha of alpha4 { DEFAULT ->
                               let {
                                 $dVector6 :: Data.Vector.Generic.Base.Vector
                                                Data.Vector.Unboxed.Base.Vector n
                                 = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                               } in
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector6
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Unboxed.Base.Vector
                                         @ n
                                         $dVector6
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n
                                            @ n
                                            @ n
                                            @ Data.Vector.Unboxed.Base.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                             GHC.Num.+
                                               @ n
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n $dNum1 alpha4 a2))
                                              `cast`
                                            (<n>_R
                                             ->_R <n>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               uu2)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               ww'))) of ww { DEFAULT ->
                               case GHC.Real./
                                      @ n
                                      $dFractional1
                                      (let {
                                         $dFractional3 :: GHC.Real.Fractional n
                                         = GHC.Float.$p1Floating @ n $dFloating
                                       } in
                                       let {
                                         $dNum5 :: GHC.Num.Num n
                                         = GHC.Real.$p1Fractional @ n $dFractional3
                                       } in
                                       let {
                                         f3 :: n -> n -> n = GHC.Num.+ @ n $dNum5
                                       } in
                                       GHC.Float.sqrt
                                         @ n
                                         $dFloating
                                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n
                                            @ n
                                            @ Data.Vector.Unboxed.Base.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n) (b2 :: n)[OneShot] -> f3 a2 b2)
                                              `cast`
                                            (<n>_R
                                             ->_R <n>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                            (GHC.Num.fromInteger @ n $dNum5 0)
                                            (Data.Vector.Fusion.Bundle.inplace
                                               @ n
                                               @ n
                                               @ Data.Vector.Unboxed.Base.Vector
                                               (\ @ m1 :: * -> *
                                                  ($dMonad :: GHC.Base.Monad m1)[OneShot] ->
                                                Data.Vector.Fusion.Stream.Monadic.mapM
                                                  @ m1
                                                  @ n
                                                  @ n
                                                  $dMonad
                                                  (let {
                                                     f4 :: n -> m1 n
                                                     = GHC.Base.return @ m1 $dMonad @ n
                                                   } in
                                                   \ (x2 :: n) -> f4 (GHC.Num.* @ n $dNum5 x2 x2)))
                                               (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Unboxed.Base.Vector
                                                  @ n
                                                  (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                  ww)))
                                           `cast`
                                         (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                      ttau' of ttheta { DEFAULT ->
                               case GHC.Real./
                                      @ n
                                      $dFractional1
                                      (GHC.Num.fromInteger @ n $dNum1 1)
                                      (GHC.Float.sqrt
                                         @ n
                                         $dFloating
                                         (GHC.Num.+
                                            @ n
                                            $dNum1
                                            (GHC.Num.fromInteger @ n $dNum1 1)
                                            (GHC.Num.*
                                               @ n
                                               $dNum1
                                               ttheta
                                               ttheta))) of cc { DEFAULT ->
                               case GHC.Num.*
                                      @ n
                                      $dNum1
                                      (GHC.Num.* @ n $dNum1 cc cc)
                                      alpha of eeta { DEFAULT ->
                               case GHC.Num.*
                                      @ n
                                      $dNum1
                                      (GHC.Num.* @ n $dNum1 ttau' ttheta)
                                      cc of ttau { DEFAULT ->
                               case GHC.Real./
                                      @ n
                                      $dFractional1
                                      (GHC.Num.*
                                         @ n
                                         $dNum1
                                         (GHC.Num.* @ n $dNum1 ttheta' ttheta')
                                         eeta')
                                      alpha of alpha5 { DEFAULT ->
                               let {
                                 $dVector7 :: Data.Vector.Generic.Base.Vector
                                                Data.Vector.Unboxed.Base.Vector n
                                 = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                               } in
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector7
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Unboxed.Base.Vector
                                         @ n
                                         $dVector7
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n
                                            @ n
                                            @ n
                                            @ Data.Vector.Unboxed.Base.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                             GHC.Num.+
                                               @ n
                                               $dNum1
                                               b2
                                               (GHC.Num.* @ n $dNum1 alpha5 a2))
                                              `cast`
                                            (<n>_R
                                             ->_R <n>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               dd')
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               yy2))) of dd { DEFAULT ->
                               let {
                                 $dVector8 :: Data.Vector.Generic.Base.Vector
                                                Data.Vector.Unboxed.Base.Vector n
                                 = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                               } in
                               case Data.Vector.Generic.new
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector8
                                      (Data.Vector.Generic.New.unstream
                                         @ Data.Vector.Unboxed.Base.Vector
                                         @ n
                                         $dVector8
                                         (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n
                                            @ n
                                            @ n
                                            @ Data.Vector.Unboxed.Base.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                             GHC.Num.+ @ n $dNum1 b2 (GHC.Num.* @ n $dNum1 eeta a2))
                                              `cast`
                                            (<n>_R
                                             ->_R <n>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               dd)
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               xx'))) of xx { DEFAULT ->
                               case GHC.Num.fromInteger @ n $dNum1 2 of jj { DEFAULT ->
                               case GHC.Num.+
                                      @ n
                                      $dNum1
                                      (GHC.Num.-
                                         @ n
                                         $dNum1
                                         (GHC.Num.*
                                            @ n
                                            $dNum1
                                            (GHC.Num.fromInteger @ n $dNum1 2)
                                            ds2)
                                         (GHC.Num.fromInteger @ n $dNum1 2))
                                      jj of mm { DEFAULT ->
                               case GHC.Classes.<=
                                      @ n
                                      $dOrd
                                      (GHC.Num.*
                                         @ n
                                         $dNum1
                                         ttau
                                         (GHC.Float.sqrt
                                            @ n
                                            $dFloating
                                            (GHC.Num.+
                                               @ n
                                               $dNum1
                                               mm
                                               (GHC.Num.fromInteger @ n $dNum1 1))))
                                      tol1 of wild3 {
                                 GHC.Types.False
                                 -> let {
                                      f3 :: n -> n -> n = GHC.Num.+ @ n $dNum1
                                    } in
                                    let {
                                      f4 :: n -> n -> n = GHC.Num.* @ n $dNum1
                                    } in
                                    case (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                            @ Data.Vector.Fusion.Util.Id
                                            @ n
                                            @ n
                                            @ Data.Vector.Unboxed.Base.Vector
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (\ (a2 :: n) (b2 :: n)[OneShot] -> f3 a2 b2)
                                              `cast`
                                            (<n>_R
                                             ->_R <n>_R
                                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                            (GHC.Num.fromInteger @ n $dNum1 0)
                                            (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                               @ Data.Vector.Fusion.Util.Id
                                               @ n
                                               @ n
                                               @ n
                                               @ Data.Vector.Unboxed.Base.Vector
                                               Data.Vector.Fusion.Util.$fMonadId
                                               (\ (a2 :: n) (b2 :: n)[OneShot] -> f4 a2 b2)
                                                 `cast`
                                               (<n>_R
                                                ->_R <n>_R
                                                ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Unboxed.Base.Vector
                                                  @ n
                                                  (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                  r'1)
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Unboxed.Base.Vector
                                                  @ n
                                                  (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                  ww)))
                                           `cast`
                                         (Data.Vector.Fusion.Util.N:Id[0]
                                              <n>_R) of rhon { DEFAULT ->
                                    case GHC.Real./
                                           @ n
                                           $dFractional1
                                           rhon
                                           rho'1 of beta { DEFAULT ->
                                    let {
                                      $dVector9 :: Data.Vector.Generic.Base.Vector
                                                     Data.Vector.Unboxed.Base.Vector n
                                      = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                                    } in
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Unboxed.Base.Vector
                                           @ n
                                           $dVector9
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Unboxed.Base.Vector
                                              @ n
                                              $dVector9
                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ n
                                                 @ n
                                                 @ n
                                                 @ Data.Vector.Unboxed.Base.Vector
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    b2
                                                    (GHC.Num.* @ n $dNum1 beta a2))
                                                   `cast`
                                                 (<n>_R
                                                  ->_R <n>_R
                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                    yy2)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                    ww))) of yy1 { DEFAULT ->
                                    let {
                                      $dNum5 :: GHC.Num.Num n
                                      = GHC.Real.$p1Fractional @ n $dFractional1
                                    } in
                                    case (Data.Vector.Fusion.Bundle.Monadic.length
                                            @ Data.Vector.Fusion.Util.Id
                                            @ Data.Vector.Unboxed.Base.Vector
                                            @ n
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                               @ Data.Vector.Fusion.Util.Id
                                               @ Data.Vector.Unboxed.Base.Vector
                                               @ n
                                               Data.Vector.Fusion.Util.$fMonadId
                                               (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                               yy1))
                                           `cast`
                                         (Data.Vector.Fusion.Util.N:Id[0]
                                              <GHC.Types.Int>_R) of n3 { GHC.Types.I# ipv2 ->
                                    let {
                                      $dVector10 :: Data.Vector.Generic.Base.Vector
                                                      Data.Vector.Unboxed.Base.Vector n
                                      = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                                    } in
                                    let {
                                      x2 :: n = GHC.Num.fromInteger @ n $dNum5 0
                                    } in
                                    case HBLAS.Level2.gemvFlatHelper
                                           @ n
                                           $dNum5
                                           $dUnbox
                                           $dFractional1
                                           a1
                                           (Data.Vector.Generic.Base.elemseq
                                              @ Data.Vector.Unboxed.Base.Vector
                                              @ n
                                              $dVector10
                                              @ (Data.Vector.Unboxed.Base.Vector n)
                                              (GHC.Err.undefined
                                                 @ 'GHC.Types.LiftedRep
                                                 @ (Data.Vector.Unboxed.Base.Vector n)
                                                 (GHC.Stack.Types.PushCallStack
                                                    (GHC.Base.build
                                                       @ GHC.Types.Char
                                                       (\ @ b2 ->
                                                        GHC.CString.unpackFoldrCString#
                                                          @ b2
                                                          "undefined"#))
                                                    (GHC.Stack.Types.SrcLoc
                                                       (GHC.Base.build
                                                          @ GHC.Types.Char
                                                          (\ @ b2 ->
                                                           GHC.CString.unpackFoldrCString#
                                                             @ b2
                                                             "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                                       (GHC.Base.build
                                                          @ GHC.Types.Char
                                                          (\ @ b2 ->
                                                           GHC.CString.unpackFoldrCString#
                                                             @ b2
                                                             "Data.Vector.Generic"#))
                                                       (GHC.Base.build
                                                          @ GHC.Types.Char
                                                          (\ @ b2 ->
                                                           GHC.CString.unpackFoldrCString#
                                                             @ b2
                                                             "./Data/Vector/Generic.hs"#))
                                                       (GHC.Types.I# 520#)
                                                       (GHC.Types.I# 26#)
                                                       (GHC.Types.I# 520#)
                                                       (GHC.Types.I# 35#))
                                                    GHC.Stack.Types.EmptyCallStack)
                                                   `cast`
                                                 (Sym (GHC.Classes.N:IP[0]
                                                           <"callStack">_N
                                                           <GHC.Stack.Types.CallStack>_N)))
                                              x2
                                              (Data.Vector.Generic.new
                                                 @ Data.Vector.Unboxed.Base.Vector
                                                 @ n
                                                 $dVector10
                                                 (Data.Vector.Generic.New.unstream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector10
                                                    (Data.Vector.Fusion.Bundle.Monadic.replicate
                                                       @ Data.Vector.Fusion.Util.Id
                                                       @ n
                                                       @ Data.Vector.Unboxed.Base.Vector
                                                       Data.Vector.Fusion.Util.$fMonadId
                                                       n3
                                                       x2))))
                                           yy1
                                           (GHC.Types.I# 0#)
                                           n3 of uu1 { DEFAULT ->
                                    let {
                                      $dVector11 :: Data.Vector.Generic.Base.Vector
                                                      Data.Vector.Unboxed.Base.Vector n
                                      = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                                    } in
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Unboxed.Base.Vector
                                           @ n
                                           $dVector11
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Unboxed.Base.Vector
                                              @ n
                                              $dVector11
                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ n
                                                 @ n
                                                 @ n
                                                 @ Data.Vector.Unboxed.Base.Vector
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    b2
                                                    (GHC.Num.* @ n $dNum1 beta a2))
                                                   `cast`
                                                 (<n>_R
                                                  ->_R <n>_R
                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                    v'1)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                    uu2))) of t { DEFAULT ->
                                    let {
                                      $dVector12 :: Data.Vector.Generic.Base.Vector
                                                      Data.Vector.Unboxed.Base.Vector n
                                      = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                                    } in
                                    case Data.Vector.Generic.new
                                           @ Data.Vector.Unboxed.Base.Vector
                                           @ n
                                           $dVector12
                                           (Data.Vector.Generic.New.unstream
                                              @ Data.Vector.Unboxed.Base.Vector
                                              @ n
                                              $dVector12
                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ n
                                                 @ n
                                                 @ n
                                                 @ Data.Vector.Unboxed.Base.Vector
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 (\ (a2 :: n) (b2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    b2
                                                    (GHC.Num.* @ n $dNum1 beta a2))
                                                   `cast`
                                                 (<n>_R
                                                  ->_R <n>_R
                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                    t)
                                                 (Data.Vector.Generic.stream
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                                    uu1))) of vv { DEFAULT ->
                                    qmr
                                      (GHC.Num.+ @ n $dNum1 ds2 (GHC.Num.fromInteger @ n $dNum1 1))
                                      (mm, r'1, ww, yy1, dd, vv, uu1, ttheta, eeta, ttau, rhon,
                                       xx) } } } } } } }
                                 GHC.Types.True -> xx } } } } } } } } } } } } } } } }
                            GHC.Types.True
                            -> xx' } } } } } } } } } } } } } } } } } } } } } } } } } } } }
                       GHC.Types.True
                       -> case ds1 of wild1 { (,,,,,,,,,,,) ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 x' ->
                          x' } }
                 } in
                 qmr
                   k
                   (m, b1, b1, b1, vec1, v, v, theta, eta, tau, rho,
                    vec1) } } } } } } } } } } } }) -}
"SPEC/Main $wcreateFlatMatrix @ Float" [orphan] [0] forall (w1 :: Data.Vector.Unboxed.Base.Unbox
                                                                    GHC.Types.Float)
                                                           (w :: GHC.Num.Num GHC.Types.Float)
  HBLAS.IO.Vector.$wcreateFlatMatrix @ GHC.Types.Float w w1
  = Main.$s$wcreateFlatMatrix
"SPEC/Main $wcreateVecX @ Float" [orphan] [0] forall (w1 :: Data.Vector.Unboxed.Base.Unbox
                                                              GHC.Types.Float)
                                                     (w :: GHC.Num.Num GHC.Types.Float)
  HBLAS.IO.Vector.$wcreateVecX @ GHC.Types.Float w w1
  = Main.$s$wcreateVecX
"SPEC/Main $wgemvFlatHelper @ Float" [orphan] [0] forall (w1 :: GHC.Real.Fractional
                                                                  GHC.Types.Float)
                                                         (w :: Data.Vector.Unboxed.Base.Unbox
                                                                 GHC.Types.Float)
  HBLAS.Level2.$wgemvFlatHelper @ GHC.Types.Float w w1
  = Main.$s$wgemvFlatHelper
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

