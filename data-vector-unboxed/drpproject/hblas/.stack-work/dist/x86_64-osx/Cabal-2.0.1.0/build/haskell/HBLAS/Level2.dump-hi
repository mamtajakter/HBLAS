
==================== FINAL INTERFACE ====================
2020-05-31 21:53:01.364085 UTC

interface hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j:HBLAS.Level2 8022
  interface hash: 18c0f371d099acdb392279459f727676
  ABI hash: 5d99a7544bdc0d177c1e482a3bf2f3d2
  export-list hash: ecabc77939f98b145ece891fd4e783a4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e9ac704c35d890fa5e26b8bb3c9f12a7
  sig of: Nothing
  used TH splices: False
  where
exports:
  HBLAS.Level2.gemv
  HBLAS.Level2.gemvFlat
  HBLAS.Level2.gemvFlatHelper
  HBLAS.Level2.gemvFlatHelper2
  HBLAS.Level2.symv
  HBLAS.Level2.symvFlatHelper2
  HBLAS.Level2.symvLowerH
  HBLAS.Level2.symvLowerHFlatHelper
  HBLAS.Level2.symvUpperH
  HBLAS.Level2.symvUpperHFlatHelper
  HBLAS.Level2.trmv
  HBLAS.Level2.trmvHelper
  HBLAS.Level2.trmvLower
  HBLAS.Level2.trmvUpper
  HBLAS.Level2.trsv
  HBLAS.Level2.trsvHelper
  HBLAS.Level2.trsvLower
  HBLAS.Level2.trsvUpper
module dependencies: HBLAS.Level1
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 loop-0.3.0 matrix-0.3.5.0
                      primitive-0.6.3.0 transformers-0.5.2.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  HBLAS.Level1 e5a5f8e86bcdadfbf727a29482339dde
  exports: d6427fbb44e4769752ec04d4c68c80d8
  axpy 7154468e31c1d74b95d07dcb4af71dbb
  scal 42a4cb86f6aee67e32d2cbfaa3db650e
import  -/  matrix-0.3.5.0:Data.Matrix 26e07bbf230d6ad3e3caf27287213599
import  -/  vector-0.12.0.1:Data.Vector.Unboxed 479ef134bc2fb9694c4fd3a0ff5e0b8d
import  -/  vector-0.12.0.1:Data.Vector.Unboxed.Base a76f45e9ab7025ce49d09aaa12d53b96
addDependentFile "/Users/mamtajakter/.stack/programs/x86_64-osx/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
dcd481a959e968a8877d13131bd975b2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HBLAS.Level2.$trModule3
                   HBLAS.Level2.$trModule1) -}
27b2a3a84908b43962cb120a5b2baf5d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.Level2.$trModule2) -}
3ce99e7ab061fc4b931e4fa9ea39dac0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HBLAS.Level2"#) -}
0a73f6d8e2b3c111b5d825d7e5135de4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.Level2.$trModule4) -}
4ed83f8b6319eb5f790f893dd5f20705
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j"#) -}
bf9ca40a6c5e6d11f3875d79ec566d22
  $wgemvFlatHelper ::
    (Data.Vector.Unboxed.Base.Unbox n, GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 7,
     Strictness: <L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: Data.Vector.Unboxed.Base.Unbox n)
                                          (w1 :: GHC.Real.Fractional n)
                                          (w2 :: Data.Vector.Unboxed.Base.Vector n)
                                          (w3 :: Data.Vector.Unboxed.Base.Vector n)
                                          (w4 :: Data.Vector.Unboxed.Base.Vector n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        let {
                                          $dNum :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n w1
                                        } in
                                        case w2 of a { DEFAULT ->
                                        case w3 of x { DEFAULT ->
                                        case w4 of b { DEFAULT ->
                                        let {
                                          n1 :: GHC.Types.Int = GHC.Types.I# ww1
                                        } in
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.>=# ww ww1) of wild {
                                          GHC.Types.False
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             let {
                                               n2 :: GHC.Types.Int
                                               = Data.Vector.Generic.Base.basicLength
                                                   @ Data.Vector.Unboxed.Base.Vector
                                                   @ n
                                                   $dVector
                                                   a
                                             } in
                                             let {
                                               n' :: GHC.Types.Int
                                               = case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<=# ww1 0#) of wild2 {
                                                   GHC.Types.False -> n1
                                                   GHC.Types.True -> GHC.Types.I# 0# }
                                             } in
                                             case Data.Vector.Generic.Base.basicUnsafeSlice
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    (case n' of wild1 { GHC.Types.I# x1 ->
                                                     case n2 of wild2 { GHC.Types.I# y1 ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# x1 y1) of wild3 {
                                                       GHC.Types.False -> wild2
                                                       GHC.Types.True -> wild1 } } })
                                                    (case n2 of wild1 { GHC.Types.I# x1 ->
                                                     case n' of wild2 { GHC.Types.I# y ->
                                                     let {
                                                       y1 :: GHC.Prim.Int# = GHC.Prim.-# x1 y
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# 0# y1) of wild3 {
                                                       GHC.Types.False -> GHC.Types.I# 0#
                                                       GHC.Types.True -> GHC.Types.I# y1 } } })
                                                    a of newa { DEFAULT ->
                                             let {
                                               $dVector1 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicUnsafeSlice
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector1
                                                    (GHC.Types.I# 0#)
                                                    (case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# ww1 0#) of wild2 {
                                                       GHC.Types.False
                                                       -> case Data.Vector.Generic.Base.basicLength
                                                                 @ Data.Vector.Unboxed.Base.Vector
                                                                 @ n
                                                                 $dVector1
                                                                 a of wild1 { GHC.Types.I# y1 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<=# ww1 y1) of wild4 {
                                                            GHC.Types.False -> wild1
                                                            GHC.Types.True -> n1 } }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Generic.Base.basicLength
                                                                 @ Data.Vector.Unboxed.Base.Vector
                                                                 @ n
                                                                 $dVector1
                                                                 a of wild1 { GHC.Types.I# y1 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<=# 0# y1) of wild4 {
                                                            GHC.Types.False -> wild1
                                                            GHC.Types.True -> GHC.Types.I# 0# } } })
                                                    a of ai { DEFAULT ->
                                             let {
                                               f :: n -> n -> n = GHC.Num.+ @ n $dNum
                                             } in
                                             let {
                                               $dVector2 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector2
                                                    ai of n3 { GHC.Types.I# ipv ->
                                             let {
                                               $dVector3 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector3
                                                    b of n4 { GHC.Types.I# ipv1 ->
                                             letrec {
                                               foldlM'_loop :: GHC.Types.SPEC
                                                               -> n
                                                               -> (GHC.Types.Int, GHC.Types.Int,
                                                                   GHC.Base.Maybe n)
                                                               -> Data.Vector.Fusion.Util.Id n
                                                 {- Arity: 3 -}
                                               = \ (ds4 :: GHC.Types.SPEC)
                                                   (z1 :: n)
                                                   (s1 :: (GHC.Types.Int, GHC.Types.Int,
                                                           GHC.Base.Maybe n)) ->
                                                 case ds4 of ds5 { DEFAULT ->
                                                 case z1 of z2 { DEFAULT ->
                                                 case s1 of wild4 { (,,) sa sb ds11 ->
                                                 case ds11 of wild5 {
                                                   GHC.Base.Nothing
                                                   -> case sa of wild1 { GHC.Types.I# x1 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.>=# x1 ipv) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector2
                                                                  @ Data.Vector.Fusion.Util.Box
                                                                  Data.Vector.Fusion.Util.$fMonadBox
                                                                  ai
                                                                  wild1 of wild3 { Data.Vector.Fusion.Util.Box x2 ->
                                                           foldlM'_loop
                                                             GHC.Types.SPEC
                                                             z2
                                                             (GHC.Types.I# (GHC.Prim.+# x1 1#), sb,
                                                              GHC.Base.Just @ n x2) }
                                                        GHC.Types.True
                                                        -> z2
                                                             `cast`
                                                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n>_R)) } }
                                                   GHC.Base.Just x1
                                                   -> case sb of wild1 { GHC.Types.I# x2 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.>=# x2 ipv1) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector3
                                                                  @ Data.Vector.Fusion.Util.Box
                                                                  Data.Vector.Fusion.Util.$fMonadBox
                                                                  b
                                                                  wild1 of wild3 { Data.Vector.Fusion.Util.Box x3 ->
                                                           foldlM'_loop
                                                             GHC.Types.SPEC
                                                             (f z2 (GHC.Num.* @ n $dNum x1 x3))
                                                             (sa, GHC.Types.I# (GHC.Prim.+# x2 1#),
                                                              GHC.Base.Nothing @ n) }
                                                        GHC.Types.True
                                                        -> z2
                                                             `cast`
                                                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n>_R)) } } } } } }
                                             } in
                                             case (foldlM'_loop
                                                     GHC.Types.SPEC
                                                     (GHC.Num.fromInteger @ n $dNum 0)
                                                     (GHC.Types.I# 0#, GHC.Types.I# 0#,
                                                      GHC.Base.Nothing @ n))
                                                    `cast`
                                                  (Data.Vector.Fusion.Util.N:Id[0]
                                                       <n>_R) of xi { DEFAULT ->
                                             let {
                                               $dVector4 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             let {
                                               $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                              (Data.Vector.Generic.Base.Mutable
                                                                 Data.Vector.Unboxed.Base.Vector)
                                                              n
                                               = Data.Vector.Generic.Base.$p1Vector
                                                   @ Data.Vector.Unboxed.Base.Vector
                                                   @ n
                                                   $dVector4
                                             } in
                                             case (Data.Vector.Generic.Base.elemseq
                                                     @ Data.Vector.Unboxed.Base.Vector
                                                     @ n
                                                     (Data.Vector.Unboxed.Base.$p1Unbox @ n w)
                                                     @ (Data.Vector.Unboxed.Base.Vector
                                                          (GHC.Types.Int, n))
                                                     (GHC.Err.undefined
                                                        @ 'GHC.Types.LiftedRep
                                                        @ (Data.Vector.Unboxed.Base.Vector n)
                                                        (GHC.Stack.Types.PushCallStack
                                                           (GHC.CString.unpackCString# "undefined"#)
                                                           (GHC.Stack.Types.SrcLoc
                                                              (GHC.CString.unpackCString#
                                                                 "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                              (GHC.CString.unpackCString#
                                                                 "Data.Vector.Unboxed.Base"#)
                                                              (GHC.CString.unpackCString#
                                                                 "internal/unbox-tuple-instances"#)
                                                              (GHC.Types.I# 107#)
                                                              (GHC.Types.I# 22#)
                                                              (GHC.Types.I# 107#)
                                                              (GHC.Types.I# 31#))
                                                           GHC.Stack.Types.EmptyCallStack)
                                                          `cast`
                                                        (Sym (GHC.Classes.N:IP[0]
                                                                  <"callStack">_N
                                                                  <GHC.Stack.Types.CallStack>_N)))
                                                     xi
                                                     (case GHC.Magic.runRW#
                                                             @ ('GHC.Types.TupleRep
                                                                  '['GHC.Types.TupleRep '[],
                                                                    'GHC.Types.LiftedRep])
                                                             @ (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.Unboxed.Base.Vector
                                                                    (GHC.Types.Int, n) #)
                                                             (\ (s1 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                              case GHC.Prim.newByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     8#
                                                                     s1
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.ByteArray.MutableByteArray
                                                                                           (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld)))>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <Data.Primitive.ByteArray.MutableByteArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.ByteArray.MutableByteArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                              case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                      @ Data.Vector.Unboxed.Base.MVector
                                                                      @ n
                                                                      (Data.Vector.Unboxed.Base.$p2Unbox
                                                                         @ n
                                                                         w)
                                                                      @ (GHC.ST.ST
                                                                           GHC.Prim.RealWorld)
                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                         @ GHC.Prim.RealWorld)
                                                                      (GHC.Types.I# 1#))
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Vector.Unboxed.Base.MVector
                                                                           (Control.Monad.Primitive.PrimState
                                                                              (GHC.ST.ST
                                                                                 GHC.Prim.RealWorld))
                                                                           n>_R)
                                                                     ipv2
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:3
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (((GHC.Prim.State#
                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.ByteArray.MutableByteArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld)))>_R)
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.ByteArray.MutableByteArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)))>_R
                                                                                          ->_R GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R))))) of ds2 { (#,#) ipv4 ipv5 ->
                                                              letrec {
                                                                foldlM'_loop1 :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                  {- Arity: 3 -}
                                                                = \ (ds4 :: GHC.Types.SPEC)
                                                                    (z :: GHC.Types.Int)
                                                                    (s7 :: GHC.Types.Bool) ->
                                                                  case ds4 of ds5 { DEFAULT ->
                                                                  case z of z1 { GHC.Types.I# ipv6 ->
                                                                  (\ (s8 :: GHC.Prim.State#
                                                                              GHC.Prim.RealWorld) ->
                                                                   case s7 of wild1 {
                                                                     GHC.Types.False -> (# s8, z1 #)
                                                                     GHC.Types.True
                                                                     -> case ipv5 of dt { DEFAULT ->
                                                                        case Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                               @ Data.Vector.Unboxed.Base.MVector
                                                                               @ n
                                                                               (Data.Vector.Unboxed.Base.$p2Unbox
                                                                                  @ n
                                                                                  w)
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               z1
                                                                               (GHC.Types.I# 1#)
                                                                               dt of dt1 { DEFAULT ->
                                                                        case GHC.Prim.writeIntArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv3
                                                                               ipv6
                                                                               ww
                                                                               s8
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R
                                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R))
                                                                                              (((GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        <()>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R)))) of s'# { DEFAULT ->
                                                                        case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                @ Data.Vector.Unboxed.Base.MVector
                                                                                @ n
                                                                                (Data.Vector.Unboxed.Base.$p2Unbox
                                                                                   @ n
                                                                                   w)
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                dt1
                                                                                (GHC.Types.I# 0#)
                                                                                xi)
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s'#
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:3
                                                                                         (Nth:2
                                                                                              (Trans
                                                                                                   (((GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     ->_R ((#,#)
                                                                                                             <'GHC.Types.TupleRep
                                                                                                                '[]>_R
                                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                                             (GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             <()>_R)_R)
                                                                                                    ->_R <GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld
                                                                                                            ()>_R)
                                                                                                   (<GHC.ST.STRep
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R
                                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                        (foldlM'_loop1
                                                                           GHC.Types.SPEC
                                                                           (GHC.Types.I#
                                                                              (GHC.Prim.+# ipv6 1#))
                                                                           GHC.Types.False)
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv7 } } } } })
                                                                    `cast`
                                                                  (Sym (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)) } }
                                                              } in
                                                              case (foldlM'_loop1
                                                                      GHC.Types.SPEC
                                                                      (GHC.Types.I# 0#)
                                                                      GHC.Types.True)
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <GHC.Types.Int>_R)
                                                                     ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                                              case ipv5 of dt { DEFAULT ->
                                                              case ipv7 of dt1 { GHC.Types.I# dt2 ->
                                                              case Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ Data.Vector.Unboxed.Base.MVector
                                                                     @ n
                                                                     (Data.Vector.Unboxed.Base.$p2Unbox
                                                                        @ n
                                                                        w)
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     dt1
                                                                     dt of dt3 { DEFAULT ->
                                                              case GHC.Prim.unsafeFreezeByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     ipv3
                                                                     ipv6
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        Data.Primitive.ByteArray.ByteArray>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <Data.Primitive.ByteArray.ByteArray>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             Data.Primitive.ByteArray.ByteArray>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                              case (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                      @ n
                                                                      (Data.Vector.Unboxed.Base.$p1Unbox
                                                                         @ n
                                                                         w)
                                                                      @ (GHC.ST.ST
                                                                           GHC.Prim.RealWorld)
                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                         @ GHC.Prim.RealWorld)
                                                                      dt3
                                                                        `cast`
                                                                      (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld)>_N <n>_N))
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Vector.Unboxed.Base.Vector
                                                                           n>_R)
                                                                     ipv9
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:3
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (((GHC.Prim.State#
                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  Data.Primitive.ByteArray.ByteArray>_R)
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             Data.Primitive.ByteArray.ByteArray>_R
                                                                                          ->_R GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R))))) of ds5 { (#,#) ipv11 ipv12 ->
                                                              (# ipv11,
                                                                 case ipv12 of dt4 { DEFAULT ->
                                                                 (Data.Vector.Unboxed.Base.V_2
                                                                    @ GHC.Types.Int
                                                                    @ n
                                                                    dt2
                                                                    (Data.Vector.Primitive.Vector
                                                                       @ GHC.Types.Int
                                                                       0#
                                                                       dt2
                                                                       ipv10)
                                                                      `cast`
                                                                    (Trans
                                                                         (Sym (Data.Vector.Unboxed.Base.N:R:VectorInt[0]))
                                                                         (Sym (Data.Vector.Unboxed.Base.D:R:VectorInt0[0])))
                                                                    dt4)
                                                                   `cast`
                                                                 (Sym (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                                                                           <GHC.Types.Int>_N
                                                                           <n>_N)) } #) } } } } } } } }) of ds1 { (#,#) ipv2 ipv3 ->
                                                      ipv3 }))
                                                    `cast`
                                                  (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                                                       <GHC.Types.Int>_N
                                                       <n>_N) of nt { Data.Vector.Unboxed.Base.V_2 ipv2 ipv3 ipv4 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     case Data.Vector.Generic.Base.basicLength
                                                            @ Data.Vector.Unboxed.Base.Vector
                                                            @ n
                                                            $dVector4
                                                            x of wild1 { GHC.Types.I# x1 ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=# x1 0#) of wild2 {
                                                       GHC.Types.False
                                                       -> case Data.Vector.Internal.Check.$wcheckError
                                                                 @ (GHC.ST.ST
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Vector.Generic.Base.Mutable
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                         (Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               GHC.Prim.RealWorld))
                                                                         n))
                                                                 (GHC.CString.unpackCString#
                                                                    "./Data/Vector/Generic/Mutable.hs"#)
                                                                 585#
                                                                 Data.Vector.Internal.Check.Bounds
                                                                 (GHC.CString.unpackCString# "new"#)
                                                                 (Data.Vector.Internal.Check.checkLength_msg#
                                                                    x1)
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {}
                                                       GHC.Types.True
                                                       -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                  @ n
                                                                  $dMVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  wild1)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n>_R)
                                                                 s1 of ds1 { (#,#) ipv5 ipv6 ->
                                                          case (Data.Vector.Generic.Mutable.Base.basicInitialize
                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                  @ n
                                                                  $dMVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  ipv6)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv5 of ds { (#,#) ipv7 ipv8 ->
                                                          case ipv6
                                                                 `cast`
                                                               (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N) <n>_N) of nt1 { DEFAULT ->
                                                          case (Data.Vector.Generic.Base.basicUnsafeCopy
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector4
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  nt1
                                                                    `cast`
                                                                  (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)) <n>_N)
                                                                  x)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv7 of ds2 { (#,#) ipv9 ipv10 ->
                                                          let {
                                                            $dMVector1 :: Data.Vector.Generic.Mutable.Base.MVector
                                                                            (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                            n
                                                            = Data.Vector.Generic.Base.$p1Vector
                                                                @ Data.Vector.Unboxed.Base.Vector
                                                                @ n
                                                                $dVector4
                                                          } in
                                                          case Data.Vector.Generic.Mutable.Base.basicLength
                                                                 @ (Data.Vector.Generic.Base.Mutable
                                                                      Data.Vector.Unboxed.Base.Vector)
                                                                 @ n
                                                                 $dMVector1
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 nt1
                                                                   `cast`
                                                                 (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)) <n>_N) of n5 { GHC.Types.I# ipv11 ->
                                                          letrec {
                                                            consume_loop :: GHC.Types.SPEC
                                                                            -> GHC.Types.Int
                                                                            -> GHC.ST.ST
                                                                                 GHC.Prim.RealWorld
                                                                                 ()
                                                              {- Arity: 2 -}
                                                            = \ (ds4 :: GHC.Types.SPEC)
                                                                (s2 :: GHC.Types.Int) ->
                                                              case ds4 of ds5 { DEFAULT ->
                                                              (\ (s3 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld) ->
                                                               case s2 of wild3 { GHC.Types.I# x2 ->
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=#
                                                                         x2
                                                                         ipv2) of wild4 {
                                                                 GHC.Types.False
                                                                 -> case ipv3
                                                                           `cast`
                                                                         (Trans
                                                                              (Data.Vector.Unboxed.Base.D:R:VectorInt0[0])
                                                                              (Data.Vector.Unboxed.Base.N:R:VectorInt[0])) of wild5 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                                    case GHC.Prim.indexIntArray#
                                                                           dt2
                                                                           (GHC.Prim.+#
                                                                              dt
                                                                              x2) of wild6 { DEFAULT ->
                                                                    case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                           @ n
                                                                           (Data.Vector.Unboxed.Base.$p1Unbox
                                                                              @ n
                                                                              w)
                                                                           @ Data.Vector.Fusion.Util.Box
                                                                           Data.Vector.Fusion.Util.$fMonadBox
                                                                           ipv4
                                                                           wild3 of wild7 { Data.Vector.Fusion.Util.Box x3 ->
                                                                    let {
                                                                      file :: GHC.Prim.Addr#
                                                                      = "./Data/Vector/Generic/Mutable.hs"#
                                                                    } in
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.>=#
                                                                              wild6
                                                                              0#) of wild8 {
                                                                      GHC.Types.False
                                                                      -> case Data.Vector.Internal.Check.$wcheckError
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld
                                                                                     ())
                                                                                (GHC.CString.unpackCString#
                                                                                   file)
                                                                                845#
                                                                                Data.Vector.Internal.Check.Bounds
                                                                                (GHC.CString.unpackCString#
                                                                                   "update"#)
                                                                                (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                   wild6
                                                                                   ipv11)
                                                                         ret_ty (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                         of {}
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.tagToEnum#
                                                                                @ GHC.Types.Bool
                                                                                (GHC.Prim.<#
                                                                                   wild6
                                                                                   ipv11) of wild9 {
                                                                           GHC.Types.False
                                                                           -> case Data.Vector.Internal.Check.$wcheckError
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld
                                                                                          ())
                                                                                     (GHC.CString.unpackCString#
                                                                                        file)
                                                                                     845#
                                                                                     Data.Vector.Internal.Check.Bounds
                                                                                     (GHC.CString.unpackCString#
                                                                                        "update"#)
                                                                                     (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                        wild6
                                                                                        ipv11)
                                                                              ret_ty (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        () #)
                                                                              of {}
                                                                           GHC.Types.True
                                                                           -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Unboxed.Base.Vector)
                                                                                      @ n
                                                                                      $dMVector1
                                                                                      @ (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)
                                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                                         @ GHC.Prim.RealWorld)
                                                                                      nt1
                                                                                        `cast`
                                                                                      (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                           <GHC.Prim.RealWorld>_N)) <n>_N)
                                                                                      (GHC.Types.I#
                                                                                         wild6)
                                                                                      x3)
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R)
                                                                                     s3 of ds7 { (#,#) ipv12 ipv13 ->
                                                                              (consume_loop
                                                                                 GHC.Types.SPEC
                                                                                 (GHC.Types.I#
                                                                                    (GHC.Prim.+#
                                                                                       x2
                                                                                       1#)))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <()>_R)
                                                                                ipv12 } } } } } }
                                                                 GHC.Types.True
                                                                 -> (# s3, GHC.Tuple.() #) } })
                                                                `cast`
                                                              (Sym (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <()>_R)) }
                                                          } in
                                                          case (consume_loop
                                                                  GHC.Types.SPEC
                                                                  (GHC.Types.I# 0#))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv9 of ds4 { (#,#) ipv12 ipv13 ->
                                                          (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                             @ Data.Vector.Unboxed.Base.Vector
                                                             @ n
                                                             $dVector4
                                                             @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                             (Control.Monad.Primitive.$fPrimMonadST
                                                                @ GHC.Prim.RealWorld)
                                                             nt1
                                                               `cast`
                                                             (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)) <n>_N))
                                                            `cast`
                                                          (GHC.ST.N:ST[0]
                                                               <GHC.Prim.RealWorld>_N
                                                               <Data.Vector.Unboxed.Base.Vector
                                                                  n>_R)
                                                            ipv12 } } } } } } } }) of ds1 { (#,#) ipv5 ipv6 ->
                                             case ipv6 of new_x { DEFAULT ->
                                             HBLAS.Level2.$wgemvFlatHelper
                                               @ n
                                               w
                                               w1
                                               newa
                                               new_x
                                               b
                                               (GHC.Prim.+# ww 1#)
                                               ww1 } } } } } } } }
                                          GHC.Types.True -> x } } } }) -}
a51f4439d95227ac50c3b7ccf20b94f6
  $wsymvLowerHFlatHelper ::
    (Data.Vector.Unboxed.Base.Unbox n, GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 7,
     Strictness: <L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: Data.Vector.Unboxed.Base.Unbox n)
                                          (w1 :: GHC.Real.Fractional n)
                                          (w2 :: Data.Vector.Unboxed.Base.Vector n)
                                          (w3 :: Data.Vector.Unboxed.Base.Vector n)
                                          (w4 :: Data.Vector.Unboxed.Base.Vector n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        let {
                                          $dNum :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n w1
                                        } in
                                        case w2 of a { DEFAULT ->
                                        case w3 of x { DEFAULT ->
                                        case w4 of b { DEFAULT ->
                                        let {
                                          n1 :: GHC.Types.Int = GHC.Types.I# ww1
                                        } in
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.>=# ww ww1) of wild {
                                          GHC.Types.False
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             let {
                                               n2 :: GHC.Types.Int
                                               = Data.Vector.Generic.Base.basicLength
                                                   @ Data.Vector.Unboxed.Base.Vector
                                                   @ n
                                                   $dVector
                                                   a
                                             } in
                                             let {
                                               n' :: GHC.Types.Int
                                               = case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<=# ww1 0#) of wild2 {
                                                   GHC.Types.False -> n1
                                                   GHC.Types.True -> GHC.Types.I# 0# }
                                             } in
                                             case Data.Vector.Generic.Base.basicUnsafeSlice
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    (case n' of wild1 { GHC.Types.I# x1 ->
                                                     case n2 of wild2 { GHC.Types.I# y1 ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# x1 y1) of wild3 {
                                                       GHC.Types.False -> wild2
                                                       GHC.Types.True -> wild1 } } })
                                                    (case n2 of wild1 { GHC.Types.I# x1 ->
                                                     case n' of wild2 { GHC.Types.I# y ->
                                                     let {
                                                       y1 :: GHC.Prim.Int# = GHC.Prim.-# x1 y
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# 0# y1) of wild3 {
                                                       GHC.Types.False -> GHC.Types.I# 0#
                                                       GHC.Types.True -> GHC.Types.I# y1 } } })
                                                    a of newa { DEFAULT ->
                                             let {
                                               $dVector1 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicUnsafeSlice
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector1
                                                    (GHC.Types.I# 0#)
                                                    (case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# ww1 0#) of wild2 {
                                                       GHC.Types.False
                                                       -> case Data.Vector.Generic.Base.basicLength
                                                                 @ Data.Vector.Unboxed.Base.Vector
                                                                 @ n
                                                                 $dVector1
                                                                 a of wild1 { GHC.Types.I# y1 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<=# ww1 y1) of wild4 {
                                                            GHC.Types.False -> wild1
                                                            GHC.Types.True -> n1 } }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Generic.Base.basicLength
                                                                 @ Data.Vector.Unboxed.Base.Vector
                                                                 @ n
                                                                 $dVector1
                                                                 a of wild1 { GHC.Types.I# y1 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<=# 0# y1) of wild4 {
                                                            GHC.Types.False -> wild1
                                                            GHC.Types.True -> GHC.Types.I# 0# } } })
                                                    a of ai { DEFAULT ->
                                             let {
                                               f :: n -> n -> n = GHC.Num.+ @ n $dNum
                                             } in
                                             let {
                                               $dVector2 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector2
                                                    ai of n3 { GHC.Types.I# ipv ->
                                             let {
                                               $dVector3 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector3
                                                    b of n4 { GHC.Types.I# ipv1 ->
                                             letrec {
                                               foldlM'_loop :: GHC.Types.SPEC
                                                               -> n
                                                               -> (GHC.Types.Int, GHC.Types.Int,
                                                                   GHC.Base.Maybe n)
                                                               -> Data.Vector.Fusion.Util.Id n
                                                 {- Arity: 3 -}
                                               = \ (ds4 :: GHC.Types.SPEC)
                                                   (z1 :: n)
                                                   (s1 :: (GHC.Types.Int, GHC.Types.Int,
                                                           GHC.Base.Maybe n)) ->
                                                 case ds4 of ds5 { DEFAULT ->
                                                 case z1 of z2 { DEFAULT ->
                                                 case s1 of wild4 { (,,) sa sb ds11 ->
                                                 case ds11 of wild5 {
                                                   GHC.Base.Nothing
                                                   -> case sa of wild1 { GHC.Types.I# x1 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.>=# x1 ipv) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector2
                                                                  @ Data.Vector.Fusion.Util.Box
                                                                  Data.Vector.Fusion.Util.$fMonadBox
                                                                  ai
                                                                  wild1 of wild3 { Data.Vector.Fusion.Util.Box x2 ->
                                                           foldlM'_loop
                                                             GHC.Types.SPEC
                                                             z2
                                                             (GHC.Types.I# (GHC.Prim.+# x1 1#), sb,
                                                              GHC.Base.Just @ n x2) }
                                                        GHC.Types.True
                                                        -> z2
                                                             `cast`
                                                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n>_R)) } }
                                                   GHC.Base.Just x1
                                                   -> case sb of wild1 { GHC.Types.I# x2 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.>=# x2 ipv1) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector3
                                                                  @ Data.Vector.Fusion.Util.Box
                                                                  Data.Vector.Fusion.Util.$fMonadBox
                                                                  b
                                                                  wild1 of wild3 { Data.Vector.Fusion.Util.Box x3 ->
                                                           foldlM'_loop
                                                             GHC.Types.SPEC
                                                             (f z2 (GHC.Num.* @ n $dNum x1 x3))
                                                             (sa, GHC.Types.I# (GHC.Prim.+# x2 1#),
                                                              GHC.Base.Nothing @ n) }
                                                        GHC.Types.True
                                                        -> z2
                                                             `cast`
                                                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n>_R)) } } } } } }
                                             } in
                                             case (foldlM'_loop
                                                     GHC.Types.SPEC
                                                     (GHC.Num.fromInteger @ n $dNum 0)
                                                     (GHC.Types.I# 0#, GHC.Types.I# 0#,
                                                      GHC.Base.Nothing @ n))
                                                    `cast`
                                                  (Data.Vector.Fusion.Util.N:Id[0]
                                                       <n>_R) of xi { DEFAULT ->
                                             let {
                                               $dVector4 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             let {
                                               $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                              (Data.Vector.Generic.Base.Mutable
                                                                 Data.Vector.Unboxed.Base.Vector)
                                                              n
                                               = Data.Vector.Generic.Base.$p1Vector
                                                   @ Data.Vector.Unboxed.Base.Vector
                                                   @ n
                                                   $dVector4
                                             } in
                                             case (Data.Vector.Generic.Base.elemseq
                                                     @ Data.Vector.Unboxed.Base.Vector
                                                     @ n
                                                     (Data.Vector.Unboxed.Base.$p1Unbox @ n w)
                                                     @ (Data.Vector.Unboxed.Base.Vector
                                                          (GHC.Types.Int, n))
                                                     (GHC.Err.undefined
                                                        @ 'GHC.Types.LiftedRep
                                                        @ (Data.Vector.Unboxed.Base.Vector n)
                                                        (GHC.Stack.Types.PushCallStack
                                                           (GHC.CString.unpackCString# "undefined"#)
                                                           (GHC.Stack.Types.SrcLoc
                                                              (GHC.CString.unpackCString#
                                                                 "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                              (GHC.CString.unpackCString#
                                                                 "Data.Vector.Unboxed.Base"#)
                                                              (GHC.CString.unpackCString#
                                                                 "internal/unbox-tuple-instances"#)
                                                              (GHC.Types.I# 107#)
                                                              (GHC.Types.I# 22#)
                                                              (GHC.Types.I# 107#)
                                                              (GHC.Types.I# 31#))
                                                           GHC.Stack.Types.EmptyCallStack)
                                                          `cast`
                                                        (Sym (GHC.Classes.N:IP[0]
                                                                  <"callStack">_N
                                                                  <GHC.Stack.Types.CallStack>_N)))
                                                     xi
                                                     (case GHC.Magic.runRW#
                                                             @ ('GHC.Types.TupleRep
                                                                  '['GHC.Types.TupleRep '[],
                                                                    'GHC.Types.LiftedRep])
                                                             @ (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.Unboxed.Base.Vector
                                                                    (GHC.Types.Int, n) #)
                                                             (\ (s1 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                              case GHC.Prim.newByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     8#
                                                                     s1
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.ByteArray.MutableByteArray
                                                                                           (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld)))>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <Data.Primitive.ByteArray.MutableByteArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.ByteArray.MutableByteArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                              case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                      @ Data.Vector.Unboxed.Base.MVector
                                                                      @ n
                                                                      (Data.Vector.Unboxed.Base.$p2Unbox
                                                                         @ n
                                                                         w)
                                                                      @ (GHC.ST.ST
                                                                           GHC.Prim.RealWorld)
                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                         @ GHC.Prim.RealWorld)
                                                                      (GHC.Types.I# 1#))
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Vector.Unboxed.Base.MVector
                                                                           (Control.Monad.Primitive.PrimState
                                                                              (GHC.ST.ST
                                                                                 GHC.Prim.RealWorld))
                                                                           n>_R)
                                                                     ipv2
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:3
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (((GHC.Prim.State#
                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.ByteArray.MutableByteArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld)))>_R)
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.ByteArray.MutableByteArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)))>_R
                                                                                          ->_R GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R))))) of ds2 { (#,#) ipv4 ipv5 ->
                                                              letrec {
                                                                foldlM'_loop1 :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                  {- Arity: 3 -}
                                                                = \ (ds4 :: GHC.Types.SPEC)
                                                                    (z :: GHC.Types.Int)
                                                                    (s7 :: GHC.Types.Bool) ->
                                                                  case ds4 of ds5 { DEFAULT ->
                                                                  case z of z1 { GHC.Types.I# ipv6 ->
                                                                  (\ (s8 :: GHC.Prim.State#
                                                                              GHC.Prim.RealWorld) ->
                                                                   case s7 of wild1 {
                                                                     GHC.Types.False -> (# s8, z1 #)
                                                                     GHC.Types.True
                                                                     -> case ipv5 of dt { DEFAULT ->
                                                                        case Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                               @ Data.Vector.Unboxed.Base.MVector
                                                                               @ n
                                                                               (Data.Vector.Unboxed.Base.$p2Unbox
                                                                                  @ n
                                                                                  w)
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               z1
                                                                               (GHC.Types.I# 1#)
                                                                               dt of dt1 { DEFAULT ->
                                                                        case GHC.Prim.writeIntArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv3
                                                                               ipv6
                                                                               ww
                                                                               s8
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R
                                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R))
                                                                                              (((GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        <()>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R)))) of s'# { DEFAULT ->
                                                                        case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                @ Data.Vector.Unboxed.Base.MVector
                                                                                @ n
                                                                                (Data.Vector.Unboxed.Base.$p2Unbox
                                                                                   @ n
                                                                                   w)
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                dt1
                                                                                (GHC.Types.I# 0#)
                                                                                xi)
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s'#
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:3
                                                                                         (Nth:2
                                                                                              (Trans
                                                                                                   (((GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     ->_R ((#,#)
                                                                                                             <'GHC.Types.TupleRep
                                                                                                                '[]>_R
                                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                                             (GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             <()>_R)_R)
                                                                                                    ->_R <GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld
                                                                                                            ()>_R)
                                                                                                   (<GHC.ST.STRep
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R
                                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                        (foldlM'_loop1
                                                                           GHC.Types.SPEC
                                                                           (GHC.Types.I#
                                                                              (GHC.Prim.+# ipv6 1#))
                                                                           GHC.Types.False)
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv7 } } } } })
                                                                    `cast`
                                                                  (Sym (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)) } }
                                                              } in
                                                              case (foldlM'_loop1
                                                                      GHC.Types.SPEC
                                                                      (GHC.Types.I# 0#)
                                                                      GHC.Types.True)
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <GHC.Types.Int>_R)
                                                                     ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                                              case ipv5 of dt { DEFAULT ->
                                                              case ipv7 of dt1 { GHC.Types.I# dt2 ->
                                                              case Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ Data.Vector.Unboxed.Base.MVector
                                                                     @ n
                                                                     (Data.Vector.Unboxed.Base.$p2Unbox
                                                                        @ n
                                                                        w)
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     dt1
                                                                     dt of dt3 { DEFAULT ->
                                                              case GHC.Prim.unsafeFreezeByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     ipv3
                                                                     ipv6
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        Data.Primitive.ByteArray.ByteArray>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <Data.Primitive.ByteArray.ByteArray>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             Data.Primitive.ByteArray.ByteArray>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                              case (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                      @ n
                                                                      (Data.Vector.Unboxed.Base.$p1Unbox
                                                                         @ n
                                                                         w)
                                                                      @ (GHC.ST.ST
                                                                           GHC.Prim.RealWorld)
                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                         @ GHC.Prim.RealWorld)
                                                                      dt3
                                                                        `cast`
                                                                      (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld)>_N <n>_N))
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Vector.Unboxed.Base.Vector
                                                                           n>_R)
                                                                     ipv9
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:3
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (((GHC.Prim.State#
                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  Data.Primitive.ByteArray.ByteArray>_R)
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             Data.Primitive.ByteArray.ByteArray>_R
                                                                                          ->_R GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R))))) of ds5 { (#,#) ipv11 ipv12 ->
                                                              (# ipv11,
                                                                 case ipv12 of dt4 { DEFAULT ->
                                                                 (Data.Vector.Unboxed.Base.V_2
                                                                    @ GHC.Types.Int
                                                                    @ n
                                                                    dt2
                                                                    (Data.Vector.Primitive.Vector
                                                                       @ GHC.Types.Int
                                                                       0#
                                                                       dt2
                                                                       ipv10)
                                                                      `cast`
                                                                    (Trans
                                                                         (Sym (Data.Vector.Unboxed.Base.N:R:VectorInt[0]))
                                                                         (Sym (Data.Vector.Unboxed.Base.D:R:VectorInt0[0])))
                                                                    dt4)
                                                                   `cast`
                                                                 (Sym (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                                                                           <GHC.Types.Int>_N
                                                                           <n>_N)) } #) } } } } } } } }) of ds1 { (#,#) ipv2 ipv3 ->
                                                      ipv3 }))
                                                    `cast`
                                                  (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                                                       <GHC.Types.Int>_N
                                                       <n>_N) of nt { Data.Vector.Unboxed.Base.V_2 ipv2 ipv3 ipv4 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     case Data.Vector.Generic.Base.basicLength
                                                            @ Data.Vector.Unboxed.Base.Vector
                                                            @ n
                                                            $dVector4
                                                            x of wild1 { GHC.Types.I# x1 ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=# x1 0#) of wild2 {
                                                       GHC.Types.False
                                                       -> case Data.Vector.Internal.Check.$wcheckError
                                                                 @ (GHC.ST.ST
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Vector.Generic.Base.Mutable
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                         (Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               GHC.Prim.RealWorld))
                                                                         n))
                                                                 (GHC.CString.unpackCString#
                                                                    "./Data/Vector/Generic/Mutable.hs"#)
                                                                 585#
                                                                 Data.Vector.Internal.Check.Bounds
                                                                 (GHC.CString.unpackCString# "new"#)
                                                                 (Data.Vector.Internal.Check.checkLength_msg#
                                                                    x1)
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {}
                                                       GHC.Types.True
                                                       -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                  @ n
                                                                  $dMVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  wild1)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n>_R)
                                                                 s1 of ds1 { (#,#) ipv5 ipv6 ->
                                                          case (Data.Vector.Generic.Mutable.Base.basicInitialize
                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                  @ n
                                                                  $dMVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  ipv6)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv5 of ds { (#,#) ipv7 ipv8 ->
                                                          case ipv6
                                                                 `cast`
                                                               (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N) <n>_N) of nt1 { DEFAULT ->
                                                          case (Data.Vector.Generic.Base.basicUnsafeCopy
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector4
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  nt1
                                                                    `cast`
                                                                  (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)) <n>_N)
                                                                  x)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv7 of ds2 { (#,#) ipv9 ipv10 ->
                                                          let {
                                                            $dMVector1 :: Data.Vector.Generic.Mutable.Base.MVector
                                                                            (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                            n
                                                            = Data.Vector.Generic.Base.$p1Vector
                                                                @ Data.Vector.Unboxed.Base.Vector
                                                                @ n
                                                                $dVector4
                                                          } in
                                                          case Data.Vector.Generic.Mutable.Base.basicLength
                                                                 @ (Data.Vector.Generic.Base.Mutable
                                                                      Data.Vector.Unboxed.Base.Vector)
                                                                 @ n
                                                                 $dMVector1
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 nt1
                                                                   `cast`
                                                                 (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)) <n>_N) of n5 { GHC.Types.I# ipv11 ->
                                                          letrec {
                                                            consume_loop :: GHC.Types.SPEC
                                                                            -> GHC.Types.Int
                                                                            -> GHC.ST.ST
                                                                                 GHC.Prim.RealWorld
                                                                                 ()
                                                              {- Arity: 2 -}
                                                            = \ (ds4 :: GHC.Types.SPEC)
                                                                (s2 :: GHC.Types.Int) ->
                                                              case ds4 of ds5 { DEFAULT ->
                                                              (\ (s3 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld) ->
                                                               case s2 of wild3 { GHC.Types.I# x2 ->
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=#
                                                                         x2
                                                                         ipv2) of wild4 {
                                                                 GHC.Types.False
                                                                 -> case ipv3
                                                                           `cast`
                                                                         (Trans
                                                                              (Data.Vector.Unboxed.Base.D:R:VectorInt0[0])
                                                                              (Data.Vector.Unboxed.Base.N:R:VectorInt[0])) of wild5 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                                    case GHC.Prim.indexIntArray#
                                                                           dt2
                                                                           (GHC.Prim.+#
                                                                              dt
                                                                              x2) of wild6 { DEFAULT ->
                                                                    case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                           @ n
                                                                           (Data.Vector.Unboxed.Base.$p1Unbox
                                                                              @ n
                                                                              w)
                                                                           @ Data.Vector.Fusion.Util.Box
                                                                           Data.Vector.Fusion.Util.$fMonadBox
                                                                           ipv4
                                                                           wild3 of wild7 { Data.Vector.Fusion.Util.Box x3 ->
                                                                    let {
                                                                      file :: GHC.Prim.Addr#
                                                                      = "./Data/Vector/Generic/Mutable.hs"#
                                                                    } in
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.>=#
                                                                              wild6
                                                                              0#) of wild8 {
                                                                      GHC.Types.False
                                                                      -> case Data.Vector.Internal.Check.$wcheckError
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld
                                                                                     ())
                                                                                (GHC.CString.unpackCString#
                                                                                   file)
                                                                                845#
                                                                                Data.Vector.Internal.Check.Bounds
                                                                                (GHC.CString.unpackCString#
                                                                                   "update"#)
                                                                                (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                   wild6
                                                                                   ipv11)
                                                                         ret_ty (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                         of {}
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.tagToEnum#
                                                                                @ GHC.Types.Bool
                                                                                (GHC.Prim.<#
                                                                                   wild6
                                                                                   ipv11) of wild9 {
                                                                           GHC.Types.False
                                                                           -> case Data.Vector.Internal.Check.$wcheckError
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld
                                                                                          ())
                                                                                     (GHC.CString.unpackCString#
                                                                                        file)
                                                                                     845#
                                                                                     Data.Vector.Internal.Check.Bounds
                                                                                     (GHC.CString.unpackCString#
                                                                                        "update"#)
                                                                                     (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                        wild6
                                                                                        ipv11)
                                                                              ret_ty (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        () #)
                                                                              of {}
                                                                           GHC.Types.True
                                                                           -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Unboxed.Base.Vector)
                                                                                      @ n
                                                                                      $dMVector1
                                                                                      @ (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)
                                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                                         @ GHC.Prim.RealWorld)
                                                                                      nt1
                                                                                        `cast`
                                                                                      (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                           <GHC.Prim.RealWorld>_N)) <n>_N)
                                                                                      (GHC.Types.I#
                                                                                         wild6)
                                                                                      x3)
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R)
                                                                                     s3 of ds7 { (#,#) ipv12 ipv13 ->
                                                                              (consume_loop
                                                                                 GHC.Types.SPEC
                                                                                 (GHC.Types.I#
                                                                                    (GHC.Prim.+#
                                                                                       x2
                                                                                       1#)))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <()>_R)
                                                                                ipv12 } } } } } }
                                                                 GHC.Types.True
                                                                 -> (# s3, GHC.Tuple.() #) } })
                                                                `cast`
                                                              (Sym (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <()>_R)) }
                                                          } in
                                                          case (consume_loop
                                                                  GHC.Types.SPEC
                                                                  (GHC.Types.I# 0#))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv9 of ds4 { (#,#) ipv12 ipv13 ->
                                                          (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                             @ Data.Vector.Unboxed.Base.Vector
                                                             @ n
                                                             $dVector4
                                                             @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                             (Control.Monad.Primitive.$fPrimMonadST
                                                                @ GHC.Prim.RealWorld)
                                                             nt1
                                                               `cast`
                                                             (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)) <n>_N))
                                                            `cast`
                                                          (GHC.ST.N:ST[0]
                                                               <GHC.Prim.RealWorld>_N
                                                               <Data.Vector.Unboxed.Base.Vector
                                                                  n>_R)
                                                            ipv12 } } } } } } } }) of ds1 { (#,#) ipv5 ipv6 ->
                                             case ipv6 of new_x { DEFAULT ->
                                             HBLAS.Level2.$wsymvLowerHFlatHelper
                                               @ n
                                               w
                                               w1
                                               newa
                                               new_x
                                               b
                                               (GHC.Prim.+# ww 1#)
                                               ww1 } } } } } } } }
                                          GHC.Types.True -> x } } } }) -}
e44adb2c59336ef7f3b08c15ca879b95
  $wsymvUpperHFlatHelper ::
    (Data.Vector.Unboxed.Base.Unbox n, GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 7,
     Strictness: <L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: Data.Vector.Unboxed.Base.Unbox n)
                                          (w1 :: GHC.Real.Fractional n)
                                          (w2 :: Data.Vector.Unboxed.Base.Vector n)
                                          (w3 :: Data.Vector.Unboxed.Base.Vector n)
                                          (w4 :: Data.Vector.Unboxed.Base.Vector n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        let {
                                          $dNum :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n w1
                                        } in
                                        case w2 of a { DEFAULT ->
                                        case w3 of x { DEFAULT ->
                                        case w4 of b { DEFAULT ->
                                        let {
                                          n1 :: GHC.Types.Int = GHC.Types.I# ww1
                                        } in
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.>=# ww ww1) of wild {
                                          GHC.Types.False
                                          -> let {
                                               $dVector :: Data.Vector.Generic.Base.Vector
                                                             Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             let {
                                               n2 :: GHC.Types.Int
                                               = Data.Vector.Generic.Base.basicLength
                                                   @ Data.Vector.Unboxed.Base.Vector
                                                   @ n
                                                   $dVector
                                                   a
                                             } in
                                             let {
                                               n' :: GHC.Types.Int
                                               = case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<=# ww1 0#) of wild2 {
                                                   GHC.Types.False -> n1
                                                   GHC.Types.True -> GHC.Types.I# 0# }
                                             } in
                                             case Data.Vector.Generic.Base.basicUnsafeSlice
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector
                                                    (case n' of wild1 { GHC.Types.I# x1 ->
                                                     case n2 of wild2 { GHC.Types.I# y1 ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# x1 y1) of wild3 {
                                                       GHC.Types.False -> wild2
                                                       GHC.Types.True -> wild1 } } })
                                                    (case n2 of wild1 { GHC.Types.I# x1 ->
                                                     case n' of wild2 { GHC.Types.I# y ->
                                                     let {
                                                       y1 :: GHC.Prim.Int# = GHC.Prim.-# x1 y
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# 0# y1) of wild3 {
                                                       GHC.Types.False -> GHC.Types.I# 0#
                                                       GHC.Types.True -> GHC.Types.I# y1 } } })
                                                    a of newa { DEFAULT ->
                                             let {
                                               $dVector1 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicUnsafeSlice
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector1
                                                    (GHC.Types.I# 0#)
                                                    (case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=# ww1 0#) of wild2 {
                                                       GHC.Types.False
                                                       -> case Data.Vector.Generic.Base.basicLength
                                                                 @ Data.Vector.Unboxed.Base.Vector
                                                                 @ n
                                                                 $dVector1
                                                                 a of wild1 { GHC.Types.I# y1 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<=# ww1 y1) of wild4 {
                                                            GHC.Types.False -> wild1
                                                            GHC.Types.True -> n1 } }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Generic.Base.basicLength
                                                                 @ Data.Vector.Unboxed.Base.Vector
                                                                 @ n
                                                                 $dVector1
                                                                 a of wild1 { GHC.Types.I# y1 ->
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<=# 0# y1) of wild4 {
                                                            GHC.Types.False -> wild1
                                                            GHC.Types.True -> GHC.Types.I# 0# } } })
                                                    a of ai { DEFAULT ->
                                             let {
                                               f :: n -> n -> n = GHC.Num.+ @ n $dNum
                                             } in
                                             let {
                                               $dVector2 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector2
                                                    ai of n3 { GHC.Types.I# ipv ->
                                             let {
                                               $dVector3 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             case Data.Vector.Generic.Base.basicLength
                                                    @ Data.Vector.Unboxed.Base.Vector
                                                    @ n
                                                    $dVector3
                                                    b of n4 { GHC.Types.I# ipv1 ->
                                             letrec {
                                               foldlM'_loop :: GHC.Types.SPEC
                                                               -> n
                                                               -> (GHC.Types.Int, GHC.Types.Int,
                                                                   GHC.Base.Maybe n)
                                                               -> Data.Vector.Fusion.Util.Id n
                                                 {- Arity: 3 -}
                                               = \ (ds4 :: GHC.Types.SPEC)
                                                   (z1 :: n)
                                                   (s1 :: (GHC.Types.Int, GHC.Types.Int,
                                                           GHC.Base.Maybe n)) ->
                                                 case ds4 of ds5 { DEFAULT ->
                                                 case z1 of z2 { DEFAULT ->
                                                 case s1 of wild4 { (,,) sa sb ds11 ->
                                                 case ds11 of wild5 {
                                                   GHC.Base.Nothing
                                                   -> case sa of wild1 { GHC.Types.I# x1 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.>=# x1 ipv) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector2
                                                                  @ Data.Vector.Fusion.Util.Box
                                                                  Data.Vector.Fusion.Util.$fMonadBox
                                                                  ai
                                                                  wild1 of wild3 { Data.Vector.Fusion.Util.Box x2 ->
                                                           foldlM'_loop
                                                             GHC.Types.SPEC
                                                             z2
                                                             (GHC.Types.I# (GHC.Prim.+# x1 1#), sb,
                                                              GHC.Base.Just @ n x2) }
                                                        GHC.Types.True
                                                        -> z2
                                                             `cast`
                                                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n>_R)) } }
                                                   GHC.Base.Just x1
                                                   -> case sb of wild1 { GHC.Types.I# x2 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.>=# x2 ipv1) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector3
                                                                  @ Data.Vector.Fusion.Util.Box
                                                                  Data.Vector.Fusion.Util.$fMonadBox
                                                                  b
                                                                  wild1 of wild3 { Data.Vector.Fusion.Util.Box x3 ->
                                                           foldlM'_loop
                                                             GHC.Types.SPEC
                                                             (f z2 (GHC.Num.* @ n $dNum x1 x3))
                                                             (sa, GHC.Types.I# (GHC.Prim.+# x2 1#),
                                                              GHC.Base.Nothing @ n) }
                                                        GHC.Types.True
                                                        -> z2
                                                             `cast`
                                                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <n>_R)) } } } } } }
                                             } in
                                             case (foldlM'_loop
                                                     GHC.Types.SPEC
                                                     (GHC.Num.fromInteger @ n $dNum 0)
                                                     (GHC.Types.I# 0#, GHC.Types.I# 0#,
                                                      GHC.Base.Nothing @ n))
                                                    `cast`
                                                  (Data.Vector.Fusion.Util.N:Id[0]
                                                       <n>_R) of xi { DEFAULT ->
                                             let {
                                               $dVector4 :: Data.Vector.Generic.Base.Vector
                                                              Data.Vector.Unboxed.Base.Vector n
                                               = Data.Vector.Unboxed.Base.$p1Unbox @ n w
                                             } in
                                             let {
                                               $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                              (Data.Vector.Generic.Base.Mutable
                                                                 Data.Vector.Unboxed.Base.Vector)
                                                              n
                                               = Data.Vector.Generic.Base.$p1Vector
                                                   @ Data.Vector.Unboxed.Base.Vector
                                                   @ n
                                                   $dVector4
                                             } in
                                             case (Data.Vector.Generic.Base.elemseq
                                                     @ Data.Vector.Unboxed.Base.Vector
                                                     @ n
                                                     (Data.Vector.Unboxed.Base.$p1Unbox @ n w)
                                                     @ (Data.Vector.Unboxed.Base.Vector
                                                          (GHC.Types.Int, n))
                                                     (GHC.Err.undefined
                                                        @ 'GHC.Types.LiftedRep
                                                        @ (Data.Vector.Unboxed.Base.Vector n)
                                                        (GHC.Stack.Types.PushCallStack
                                                           (GHC.CString.unpackCString# "undefined"#)
                                                           (GHC.Stack.Types.SrcLoc
                                                              (GHC.CString.unpackCString#
                                                                 "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#)
                                                              (GHC.CString.unpackCString#
                                                                 "Data.Vector.Unboxed.Base"#)
                                                              (GHC.CString.unpackCString#
                                                                 "internal/unbox-tuple-instances"#)
                                                              (GHC.Types.I# 107#)
                                                              (GHC.Types.I# 22#)
                                                              (GHC.Types.I# 107#)
                                                              (GHC.Types.I# 31#))
                                                           GHC.Stack.Types.EmptyCallStack)
                                                          `cast`
                                                        (Sym (GHC.Classes.N:IP[0]
                                                                  <"callStack">_N
                                                                  <GHC.Stack.Types.CallStack>_N)))
                                                     xi
                                                     (case GHC.Magic.runRW#
                                                             @ ('GHC.Types.TupleRep
                                                                  '['GHC.Types.TupleRep '[],
                                                                    'GHC.Types.LiftedRep])
                                                             @ (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.Unboxed.Base.Vector
                                                                    (GHC.Types.Int, n) #)
                                                             (\ (s1 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                              case GHC.Prim.newByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     8#
                                                                     s1
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.ByteArray.MutableByteArray
                                                                                           (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld)))>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <Data.Primitive.ByteArray.MutableByteArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.ByteArray.MutableByteArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                              case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                      @ Data.Vector.Unboxed.Base.MVector
                                                                      @ n
                                                                      (Data.Vector.Unboxed.Base.$p2Unbox
                                                                         @ n
                                                                         w)
                                                                      @ (GHC.ST.ST
                                                                           GHC.Prim.RealWorld)
                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                         @ GHC.Prim.RealWorld)
                                                                      (GHC.Types.I# 1#))
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Vector.Unboxed.Base.MVector
                                                                           (Control.Monad.Primitive.PrimState
                                                                              (GHC.ST.ST
                                                                                 GHC.Prim.RealWorld))
                                                                           n>_R)
                                                                     ipv2
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:3
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (((GHC.Prim.State#
                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.ByteArray.MutableByteArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld)))>_R)
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.ByteArray.MutableByteArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)))>_R
                                                                                          ->_R GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.MutableByteArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))>_R))))) of ds2 { (#,#) ipv4 ipv5 ->
                                                              letrec {
                                                                foldlM'_loop1 :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                  {- Arity: 3 -}
                                                                = \ (ds4 :: GHC.Types.SPEC)
                                                                    (z :: GHC.Types.Int)
                                                                    (s7 :: GHC.Types.Bool) ->
                                                                  case ds4 of ds5 { DEFAULT ->
                                                                  case z of z1 { GHC.Types.I# ipv6 ->
                                                                  (\ (s8 :: GHC.Prim.State#
                                                                              GHC.Prim.RealWorld) ->
                                                                   case s7 of wild1 {
                                                                     GHC.Types.False -> (# s8, z1 #)
                                                                     GHC.Types.True
                                                                     -> case ipv5 of dt { DEFAULT ->
                                                                        case Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                               @ Data.Vector.Unboxed.Base.MVector
                                                                               @ n
                                                                               (Data.Vector.Unboxed.Base.$p2Unbox
                                                                                  @ n
                                                                                  w)
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               z1
                                                                               (GHC.Types.I# 1#)
                                                                               dt of dt1 { DEFAULT ->
                                                                        case GHC.Prim.writeIntArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv3
                                                                               ipv6
                                                                               ww
                                                                               s8
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  ()>_R
                                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R))
                                                                                              (((GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        <()>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R)))) of s'# { DEFAULT ->
                                                                        case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                @ Data.Vector.Unboxed.Base.MVector
                                                                                @ n
                                                                                (Data.Vector.Unboxed.Base.$p2Unbox
                                                                                   @ n
                                                                                   w)
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                dt1
                                                                                (GHC.Types.I# 0#)
                                                                                xi)
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s'#
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:3
                                                                                         (Nth:2
                                                                                              (Trans
                                                                                                   (((GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     ->_R ((#,#)
                                                                                                             <'GHC.Types.TupleRep
                                                                                                                '[]>_R
                                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                                             (GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             <()>_R)_R)
                                                                                                    ->_R <GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld
                                                                                                            ()>_R)
                                                                                                   (<GHC.ST.STRep
                                                                                                       GHC.Prim.RealWorld
                                                                                                       ()>_R
                                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                        (foldlM'_loop1
                                                                           GHC.Types.SPEC
                                                                           (GHC.Types.I#
                                                                              (GHC.Prim.+# ipv6 1#))
                                                                           GHC.Types.False)
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv7 } } } } })
                                                                    `cast`
                                                                  (Sym (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)) } }
                                                              } in
                                                              case (foldlM'_loop1
                                                                      GHC.Types.SPEC
                                                                      (GHC.Types.I# 0#)
                                                                      GHC.Types.True)
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <GHC.Types.Int>_R)
                                                                     ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                                              case ipv5 of dt { DEFAULT ->
                                                              case ipv7 of dt1 { GHC.Types.I# dt2 ->
                                                              case Data.Vector.Generic.Mutable.Base.basicUnsafeSlice
                                                                     @ Data.Vector.Unboxed.Base.MVector
                                                                     @ n
                                                                     (Data.Vector.Unboxed.Base.$p2Unbox
                                                                        @ n
                                                                        w)
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     (GHC.Types.I# 0#)
                                                                     dt1
                                                                     dt of dt3 { DEFAULT ->
                                                              case GHC.Prim.unsafeFreezeByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     ipv3
                                                                     ipv6
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        Data.Primitive.ByteArray.ByteArray>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <Data.Primitive.ByteArray.ByteArray>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             Data.Primitive.ByteArray.ByteArray>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                              case (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                                      @ Data.Vector.Unboxed.Base.Vector
                                                                      @ n
                                                                      (Data.Vector.Unboxed.Base.$p1Unbox
                                                                         @ n
                                                                         w)
                                                                      @ (GHC.ST.ST
                                                                           GHC.Prim.RealWorld)
                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                         @ GHC.Prim.RealWorld)
                                                                      dt3
                                                                        `cast`
                                                                      (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld)>_N <n>_N))
                                                                     `cast`
                                                                   (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <Data.Vector.Unboxed.Base.Vector
                                                                           n>_R)
                                                                     ipv9
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:3
                                                                               (Nth:2
                                                                                    (Trans
                                                                                         (((GHC.Prim.State#
                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                           ->_R ((#,#)
                                                                                                   <'GHC.Types.TupleRep
                                                                                                      '[]>_R
                                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                                   (GHC.Prim.State#
                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R)_R)
                                                                                          ->_R <GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  Data.Primitive.ByteArray.ByteArray>_R)
                                                                                         (<GHC.ST.STRep
                                                                                             GHC.Prim.RealWorld
                                                                                             Data.Primitive.ByteArray.ByteArray>_R
                                                                                          ->_R GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <Data.Primitive.ByteArray.ByteArray>_R))))) of ds5 { (#,#) ipv11 ipv12 ->
                                                              (# ipv11,
                                                                 case ipv12 of dt4 { DEFAULT ->
                                                                 (Data.Vector.Unboxed.Base.V_2
                                                                    @ GHC.Types.Int
                                                                    @ n
                                                                    dt2
                                                                    (Data.Vector.Primitive.Vector
                                                                       @ GHC.Types.Int
                                                                       0#
                                                                       dt2
                                                                       ipv10)
                                                                      `cast`
                                                                    (Trans
                                                                         (Sym (Data.Vector.Unboxed.Base.N:R:VectorInt[0]))
                                                                         (Sym (Data.Vector.Unboxed.Base.D:R:VectorInt0[0])))
                                                                    dt4)
                                                                   `cast`
                                                                 (Sym (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                                                                           <GHC.Types.Int>_N
                                                                           <n>_N)) } #) } } } } } } } }) of ds1 { (#,#) ipv2 ipv3 ->
                                                      ipv3 }))
                                                    `cast`
                                                  (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                                                       <GHC.Types.Int>_N
                                                       <n>_N) of nt { Data.Vector.Unboxed.Base.V_2 ipv2 ipv3 ipv4 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     case Data.Vector.Generic.Base.basicLength
                                                            @ Data.Vector.Unboxed.Base.Vector
                                                            @ n
                                                            $dVector4
                                                            x of wild1 { GHC.Types.I# x1 ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=# x1 0#) of wild2 {
                                                       GHC.Types.False
                                                       -> case Data.Vector.Internal.Check.$wcheckError
                                                                 @ (GHC.ST.ST
                                                                      GHC.Prim.RealWorld
                                                                      (Data.Vector.Generic.Base.Mutable
                                                                         Data.Vector.Unboxed.Base.Vector
                                                                         (Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               GHC.Prim.RealWorld))
                                                                         n))
                                                                 (GHC.CString.unpackCString#
                                                                    "./Data/Vector/Generic/Mutable.hs"#)
                                                                 585#
                                                                 Data.Vector.Internal.Check.Bounds
                                                                 (GHC.CString.unpackCString# "new"#)
                                                                 (Data.Vector.Internal.Check.checkLength_msg#
                                                                    x1)
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      n #)
                                                          of {}
                                                       GHC.Types.True
                                                       -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                  @ n
                                                                  $dMVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  wild1)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N
                                                                    <Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                       n>_R)
                                                                 s1 of ds1 { (#,#) ipv5 ipv6 ->
                                                          case (Data.Vector.Generic.Mutable.Base.basicInitialize
                                                                  @ (Data.Vector.Generic.Base.Mutable
                                                                       Data.Vector.Unboxed.Base.Vector)
                                                                  @ n
                                                                  $dMVector
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  ipv6)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv5 of ds { (#,#) ipv7 ipv8 ->
                                                          case ipv6
                                                                 `cast`
                                                               (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N) <n>_N) of nt1 { DEFAULT ->
                                                          case (Data.Vector.Generic.Base.basicUnsafeCopy
                                                                  @ Data.Vector.Unboxed.Base.Vector
                                                                  @ n
                                                                  $dVector4
                                                                  @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                                  (Control.Monad.Primitive.$fPrimMonadST
                                                                     @ GHC.Prim.RealWorld)
                                                                  nt1
                                                                    `cast`
                                                                  (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)) <n>_N)
                                                                  x)
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv7 of ds2 { (#,#) ipv9 ipv10 ->
                                                          let {
                                                            $dMVector1 :: Data.Vector.Generic.Mutable.Base.MVector
                                                                            (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Unboxed.Base.Vector)
                                                                            n
                                                            = Data.Vector.Generic.Base.$p1Vector
                                                                @ Data.Vector.Unboxed.Base.Vector
                                                                @ n
                                                                $dVector4
                                                          } in
                                                          case Data.Vector.Generic.Mutable.Base.basicLength
                                                                 @ (Data.Vector.Generic.Base.Mutable
                                                                      Data.Vector.Unboxed.Base.Vector)
                                                                 @ n
                                                                 $dMVector1
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 nt1
                                                                   `cast`
                                                                 (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)) <n>_N) of n5 { GHC.Types.I# ipv11 ->
                                                          letrec {
                                                            consume_loop :: GHC.Types.SPEC
                                                                            -> GHC.Types.Int
                                                                            -> GHC.ST.ST
                                                                                 GHC.Prim.RealWorld
                                                                                 ()
                                                              {- Arity: 2 -}
                                                            = \ (ds4 :: GHC.Types.SPEC)
                                                                (s2 :: GHC.Types.Int) ->
                                                              case ds4 of ds5 { DEFAULT ->
                                                              (\ (s3 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld) ->
                                                               case s2 of wild3 { GHC.Types.I# x2 ->
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=#
                                                                         x2
                                                                         ipv2) of wild4 {
                                                                 GHC.Types.False
                                                                 -> case ipv3
                                                                           `cast`
                                                                         (Trans
                                                                              (Data.Vector.Unboxed.Base.D:R:VectorInt0[0])
                                                                              (Data.Vector.Unboxed.Base.N:R:VectorInt[0])) of wild5 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                                    case GHC.Prim.indexIntArray#
                                                                           dt2
                                                                           (GHC.Prim.+#
                                                                              dt
                                                                              x2) of wild6 { DEFAULT ->
                                                                    case Data.Vector.Generic.Base.basicUnsafeIndexM
                                                                           @ Data.Vector.Unboxed.Base.Vector
                                                                           @ n
                                                                           (Data.Vector.Unboxed.Base.$p1Unbox
                                                                              @ n
                                                                              w)
                                                                           @ Data.Vector.Fusion.Util.Box
                                                                           Data.Vector.Fusion.Util.$fMonadBox
                                                                           ipv4
                                                                           wild3 of wild7 { Data.Vector.Fusion.Util.Box x3 ->
                                                                    let {
                                                                      file :: GHC.Prim.Addr#
                                                                      = "./Data/Vector/Generic/Mutable.hs"#
                                                                    } in
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.>=#
                                                                              wild6
                                                                              0#) of wild8 {
                                                                      GHC.Types.False
                                                                      -> case Data.Vector.Internal.Check.$wcheckError
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld
                                                                                     ())
                                                                                (GHC.CString.unpackCString#
                                                                                   file)
                                                                                845#
                                                                                Data.Vector.Internal.Check.Bounds
                                                                                (GHC.CString.unpackCString#
                                                                                   "update"#)
                                                                                (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                   wild6
                                                                                   ipv11)
                                                                         ret_ty (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                         of {}
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.tagToEnum#
                                                                                @ GHC.Types.Bool
                                                                                (GHC.Prim.<#
                                                                                   wild6
                                                                                   ipv11) of wild9 {
                                                                           GHC.Types.False
                                                                           -> case Data.Vector.Internal.Check.$wcheckError
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld
                                                                                          ())
                                                                                     (GHC.CString.unpackCString#
                                                                                        file)
                                                                                     845#
                                                                                     Data.Vector.Internal.Check.Bounds
                                                                                     (GHC.CString.unpackCString#
                                                                                        "update"#)
                                                                                     (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                        wild6
                                                                                        ipv11)
                                                                              ret_ty (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        () #)
                                                                              of {}
                                                                           GHC.Types.True
                                                                           -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Unboxed.Base.Vector)
                                                                                      @ n
                                                                                      $dMVector1
                                                                                      @ (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)
                                                                                      (Control.Monad.Primitive.$fPrimMonadST
                                                                                         @ GHC.Prim.RealWorld)
                                                                                      nt1
                                                                                        `cast`
                                                                                      (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                           <GHC.Prim.RealWorld>_N)) <n>_N)
                                                                                      (GHC.Types.I#
                                                                                         wild6)
                                                                                      x3)
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <()>_R)
                                                                                     s3 of ds7 { (#,#) ipv12 ipv13 ->
                                                                              (consume_loop
                                                                                 GHC.Types.SPEC
                                                                                 (GHC.Types.I#
                                                                                    (GHC.Prim.+#
                                                                                       x2
                                                                                       1#)))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <()>_R)
                                                                                ipv12 } } } } } }
                                                                 GHC.Types.True
                                                                 -> (# s3, GHC.Tuple.() #) } })
                                                                `cast`
                                                              (Sym (GHC.ST.N:ST[0]
                                                                        <GHC.Prim.RealWorld>_N
                                                                        <()>_R)) }
                                                          } in
                                                          case (consume_loop
                                                                  GHC.Types.SPEC
                                                                  (GHC.Types.I# 0#))
                                                                 `cast`
                                                               (GHC.ST.N:ST[0]
                                                                    <GHC.Prim.RealWorld>_N <()>_R)
                                                                 ipv9 of ds4 { (#,#) ipv12 ipv13 ->
                                                          (Data.Vector.Generic.Base.basicUnsafeFreeze
                                                             @ Data.Vector.Unboxed.Base.Vector
                                                             @ n
                                                             $dVector4
                                                             @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                             (Control.Monad.Primitive.$fPrimMonadST
                                                                @ GHC.Prim.RealWorld)
                                                             nt1
                                                               `cast`
                                                             (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)) <n>_N))
                                                            `cast`
                                                          (GHC.ST.N:ST[0]
                                                               <GHC.Prim.RealWorld>_N
                                                               <Data.Vector.Unboxed.Base.Vector
                                                                  n>_R)
                                                            ipv12 } } } } } } } }) of ds1 { (#,#) ipv5 ipv6 ->
                                             case ipv6 of new_x { DEFAULT ->
                                             HBLAS.Level2.$wsymvUpperHFlatHelper
                                               @ n
                                               w
                                               w1
                                               newa
                                               new_x
                                               b
                                               (GHC.Prim.+# ww 1#)
                                               ww1 } } } } } } } }
                                          GHC.Types.True -> x } } } }) -}
497f6a8290d6fd5d510dd5dd1e74755b
  $wtrmv ::
    (GHC.Real.Fractional n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Char#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 5,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S(S(LLLC(S(S))LLLC(C(C(S))))L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,U><S,1*U>,
     Inline: [0] -}
42cdeff66da9b13f98457255cb8a6b1b
  $wtrmvLower ::
    (GHC.Real.Fractional n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0] -}
1c1ef0aba1aaa93c46257e45e6a38b00
  $wtrmvUpper ::
    (GHC.Real.Fractional n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0] -}
d2b383b7a94bcb84eac9b6cb540c4e97
  $wtrsv ::
    (GHC.Real.Fractional n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Char#
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 5,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><S(S(LLLC(S(S))LLLC(C(C(S))))L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,U><S,1*U>,
     Inline: [0] -}
b79e2defce84132bd8307f03125f5fed
  $wtrsvLower ::
    (GHC.Real.Fractional n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (Data.Vector.Unboxed.Base.Vector n,
        Data.Vector.Unboxed.Base.Vector n)
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0] -}
158473671cb3e0f9df3851c13c1277ba
  $wtrsvUpper ::
    (GHC.Real.Fractional n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (Data.Vector.Unboxed.Base.Vector n,
        Data.Vector.Unboxed.Base.Vector n)
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S,U><S,U>,
     Inline: [0] -}
45449999391c221486e5457a71a43ae8
  gemv ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> n
    -> n
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><S(S(S(LLLC(C(S))LLLLLLLLL)LLC(S)LLLL)L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: (sat-args=5),
     Unfolding: InlineRule (8, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   ($dFractional :: GHC.Real.Fractional n) ->
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (matA :: Data.Vector.Unboxed.Base.Vector n)
                   (vecX :: Data.Vector.Unboxed.Base.Vector n)
                   (vecY :: Data.Vector.Unboxed.Base.Vector n)
                   (alpha :: n)
                   (beta :: n) ->
                 case matA of matA1 { DEFAULT ->
                 case vecX of vecX1 { DEFAULT ->
                 case vecY of vecY1 { DEFAULT ->
                 case alpha of alpha1 { DEFAULT ->
                 case beta of beta1 { DEFAULT ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 case Data.Vector.Generic.new
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector1
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector1
                           (Data.Vector.Fusion.Bundle.inplace
                              @ n
                              @ n
                              @ Data.Vector.Unboxed.Base.Vector
                              (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                               let {
                                 f :: n -> n = GHC.Num.* @ n $dNum1 beta1
                               } in
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m
                                 @ n
                                 @ n
                                 $dMonad
                                 (let {
                                    f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                  } in
                                  \ (x2 :: n) -> f1 (f x2)))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 vecY1))) of y1 { DEFAULT ->
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            vecX1))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum1 0
                 } in
                 case HBLAS.Level2.gemvFlatHelper
                        @ n
                        $dNum1
                        $dUnbox
                        $dFractional
                        matA1
                        (Data.Vector.Generic.Base.elemseq
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector
                           @ (Data.Vector.Unboxed.Base.Vector n)
                           (GHC.Err.undefined
                              @ 'GHC.Types.LiftedRep
                              @ (Data.Vector.Unboxed.Base.Vector n)
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString# @ b "Data.Vector.Generic"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Generic.hs"#))
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 26#)
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 35#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           x
                           (Data.Vector.Generic.new
                              @ Data.Vector.Unboxed.Base.Vector
                              @ n
                              $dVector
                              (Data.Vector.Generic.New.unstream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector
                                 (Data.Vector.Fusion.Bundle.Monadic.replicate
                                    @ Data.Vector.Fusion.Util.Id
                                    @ n
                                    @ Data.Vector.Unboxed.Base.Vector
                                    Data.Vector.Fusion.Util.$fMonadId
                                    n1
                                    x))))
                        vecX1
                        (GHC.Types.I# 0#)
                        n1 of x1 { DEFAULT ->
                 let {
                   $dVector2 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 Data.Vector.Generic.new
                   @ Data.Vector.Unboxed.Base.Vector
                   @ n
                   $dVector2
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Unboxed.Base.Vector
                      @ n
                      $dVector2
                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ n
                         @ n
                         @ n
                         @ Data.Vector.Unboxed.Base.Vector
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: n) (b1 :: n)[OneShot] ->
                          GHC.Num.+ @ n $dNum1 b1 (GHC.Num.* @ n $dNum1 alpha1 a1))
                           `cast`
                         (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            x1)
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            y1))) } } } } } } } }) -}
df50a0ae8e5139198b223636cd3dbd63
  gemvFlat ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 5,
     Strictness: <L,A><S(S(LLLC(S(S))LLLC(C(C(S))))L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (5, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   ($dFractional :: GHC.Real.Fractional n) ->
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (matA :: Data.Vector.Unboxed.Base.Vector n)
                   (vecX :: Data.Vector.Unboxed.Base.Vector n) ->
                 case matA of matA1 { DEFAULT ->
                 case vecX of vecX1 { DEFAULT ->
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            vecX1))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum1 0
                 } in
                 HBLAS.Level2.gemvFlatHelper
                   @ n
                   $dNum1
                   $dUnbox
                   $dFractional
                   matA1
                   (Data.Vector.Generic.Base.elemseq
                      @ Data.Vector.Unboxed.Base.Vector
                      @ n
                      $dVector
                      @ (Data.Vector.Unboxed.Base.Vector n)
                      (GHC.Err.undefined
                         @ 'GHC.Types.LiftedRep
                         @ (Data.Vector.Unboxed.Base.Vector n)
                         (GHC.Stack.Types.PushCallStack
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                            (GHC.Stack.Types.SrcLoc
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString# @ b "Data.Vector.Generic"#))
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                               (GHC.Types.I# 520#)
                               (GHC.Types.I# 26#)
                               (GHC.Types.I# 520#)
                               (GHC.Types.I# 35#))
                            GHC.Stack.Types.EmptyCallStack)
                           `cast`
                         (Sym (GHC.Classes.N:IP[0]
                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                      x
                      (Data.Vector.Generic.new
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.replicate
                               @ Data.Vector.Fusion.Util.Id
                               @ n
                               @ Data.Vector.Unboxed.Base.Vector
                               Data.Vector.Fusion.Util.$fMonadId
                               n1
                               x))))
                   vecX1
                   (GHC.Types.I# 0#)
                   n1 } } }) -}
0fa69ad22737cf4dbf1d98233b95d29f
  gemvFlatHelper ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Real.Fractional n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wgemvFlatHelper @ n w1 w2 w3 w4 w5 ww1 ww3 } }) -}
1020ee328bcd9f1351cae289826867c1
  gemvFlatHelper2 ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n -> n
  {- Arity: 4,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><S(S(LLLC(S(S))LLLL)L),1*U(1*U(A,A,A,C(U(U)),A,C(C1(C1(U))),A,A),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   (veca :: Data.Vector.Unboxed.Base.Vector n)
                   (vecx :: Data.Vector.Unboxed.Base.Vector n) ->
                 case veca of veca1 { DEFAULT ->
                 case vecx of vecx1 { DEFAULT ->
                 let {
                   f :: n -> n -> n = GHC.Num.+ @ n $dNum
                 } in
                 (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ n
                    @ n
                    @ Data.Vector.Unboxed.Base.Vector
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: n) (b1 :: n)[OneShot] -> f a1 b1)
                      `cast`
                    (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                    (GHC.Num.fromInteger @ n $dNum 0)
                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                       @ Data.Vector.Fusion.Util.Id
                       @ n
                       @ n
                       @ n
                       @ Data.Vector.Unboxed.Base.Vector
                       Data.Vector.Fusion.Util.$fMonadId
                       (\ (a1 :: n) (b1 :: n)[OneShot] -> GHC.Num.* @ n $dNum a1 b1)
                         `cast`
                       (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                       (Data.Vector.Generic.stream
                          @ Data.Vector.Unboxed.Base.Vector
                          @ n
                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                          veca1)
                       (Data.Vector.Generic.stream
                          @ Data.Vector.Unboxed.Base.Vector
                          @ n
                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                          vecx1)))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0] <n>_R) } }) -}
48c06ab7812cd8c8705daa676fe0c7ca
  symv ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> n
    -> n
    -> GHC.Types.Char
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 9,
     Strictness: <L,A><S(S(S(LLLC(C(S))LLLLLLLLL)LLC(S)LLLL)L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S(S),1*U(1*U)>,
     Inline: (sat-args=6),
     Unfolding: InlineRule (9, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   ($dFractional :: GHC.Real.Fractional n)
                   (matA :: Data.Vector.Unboxed.Base.Vector n)
                   (vecX :: Data.Vector.Unboxed.Base.Vector n)
                   (vecY :: Data.Vector.Unboxed.Base.Vector n)
                   (alpha :: n)
                   (beta :: n)
                   (uplo :: GHC.Types.Char) ->
                 case matA of matA1 { DEFAULT ->
                 case vecX of vecX1 { DEFAULT ->
                 case vecY of vecY1 { DEFAULT ->
                 case alpha of alpha1 { DEFAULT ->
                 case beta of beta1 { DEFAULT ->
                 case uplo of uplo1 { GHC.Types.C# ipv ->
                 case GHC.Classes.eqChar uplo1 (GHC.Types.C# 'l'#) of wild {
                   GHC.Types.False
                   -> let {
                        $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                      } in
                      let {
                        $dVector1 :: Data.Vector.Generic.Base.Vector
                                       Data.Vector.Unboxed.Base.Vector n
                        = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                      } in
                      case Data.Vector.Generic.new
                             @ Data.Vector.Unboxed.Base.Vector
                             @ n
                             $dVector1
                             (Data.Vector.Generic.New.unstream
                                @ Data.Vector.Unboxed.Base.Vector
                                @ n
                                $dVector1
                                (Data.Vector.Fusion.Bundle.inplace
                                   @ n
                                   @ n
                                   @ Data.Vector.Unboxed.Base.Vector
                                   (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                    let {
                                      f :: n -> n = GHC.Num.* @ n $dNum1 beta1
                                    } in
                                    Data.Vector.Fusion.Stream.Monadic.mapM
                                      @ m
                                      @ n
                                      @ n
                                      $dMonad
                                      (let {
                                         f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                       } in
                                       \ (x2 :: n) -> f1 (f x2)))
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   (Data.Vector.Generic.stream
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                      vecY1))) of y1 { DEFAULT ->
                      case (Data.Vector.Fusion.Bundle.Monadic.length
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Vector.Unboxed.Base.Vector
                              @ n
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                 @ Data.Vector.Fusion.Util.Id
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 vecX1))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0]
                                <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv1 ->
                      let {
                        $dVector :: Data.Vector.Generic.Base.Vector
                                      Data.Vector.Unboxed.Base.Vector n
                        = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                      } in
                      let {
                        x :: n = GHC.Num.fromInteger @ n $dNum1 0
                      } in
                      case HBLAS.Level2.symvUpperHFlatHelper
                             @ n
                             $dNum1
                             $dUnbox
                             $dFractional
                             matA1
                             (Data.Vector.Generic.Base.elemseq
                                @ Data.Vector.Unboxed.Base.Vector
                                @ n
                                $dVector
                                @ (Data.Vector.Unboxed.Base.Vector n)
                                (GHC.Err.undefined
                                   @ 'GHC.Types.LiftedRep
                                   @ (Data.Vector.Unboxed.Base.Vector n)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Generic"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Generic.hs"#))
                                         (GHC.Types.I# 520#)
                                         (GHC.Types.I# 26#)
                                         (GHC.Types.I# 520#)
                                         (GHC.Types.I# 35#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                x
                                (Data.Vector.Generic.new
                                   @ Data.Vector.Unboxed.Base.Vector
                                   @ n
                                   $dVector
                                   (Data.Vector.Generic.New.unstream
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector
                                      (Data.Vector.Fusion.Bundle.Monadic.replicate
                                         @ Data.Vector.Fusion.Util.Id
                                         @ n
                                         @ Data.Vector.Unboxed.Base.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         n1
                                         x))))
                             vecX1
                             (GHC.Types.I# 0#)
                             n1 of x1 { DEFAULT ->
                      let {
                        $dVector2 :: Data.Vector.Generic.Base.Vector
                                       Data.Vector.Unboxed.Base.Vector n
                        = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                      } in
                      Data.Vector.Generic.new
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector2
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector2
                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                              @ Data.Vector.Fusion.Util.Id
                              @ n
                              @ n
                              @ n
                              @ Data.Vector.Unboxed.Base.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              (\ (a1 :: n) (b1 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 b1 (GHC.Num.* @ n $dNum1 alpha1 a1))
                                `cast`
                              (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 x1)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 y1))) } } }
                   GHC.Types.True
                   -> let {
                        $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                      } in
                      let {
                        $dVector1 :: Data.Vector.Generic.Base.Vector
                                       Data.Vector.Unboxed.Base.Vector n
                        = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                      } in
                      case Data.Vector.Generic.new
                             @ Data.Vector.Unboxed.Base.Vector
                             @ n
                             $dVector1
                             (Data.Vector.Generic.New.unstream
                                @ Data.Vector.Unboxed.Base.Vector
                                @ n
                                $dVector1
                                (Data.Vector.Fusion.Bundle.inplace
                                   @ n
                                   @ n
                                   @ Data.Vector.Unboxed.Base.Vector
                                   (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                    let {
                                      f :: n -> n = GHC.Num.* @ n $dNum1 beta1
                                    } in
                                    Data.Vector.Fusion.Stream.Monadic.mapM
                                      @ m
                                      @ n
                                      @ n
                                      $dMonad
                                      (let {
                                         f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                       } in
                                       \ (x2 :: n) -> f1 (f x2)))
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   (Data.Vector.Generic.stream
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                      vecY1))) of y1 { DEFAULT ->
                      case (Data.Vector.Fusion.Bundle.Monadic.length
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Vector.Unboxed.Base.Vector
                              @ n
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                 @ Data.Vector.Fusion.Util.Id
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 vecX1))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0]
                                <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv1 ->
                      let {
                        $dVector :: Data.Vector.Generic.Base.Vector
                                      Data.Vector.Unboxed.Base.Vector n
                        = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                      } in
                      let {
                        x :: n = GHC.Num.fromInteger @ n $dNum1 0
                      } in
                      case HBLAS.Level2.symvLowerHFlatHelper
                             @ n
                             $dNum1
                             $dUnbox
                             $dFractional
                             matA1
                             (Data.Vector.Generic.Base.elemseq
                                @ Data.Vector.Unboxed.Base.Vector
                                @ n
                                $dVector
                                @ (Data.Vector.Unboxed.Base.Vector n)
                                (GHC.Err.undefined
                                   @ 'GHC.Types.LiftedRep
                                   @ (Data.Vector.Unboxed.Base.Vector n)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Generic"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Generic.hs"#))
                                         (GHC.Types.I# 520#)
                                         (GHC.Types.I# 26#)
                                         (GHC.Types.I# 520#)
                                         (GHC.Types.I# 35#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                x
                                (Data.Vector.Generic.new
                                   @ Data.Vector.Unboxed.Base.Vector
                                   @ n
                                   $dVector
                                   (Data.Vector.Generic.New.unstream
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector
                                      (Data.Vector.Fusion.Bundle.Monadic.replicate
                                         @ Data.Vector.Fusion.Util.Id
                                         @ n
                                         @ Data.Vector.Unboxed.Base.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         n1
                                         x))))
                             vecX1
                             (GHC.Types.I# 0#)
                             n1 of x1 { DEFAULT ->
                      let {
                        $dVector2 :: Data.Vector.Generic.Base.Vector
                                       Data.Vector.Unboxed.Base.Vector n
                        = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                      } in
                      Data.Vector.Generic.new
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector2
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector2
                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                              @ Data.Vector.Fusion.Util.Id
                              @ n
                              @ n
                              @ n
                              @ Data.Vector.Unboxed.Base.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              (\ (a1 :: n) (b1 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 b1 (GHC.Num.* @ n $dNum1 alpha1 a1))
                                `cast`
                              (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 x1)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 y1))) } } } } } } } } } }) -}
565d7ec5a8ee4420172cc7263ac2b22e
  symvFlatHelper2 ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n -> n
  {- Arity: 4,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><S(S(LLLC(S(S))LLLL)L),1*U(1*U(A,A,A,C(U(U)),A,C(C1(C1(U))),A,A),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   (veca :: Data.Vector.Unboxed.Base.Vector n)
                   (vecx :: Data.Vector.Unboxed.Base.Vector n) ->
                 case veca of veca1 { DEFAULT ->
                 case vecx of vecx1 { DEFAULT ->
                 let {
                   f :: n -> n -> n = GHC.Num.+ @ n $dNum
                 } in
                 (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ n
                    @ n
                    @ Data.Vector.Unboxed.Base.Vector
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: n) (b1 :: n)[OneShot] -> f a1 b1)
                      `cast`
                    (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                    (GHC.Num.fromInteger @ n $dNum 0)
                    (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                       @ Data.Vector.Fusion.Util.Id
                       @ n
                       @ n
                       @ n
                       @ Data.Vector.Unboxed.Base.Vector
                       Data.Vector.Fusion.Util.$fMonadId
                       (\ (a1 :: n) (b1 :: n)[OneShot] -> GHC.Num.* @ n $dNum a1 b1)
                         `cast`
                       (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                       (Data.Vector.Generic.stream
                          @ Data.Vector.Unboxed.Base.Vector
                          @ n
                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                          veca1)
                       (Data.Vector.Generic.stream
                          @ Data.Vector.Unboxed.Base.Vector
                          @ n
                          (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                          vecx1)))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0] <n>_R) } }) -}
05790d4c7202fdfa3fe6f7a592329559
  symvLowerH ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> n
    -> n
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><S(S(S(LLLC(C(S))LLLLLLLLL)LLC(S)LLLL)L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: (sat-args=5),
     Unfolding: InlineRule (8, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   ($dFractional :: GHC.Real.Fractional n) ->
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (matA :: Data.Vector.Unboxed.Base.Vector n)
                   (vecX :: Data.Vector.Unboxed.Base.Vector n)
                   (vecY :: Data.Vector.Unboxed.Base.Vector n)
                   (alpha :: n)
                   (beta :: n) ->
                 case matA of matA1 { DEFAULT ->
                 case vecX of vecX1 { DEFAULT ->
                 case vecY of vecY1 { DEFAULT ->
                 case alpha of alpha1 { DEFAULT ->
                 case beta of beta1 { DEFAULT ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 case Data.Vector.Generic.new
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector1
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector1
                           (Data.Vector.Fusion.Bundle.inplace
                              @ n
                              @ n
                              @ Data.Vector.Unboxed.Base.Vector
                              (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                               let {
                                 f :: n -> n = GHC.Num.* @ n $dNum1 beta1
                               } in
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m
                                 @ n
                                 @ n
                                 $dMonad
                                 (let {
                                    f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                  } in
                                  \ (x2 :: n) -> f1 (f x2)))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 vecY1))) of y1 { DEFAULT ->
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            vecX1))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum1 0
                 } in
                 case HBLAS.Level2.symvLowerHFlatHelper
                        @ n
                        $dNum1
                        $dUnbox
                        $dFractional
                        matA1
                        (Data.Vector.Generic.Base.elemseq
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector
                           @ (Data.Vector.Unboxed.Base.Vector n)
                           (GHC.Err.undefined
                              @ 'GHC.Types.LiftedRep
                              @ (Data.Vector.Unboxed.Base.Vector n)
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString# @ b "Data.Vector.Generic"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Generic.hs"#))
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 26#)
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 35#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           x
                           (Data.Vector.Generic.new
                              @ Data.Vector.Unboxed.Base.Vector
                              @ n
                              $dVector
                              (Data.Vector.Generic.New.unstream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector
                                 (Data.Vector.Fusion.Bundle.Monadic.replicate
                                    @ Data.Vector.Fusion.Util.Id
                                    @ n
                                    @ Data.Vector.Unboxed.Base.Vector
                                    Data.Vector.Fusion.Util.$fMonadId
                                    n1
                                    x))))
                        vecX1
                        (GHC.Types.I# 0#)
                        n1 of x1 { DEFAULT ->
                 let {
                   $dVector2 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 Data.Vector.Generic.new
                   @ Data.Vector.Unboxed.Base.Vector
                   @ n
                   $dVector2
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Unboxed.Base.Vector
                      @ n
                      $dVector2
                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ n
                         @ n
                         @ n
                         @ Data.Vector.Unboxed.Base.Vector
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: n) (b1 :: n)[OneShot] ->
                          GHC.Num.+ @ n $dNum1 b1 (GHC.Num.* @ n $dNum1 alpha1 a1))
                           `cast`
                         (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            x1)
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            y1))) } } } } } } } }) -}
3f29be8e8ba33a19d3a9d7ca9e4bce68
  symvLowerHFlatHelper ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Real.Fractional n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wsymvLowerHFlatHelper
                   @ n
                   w1
                   w2
                   w3
                   w4
                   w5
                   ww1
                   ww3 } }) -}
bb70d7394be65884d691c1f706aae00d
  symvUpperH ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> n
    -> n
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><S(S(S(LLLC(C(S))LLLLLLLLL)LLC(S)LLLL)L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,1*C1(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: (sat-args=5),
     Unfolding: InlineRule (8, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   ($dFractional :: GHC.Real.Fractional n) ->
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (matA :: Data.Vector.Unboxed.Base.Vector n)
                   (vecX :: Data.Vector.Unboxed.Base.Vector n)
                   (vecY :: Data.Vector.Unboxed.Base.Vector n)
                   (alpha :: n)
                   (beta :: n) ->
                 case matA of matA1 { DEFAULT ->
                 case vecX of vecX1 { DEFAULT ->
                 case vecY of vecY1 { DEFAULT ->
                 case alpha of alpha1 { DEFAULT ->
                 case beta of beta1 { DEFAULT ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 case Data.Vector.Generic.new
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector1
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector1
                           (Data.Vector.Fusion.Bundle.inplace
                              @ n
                              @ n
                              @ Data.Vector.Unboxed.Base.Vector
                              (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                               let {
                                 f :: n -> n = GHC.Num.* @ n $dNum1 beta1
                               } in
                               Data.Vector.Fusion.Stream.Monadic.mapM
                                 @ m
                                 @ n
                                 @ n
                                 $dMonad
                                 (let {
                                    f1 :: n -> m n = GHC.Base.return @ m $dMonad @ n
                                  } in
                                  \ (x2 :: n) -> f1 (f x2)))
                              (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                                 vecY1))) of y1 { DEFAULT ->
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ n
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            vecX1))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of n1 { GHC.Types.I# ipv ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 let {
                   x :: n = GHC.Num.fromInteger @ n $dNum1 0
                 } in
                 case HBLAS.Level2.symvUpperHFlatHelper
                        @ n
                        $dNum1
                        $dUnbox
                        $dFractional
                        matA1
                        (Data.Vector.Generic.Base.elemseq
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector
                           @ (Data.Vector.Unboxed.Base.Vector n)
                           (GHC.Err.undefined
                              @ 'GHC.Types.LiftedRep
                              @ (Data.Vector.Unboxed.Base.Vector n)
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString# @ b "Data.Vector.Generic"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Generic.hs"#))
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 26#)
                                    (GHC.Types.I# 520#)
                                    (GHC.Types.I# 35#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           x
                           (Data.Vector.Generic.new
                              @ Data.Vector.Unboxed.Base.Vector
                              @ n
                              $dVector
                              (Data.Vector.Generic.New.unstream
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector
                                 (Data.Vector.Fusion.Bundle.Monadic.replicate
                                    @ Data.Vector.Fusion.Util.Id
                                    @ n
                                    @ Data.Vector.Unboxed.Base.Vector
                                    Data.Vector.Fusion.Util.$fMonadId
                                    n1
                                    x))))
                        vecX1
                        (GHC.Types.I# 0#)
                        n1 of x1 { DEFAULT ->
                 let {
                   $dVector2 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 Data.Vector.Generic.new
                   @ Data.Vector.Unboxed.Base.Vector
                   @ n
                   $dVector2
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Unboxed.Base.Vector
                      @ n
                      $dVector2
                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ n
                         @ n
                         @ n
                         @ Data.Vector.Unboxed.Base.Vector
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: n) (b1 :: n)[OneShot] ->
                          GHC.Num.+ @ n $dNum1 b1 (GHC.Num.* @ n $dNum1 alpha1 a1))
                           `cast`
                         (<n>_R ->_R <n>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <n>_R))
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            x1)
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Unboxed.Base.Vector
                            @ n
                            (Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox)
                            y1))) } } } } } } } }) -}
134d9f316940a1c0298f3d5a85ad2fc8
  symvUpperHFlatHelper ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n,
     GHC.Real.Fractional n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w2 :: GHC.Real.Fractional n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wsymvUpperHFlatHelper
                   @ n
                   w1
                   w2
                   w3
                   w4
                   w5
                   ww1
                   ww3 } }) -}
28a4206c7161b5e9be8985b848b56e4b
  trmv ::
    (GHC.Num.Num n, GHC.Real.Fractional n,
     Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Char
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 6,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><S(S(LLLC(S(S))LLLC(C(C(S))))L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,C(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,U><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: GHC.Types.Char) ->
                 case w5 of ww { GHC.Types.C# ww1 ->
                 HBLAS.Level2.$wtrmv @ n w1 w2 w3 w4 ww1 }) -}
098944dc27e2aaa0165c3cfcfac72987
  trmvHelper ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n -> n
  {- Arity: 4,
     Strictness: <S(LLLLLLC(S)),U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><S(S(LLLC(S(S))LLLL)L),1*U(1*U(A,A,A,C(U(U)),A,C(C1(C1(U))),A,A),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   (veca :: Data.Vector.Unboxed.Base.Vector n)
                   (vecx :: Data.Vector.Unboxed.Base.Vector n) ->
                 case veca of veca1 { DEFAULT ->
                 case vecx of vecx1 { DEFAULT ->
                 let {
                   $dVector :: Data.Vector.Generic.Base.Vector
                                 Data.Vector.Unboxed.Base.Vector n
                   = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                 } in
                 case Data.Vector.Generic.Base.basicLength
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector
                        veca1 of n1 { GHC.Types.I# ipv ->
                 case Data.Vector.Generic.Base.basicLength
                        @ Data.Vector.Unboxed.Base.Vector
                        @ n
                        $dVector
                        vecx1 of n2 { GHC.Types.I# ipv1 ->
                 letrec {
                   $s$wfoldlM'_loop :: GHC.Prim.Int# -> GHC.Prim.Int# -> n -> n
                     <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,1*U> -}
                   = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) (sc2 :: n) ->
                     case sc2 of z2 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# sc1 ipv) of wild {
                       GHC.Types.False
                       -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ n
                                 $dVector
                                 @ Data.Vector.Fusion.Util.Box
                                 Data.Vector.Fusion.Util.$fMonadBox
                                 veca1
                                 (GHC.Types.I# sc1) of wild1 { Data.Vector.Fusion.Util.Box x ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# sc ipv1) of wild2 {
                            GHC.Types.False
                            -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ n
                                      $dVector
                                      @ Data.Vector.Fusion.Util.Box
                                      Data.Vector.Fusion.Util.$fMonadBox
                                      vecx1
                                      (GHC.Types.I# sc) of wild3 { Data.Vector.Fusion.Util.Box x1 ->
                               $s$wfoldlM'_loop
                                 (GHC.Prim.+# sc 1#)
                                 (GHC.Prim.+# sc1 1#)
                                 (GHC.Num.+ @ n $dNum z2 (GHC.Num.* @ n $dNum x x1)) }
                            GHC.Types.True -> z2 } }
                       GHC.Types.True -> z2 } }
                 } in
                 $s$wfoldlM'_loop
                   0#
                   0#
                   (GHC.Num.fromInteger
                      @ n
                      $dNum
                      HBLAS.Level2.trmvHelper1) } } } }) -}
04f1af61914c339e7b649fc928fa4e15
  trmvHelper1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
5b349ced4e4a055944ce73fc55930fd2
  trmvLower ::
    (GHC.Num.Num n, GHC.Real.Fractional n,
     Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wtrmvLower @ n w1 w2 w3 w4 w5 ww1 ww3 } }) -}
f1b4465695a4b3a748779fce35230ab3
  trmvUpper ::
    (GHC.Num.Num n, GHC.Real.Fractional n,
     Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 8,
     Strictness: <L,A><L,U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),A,A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wtrmvUpper @ n w1 w2 w3 w4 w5 ww1 ww3 } }) -}
4f98e524c7548178ef1de14d3fb7c6a5
  trsv ::
    (GHC.Num.Num n, GHC.Real.Fractional n,
     Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Char
    -> Data.Vector.Unboxed.Base.Vector n
  {- Arity: 6,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><S(S(LLLC(S(S))LLLC(C(C(S))))L),U(U(U(C(U(U)),C(C1(C1(U))),A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,C(C1(C1(U))),A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,U><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: GHC.Types.Char) ->
                 case w5 of ww { GHC.Types.C# ww1 ->
                 HBLAS.Level2.$wtrsv @ n w1 w2 w3 w4 ww1 }) -}
26dadd8c21406e88f3faad1287fee87a
  trsvHelper ::
    (GHC.Num.Num n, Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n -> n -> n
  {- Arity: 5,
     Strictness: <S(LC(C(S))LLLLL),U(C(C1(U)),1*C1(C1(U)),C(C1(U)),A,A,A,1*C1(U))><L,1*U(1*U(A,A,A,C(U(U)),A,C(C1(C1(U))),A,A),A)><S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox n)
                   (veca :: Data.Vector.Unboxed.Base.Vector n)
                   (vecx :: Data.Vector.Unboxed.Base.Vector n)
                   (valueb :: n) ->
                 case veca of veca1 { DEFAULT ->
                 case vecx of vecx1 { DEFAULT ->
                 case valueb of valueb1 { DEFAULT ->
                 GHC.Num.-
                   @ n
                   $dNum
                   valueb1
                   (let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    Data.Vector.Unboxed.Base.Vector n
                      = Data.Vector.Unboxed.Base.$p1Unbox @ n $dUnbox
                    } in
                    case Data.Vector.Generic.Base.basicLength
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector
                           veca1 of n1 { GHC.Types.I# ipv ->
                    case Data.Vector.Generic.Base.basicLength
                           @ Data.Vector.Unboxed.Base.Vector
                           @ n
                           $dVector
                           vecx1 of n2 { GHC.Types.I# ipv1 ->
                    letrec {
                      $s$wfoldlM'_loop :: GHC.Prim.Int# -> GHC.Prim.Int# -> n -> n
                        <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,1*U> -}
                      = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) (sc2 :: n) ->
                        case sc2 of z2 { DEFAULT ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.>=# sc1 ipv) of wild {
                          GHC.Types.False
                          -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                    @ Data.Vector.Unboxed.Base.Vector
                                    @ n
                                    $dVector
                                    @ Data.Vector.Fusion.Util.Box
                                    Data.Vector.Fusion.Util.$fMonadBox
                                    veca1
                                    (GHC.Types.I# sc1) of wild1 { Data.Vector.Fusion.Util.Box x ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# sc ipv1) of wild2 {
                               GHC.Types.False
                               -> case Data.Vector.Generic.Base.basicUnsafeIndexM
                                         @ Data.Vector.Unboxed.Base.Vector
                                         @ n
                                         $dVector
                                         @ Data.Vector.Fusion.Util.Box
                                         Data.Vector.Fusion.Util.$fMonadBox
                                         vecx1
                                         (GHC.Types.I#
                                            sc) of wild3 { Data.Vector.Fusion.Util.Box x1 ->
                                  $s$wfoldlM'_loop
                                    (GHC.Prim.+# sc 1#)
                                    (GHC.Prim.+# sc1 1#)
                                    (GHC.Num.+ @ n $dNum z2 (GHC.Num.* @ n $dNum x x1)) }
                               GHC.Types.True -> z2 } }
                          GHC.Types.True -> z2 } }
                    } in
                    $s$wfoldlM'_loop
                      0#
                      0#
                      (GHC.Num.fromInteger
                         @ n
                         $dNum
                         HBLAS.Level2.trmvHelper1) } }) } } }) -}
149e74e7502b670b68de040d15da7d15
  trsvLower ::
    (GHC.Num.Num n, GHC.Real.Fractional n,
     Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Data.Vector.Unboxed.Base.Vector n,
        Data.Vector.Unboxed.Base.Vector n)
  {- Arity: 8,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wtrsvLower @ n w1 w2 w3 w4 w5 ww1 ww3 } }) -}
32395e14617ff3501d0c6add82dd48f9
  trsvUpper ::
    (GHC.Num.Num n, GHC.Real.Fractional n,
     Data.Vector.Unboxed.Base.Unbox n) =>
    Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> Data.Vector.Unboxed.Base.Vector n
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Data.Vector.Unboxed.Base.Vector n,
        Data.Vector.Unboxed.Base.Vector n)
  {- Arity: 8,
     Strictness: <L,A><L,U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U(U(C(U(U)),A,A,C(C1(U)),C(C1(U)),A,A,C(C1(C1(C1(U)))),A,A,A,A,A),C(C1(U)),A,C(U(U)),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(U)))),U(A,C(C1(C1(U))),A,C(C1(U)),A,A,A,C(C1(C1(C1(U)))),A,A,A,A,A))><S,1*U><S,1*U><S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: Data.Vector.Unboxed.Base.Unbox n)
                   (w3 :: Data.Vector.Unboxed.Base.Vector n)
                   (w4 :: Data.Vector.Unboxed.Base.Vector n)
                   (w5 :: Data.Vector.Unboxed.Base.Vector n)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 case w7 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.Level2.$wtrsvUpper @ n w1 w2 w3 w4 w5 ww1 ww3 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

