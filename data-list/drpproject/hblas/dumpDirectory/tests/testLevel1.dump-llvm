
==================== LLVM Code ====================
2019-04-26 20:55:44.540467 UTC

target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin"


==================== LLVM Code ====================
2019-04-26 20:55:44.541129 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2019-04-26 20:55:44.541505 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2019-04-26 20:55:44.542342 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2019-04-26 20:55:44.543743 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.544425 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2019-04-26 20:55:44.545343 UTC



==================== LLVM Code ====================
2019-04-26 20:55:44.547805 UTC

%r8x7_closure_struct = type <{i64, i64}>
@r8x7_closure$def = internal global %r8x7_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 0}>
@r8x7_closure = internal alias i8, bitcast (%r8x7_closure_struct* @r8x7_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.548384 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.548879 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.549727 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.551301 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.553938 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.555552 UTC

%u8z0_srt_struct = type <{i64, i64, i64}>
%r8x8_closure_struct = type <{i64, i64, i64, i64}>
@u8z0_srt$def = internal global %u8z0_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_closure to i64), i64 0}>
@u8z0_srt = internal alias i8, bitcast (%u8z0_srt_struct* @u8z0_srt$def to i8*)
@r8x8_closure$def = internal global %r8x8_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8x8_info$def to i64), i64 0, i64 0, i64 0}>
@r8x8_closure = internal alias i8, bitcast (%r8x8_closure_struct* @r8x8_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.558021 UTC

@r8x8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8x8_info$def to i8*)
define internal ghccc void @r8x8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8z0_srt_struct* @u8z0_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8x8_info$def to i64)) to i32),i32 0)}>
{
c8yX:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8yU = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8z1 = load i64*, i64** %Sp_Var
  %ln8z2 = getelementptr inbounds i64, i64* %ln8z1, i32 -2
  %ln8z3 = ptrtoint i64* %ln8z2 to i64
  %ln8z4 = icmp ult i64 %ln8z3, %SpLim_Arg
  %ln8z6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8z4, i1 0 )
  br i1 %ln8z6, label %c8yY, label %c8yZ
c8yZ:
  %ln8z7 = ptrtoint i64* %Base_Arg to i64
  %ln8z8 = inttoptr i64 %ln8z7 to i8*
  %ln8z9 = load i64, i64* %R1_Var
  %ln8za = inttoptr i64 %ln8z9 to i8*
  %ln8zb = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8zc = call ccc i8* (i8*, i8*) %ln8zb( i8* %ln8z8, i8* %ln8za ) nounwind
  %ln8zd = ptrtoint i8* %ln8zc to i64
  store i64 %ln8zd, i64* %lc8yU
  %ln8ze = load i64, i64* %lc8yU
  %ln8zf = icmp eq i64 %ln8ze, 0
  br i1 %ln8zf, label %c8yW, label %c8yV
c8yV:
  %ln8zh = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8zg = load i64*, i64** %Sp_Var
  %ln8zi = getelementptr inbounds i64, i64* %ln8zg, i32 -2
  store i64 %ln8zh, i64* %ln8zi, !tbaa !2
  %ln8zk = load i64, i64* %lc8yU
  %ln8zj = load i64*, i64** %Sp_Var
  %ln8zl = getelementptr inbounds i64, i64* %ln8zj, i32 -1
  store i64 %ln8zk, i64* %ln8zl, !tbaa !2
  store i64 1000, i64* %R5_Var
  %ln8zm = ptrtoint %r8x7_closure_struct* @r8x7_closure$def to i64
  %ln8zn = add i64 %ln8zm, 1
  store i64 %ln8zn, i64* %R4_Var
  store i64 0, i64* %R3_Var
  %ln8zo = ptrtoint i8* @base_GHCziFloat_zdfNumFloat_closure to i64
  store i64 %ln8zo, i64* %R2_Var
  %ln8zp = load i64*, i64** %Sp_Var
  %ln8zq = getelementptr inbounds i64, i64* %ln8zp, i32 -2
  %ln8zr = ptrtoint i64* %ln8zq to i64
  %ln8zs = inttoptr i64 %ln8zr to i64*
  store i64* %ln8zs, i64** %Sp_Var
  %ln8zt = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zu = load i64*, i64** %Sp_Var
  %ln8zv = load i64, i64* %R1_Var
  %ln8zw = load i64, i64* %R2_Var
  %ln8zx = load i64, i64* %R3_Var
  %ln8zy = load i64, i64* %R4_Var
  %ln8zz = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zt( i64* %Base_Arg, i64* %ln8zu, i64* %Hp_Arg, i64 %ln8zv, i64 %ln8zw, i64 %ln8zx, i64 %ln8zy, i64 %ln8zz, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8yW:
  %ln8zB = load i64, i64* %R1_Var
  %ln8zC = inttoptr i64 %ln8zB to i64*
  %ln8zD = load i64, i64* %ln8zC, !tbaa !4
  %ln8zE = inttoptr i64 %ln8zD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zF = load i64*, i64** %Sp_Var
  %ln8zG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zE( i64* %Base_Arg, i64* %ln8zF, i64* %Hp_Arg, i64 %ln8zG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8yY:
  %ln8zH = load i64, i64* %R1_Var
  store i64 %ln8zH, i64* %R1_Var
  %ln8zI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8zJ = bitcast i64* %ln8zI to i64*
  %ln8zK = load i64, i64* %ln8zJ, !tbaa !5
  %ln8zL = inttoptr i64 %ln8zK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zM = load i64*, i64** %Sp_Var
  %ln8zN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zL( i64* %Base_Arg, i64* %ln8zM, i64* %Hp_Arg, i64 %ln8zN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2019-04-26 20:55:44.561758 UTC

%r8x9_bytes_struct = type <{[12 x i8]}>
@r8x9_bytes$def = internal constant %r8x9_bytes_struct<{[12 x i8] [i8 65, i8 88, i8 80, i8 89, i8 65, i8 88, i8 80, i8 89, i8 32, i8 58, i8 32, i8 0]}>, align 1
@r8x9_bytes = internal alias i8, bitcast (%r8x9_bytes_struct* @r8x9_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.562385 UTC

%r8xa_closure_struct = type <{i64, i64}>
@r8xa_closure$def = internal global %r8xa_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_con_info to i64), i64 1000000000000000000}>
@r8xa_closure = internal alias i8, bitcast (%r8xa_closure_struct* @r8xa_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.563358 UTC

%r8xb_closure_struct = type <{i64, float, i32}>
@r8xb_closure$def = internal global %r8xb_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Fzh_con_info to i64), float 0x3FF0000000000000, i32 0}>
@r8xb_closure = internal alias i8, bitcast (%r8xb_closure_struct* @r8xb_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.564074 UTC

%r8xc_bytes_struct = type <{[13 x i8]}>
@r8xc_bytes$def = internal constant %r8xc_bytes_struct<{[13 x i8] [i8 86, i8 101, i8 99, i8 116, i8 111, i8 114, i8 32, i8 115, i8 105, i8 122, i8 101, i8 32, i8 0]}>, align 1
@r8xc_bytes = internal alias i8, bitcast (%r8xc_bytes_struct* @r8xc_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.565749 UTC

%r8xd_bytes_struct = type <{[3 x i8]}>
@r8xd_bytes$def = internal constant %r8xd_bytes_struct<{[3 x i8] [i8 58, i8 32, i8 0]}>, align 1
@r8xd_bytes = internal alias i8, bitcast (%r8xd_bytes_struct* @r8xd_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.567127 UTC

%r8xe_closure_struct = type <{i64, i64, i64, i64}>
@r8xe_closure$def = internal global %r8xe_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xe_info$def to i64), i64 0, i64 0, i64 0}>
@r8xe_closure = internal alias i8, bitcast (%r8xe_closure_struct* @r8xe_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.569087 UTC

@r8xe_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xe_info$def to i8*)
define internal ghccc void @r8xe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
c8zU:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8zR = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8zX = load i64*, i64** %Sp_Var
  %ln8zY = getelementptr inbounds i64, i64* %ln8zX, i32 -2
  %ln8zZ = ptrtoint i64* %ln8zY to i64
  %ln8A0 = icmp ult i64 %ln8zZ, %SpLim_Arg
  %ln8A1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8A0, i1 0 )
  br i1 %ln8A1, label %c8zV, label %c8zW
c8zW:
  %ln8A2 = ptrtoint i64* %Base_Arg to i64
  %ln8A3 = inttoptr i64 %ln8A2 to i8*
  %ln8A4 = load i64, i64* %R1_Var
  %ln8A5 = inttoptr i64 %ln8A4 to i8*
  %ln8A6 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8A7 = call ccc i8* (i8*, i8*) %ln8A6( i8* %ln8A3, i8* %ln8A5 ) nounwind
  %ln8A8 = ptrtoint i8* %ln8A7 to i64
  store i64 %ln8A8, i64* %lc8zR
  %ln8A9 = load i64, i64* %lc8zR
  %ln8Aa = icmp eq i64 %ln8A9, 0
  br i1 %ln8Aa, label %c8zT, label %c8zS
c8zS:
  %ln8Ac = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Ab = load i64*, i64** %Sp_Var
  %ln8Ad = getelementptr inbounds i64, i64* %ln8Ab, i32 -2
  store i64 %ln8Ac, i64* %ln8Ad, !tbaa !2
  %ln8Af = load i64, i64* %lc8zR
  %ln8Ae = load i64*, i64** %Sp_Var
  %ln8Ag = getelementptr inbounds i64, i64* %ln8Ae, i32 -1
  store i64 %ln8Af, i64* %ln8Ag, !tbaa !2
  %ln8Ah = ptrtoint %r8xd_bytes_struct* @r8xd_bytes$def to i64
  store i64 %ln8Ah, i64* %R2_Var
  %ln8Ai = load i64*, i64** %Sp_Var
  %ln8Aj = getelementptr inbounds i64, i64* %ln8Ai, i32 -2
  %ln8Ak = ptrtoint i64* %ln8Aj to i64
  %ln8Al = inttoptr i64 %ln8Ak to i64*
  store i64* %ln8Al, i64** %Sp_Var
  %ln8Am = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8An = load i64*, i64** %Sp_Var
  %ln8Ao = load i64, i64* %R1_Var
  %ln8Ap = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Am( i64* %Base_Arg, i64* %ln8An, i64* %Hp_Arg, i64 %ln8Ao, i64 %ln8Ap, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8zT:
  %ln8Ar = load i64, i64* %R1_Var
  %ln8As = inttoptr i64 %ln8Ar to i64*
  %ln8At = load i64, i64* %ln8As, !tbaa !4
  %ln8Au = inttoptr i64 %ln8At to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Av = load i64*, i64** %Sp_Var
  %ln8Aw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Au( i64* %Base_Arg, i64* %ln8Av, i64* %Hp_Arg, i64 %ln8Aw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8zV:
  %ln8Ax = load i64, i64* %R1_Var
  store i64 %ln8Ax, i64* %R1_Var
  %ln8Ay = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Az = bitcast i64* %ln8Ay to i64*
  %ln8AA = load i64, i64* %ln8Az, !tbaa !5
  %ln8AB = inttoptr i64 %ln8AA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8AC = load i64*, i64** %Sp_Var
  %ln8AD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8AB( i64* %Base_Arg, i64* %ln8AC, i64* %Hp_Arg, i64 %ln8AD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.573693 UTC

%r8xf_closure_struct = type <{i64, i64, i64, i64}>
@r8xf_closure$def = internal global %r8xf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xf_info$def to i64), i64 0, i64 0, i64 0}>
@r8xf_closure = internal alias i8, bitcast (%r8xf_closure_struct* @r8xf_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.576598 UTC

@r8xf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xf_info$def to i8*)
define internal ghccc void @r8xf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8xe_closure_struct* @r8xe_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xf_info$def to i64)) to i32),i32 0)}>
{
c8AM:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8AH = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8AQ = load i64*, i64** %Sp_Var
  %ln8AR = getelementptr inbounds i64, i64* %ln8AQ, i32 -3
  %ln8AS = ptrtoint i64* %ln8AR to i64
  %ln8AT = icmp ult i64 %ln8AS, %SpLim_Arg
  %ln8AU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8AT, i1 0 )
  br i1 %ln8AU, label %c8AN, label %c8AO
c8AO:
  %ln8AV = ptrtoint i64* %Base_Arg to i64
  %ln8AW = inttoptr i64 %ln8AV to i8*
  %ln8AX = load i64, i64* %R1_Var
  %ln8AY = inttoptr i64 %ln8AX to i8*
  %ln8AZ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8B0 = call ccc i8* (i8*, i8*) %ln8AZ( i8* %ln8AW, i8* %ln8AY ) nounwind
  %ln8B1 = ptrtoint i8* %ln8B0 to i64
  store i64 %ln8B1, i64* %lc8AH
  %ln8B2 = load i64, i64* %lc8AH
  %ln8B3 = icmp eq i64 %ln8B2, 0
  br i1 %ln8B3, label %c8AJ, label %c8AI
c8AI:
  %ln8B5 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8B4 = load i64*, i64** %Sp_Var
  %ln8B6 = getelementptr inbounds i64, i64* %ln8B4, i32 -2
  store i64 %ln8B5, i64* %ln8B6, !tbaa !2
  %ln8B8 = load i64, i64* %lc8AH
  %ln8B7 = load i64*, i64** %Sp_Var
  %ln8B9 = getelementptr inbounds i64, i64* %ln8B7, i32 -1
  store i64 %ln8B8, i64* %ln8B9, !tbaa !2
  %ln8Bb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8AK_info$def to i64
  %ln8Ba = load i64*, i64** %Sp_Var
  %ln8Bc = getelementptr inbounds i64, i64* %ln8Ba, i32 -3
  store i64 %ln8Bb, i64* %ln8Bc, !tbaa !2
  %ln8Bd = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln8Be = add i64 %ln8Bd, 1
  store i64 %ln8Be, i64* %R4_Var
  store i64 1000, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln8Bf = load i64*, i64** %Sp_Var
  %ln8Bg = getelementptr inbounds i64, i64* %ln8Bf, i32 -3
  %ln8Bh = ptrtoint i64* %ln8Bg to i64
  %ln8Bi = inttoptr i64 %ln8Bh to i64*
  store i64* %ln8Bi, i64** %Sp_Var
  %ln8Bj = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bk = load i64*, i64** %Sp_Var
  %ln8Bl = load i64, i64* %R1_Var
  %ln8Bm = load i64, i64* %R2_Var
  %ln8Bn = load i64, i64* %R3_Var
  %ln8Bo = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bj( i64* %Base_Arg, i64* %ln8Bk, i64* %Hp_Arg, i64 %ln8Bl, i64 %ln8Bm, i64 %ln8Bn, i64 %ln8Bo, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8AJ:
  %ln8Bq = load i64, i64* %R1_Var
  %ln8Br = inttoptr i64 %ln8Bq to i64*
  %ln8Bs = load i64, i64* %ln8Br, !tbaa !4
  %ln8Bt = inttoptr i64 %ln8Bs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bu = load i64*, i64** %Sp_Var
  %ln8Bv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bt( i64* %Base_Arg, i64* %ln8Bu, i64* %Hp_Arg, i64 %ln8Bv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8AN:
  %ln8Bw = load i64, i64* %R1_Var
  store i64 %ln8Bw, i64* %R1_Var
  %ln8Bx = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8By = bitcast i64* %ln8Bx to i64*
  %ln8Bz = load i64, i64* %ln8By, !tbaa !5
  %ln8BA = inttoptr i64 %ln8Bz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8BB = load i64*, i64** %Sp_Var
  %ln8BC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8BA( i64* %Base_Arg, i64* %ln8BB, i64* %Hp_Arg, i64 %ln8BC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.581039 UTC

@c8AK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8AK_info$def to i8*)
define internal ghccc void @c8AK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8xe_closure_struct* @r8xe_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8AK_info$def to i64)) to i32),i32 0)}>
{
c8AK:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8BD = load i64, i64* %R2_Var
  store i64 %ln8BD, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln8BE = ptrtoint %r8xe_closure_struct* @r8xe_closure$def to i64
  store i64 %ln8BE, i64* %R2_Var
  %ln8BF = load i64*, i64** %Sp_Var
  %ln8BG = getelementptr inbounds i64, i64* %ln8BF, i32 1
  %ln8BH = ptrtoint i64* %ln8BG to i64
  %ln8BI = inttoptr i64 %ln8BH to i64*
  store i64* %ln8BI, i64** %Sp_Var
  %ln8BJ = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8BK = load i64*, i64** %Sp_Var
  %ln8BL = load i64, i64* %R2_Var
  %ln8BM = load i64, i64* %R3_Var
  %ln8BN = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8BJ( i64* %Base_Arg, i64* %ln8BK, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8BL, i64 %ln8BM, i64 %ln8BN, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.582843 UTC

%r8xg_closure_struct = type <{i64, i64, i64, i64}>
@r8xg_closure$def = internal global %r8xg_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xg_info$def to i64), i64 0, i64 0, i64 0}>
@r8xg_closure = internal alias i8, bitcast (%r8xg_closure_struct* @r8xg_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.58544 UTC

@r8xg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xg_info$def to i8*)
define internal ghccc void @r8xg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8xf_closure_struct* @r8xf_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xg_info$def to i64)) to i32),i32 0)}>
{
c8BU:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8BR = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8BX = load i64*, i64** %Sp_Var
  %ln8BY = getelementptr inbounds i64, i64* %ln8BX, i32 -2
  %ln8BZ = ptrtoint i64* %ln8BY to i64
  %ln8C0 = icmp ult i64 %ln8BZ, %SpLim_Arg
  %ln8C1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8C0, i1 0 )
  br i1 %ln8C1, label %c8BV, label %c8BW
c8BW:
  %ln8C2 = ptrtoint i64* %Base_Arg to i64
  %ln8C3 = inttoptr i64 %ln8C2 to i8*
  %ln8C4 = load i64, i64* %R1_Var
  %ln8C5 = inttoptr i64 %ln8C4 to i8*
  %ln8C6 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8C7 = call ccc i8* (i8*, i8*) %ln8C6( i8* %ln8C3, i8* %ln8C5 ) nounwind
  %ln8C8 = ptrtoint i8* %ln8C7 to i64
  store i64 %ln8C8, i64* %lc8BR
  %ln8C9 = load i64, i64* %lc8BR
  %ln8Ca = icmp eq i64 %ln8C9, 0
  br i1 %ln8Ca, label %c8BT, label %c8BS
c8BS:
  %ln8Cc = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Cb = load i64*, i64** %Sp_Var
  %ln8Cd = getelementptr inbounds i64, i64* %ln8Cb, i32 -2
  store i64 %ln8Cc, i64* %ln8Cd, !tbaa !2
  %ln8Cf = load i64, i64* %lc8BR
  %ln8Ce = load i64*, i64** %Sp_Var
  %ln8Cg = getelementptr inbounds i64, i64* %ln8Ce, i32 -1
  store i64 %ln8Cf, i64* %ln8Cg, !tbaa !2
  %ln8Ch = ptrtoint %r8xf_closure_struct* @r8xf_closure$def to i64
  store i64 %ln8Ch, i64* %R3_Var
  %ln8Ci = ptrtoint %r8xc_bytes_struct* @r8xc_bytes$def to i64
  store i64 %ln8Ci, i64* %R2_Var
  %ln8Cj = load i64*, i64** %Sp_Var
  %ln8Ck = getelementptr inbounds i64, i64* %ln8Cj, i32 -2
  %ln8Cl = ptrtoint i64* %ln8Ck to i64
  %ln8Cm = inttoptr i64 %ln8Cl to i64*
  store i64* %ln8Cm, i64** %Sp_Var
  %ln8Cn = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Co = load i64*, i64** %Sp_Var
  %ln8Cp = load i64, i64* %R1_Var
  %ln8Cq = load i64, i64* %R2_Var
  %ln8Cr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Cn( i64* %Base_Arg, i64* %ln8Co, i64* %Hp_Arg, i64 %ln8Cp, i64 %ln8Cq, i64 %ln8Cr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8BT:
  %ln8Ct = load i64, i64* %R1_Var
  %ln8Cu = inttoptr i64 %ln8Ct to i64*
  %ln8Cv = load i64, i64* %ln8Cu, !tbaa !4
  %ln8Cw = inttoptr i64 %ln8Cv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Cx = load i64*, i64** %Sp_Var
  %ln8Cy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Cw( i64* %Base_Arg, i64* %ln8Cx, i64* %Hp_Arg, i64 %ln8Cy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8BV:
  %ln8Cz = load i64, i64* %R1_Var
  store i64 %ln8Cz, i64* %R1_Var
  %ln8CA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8CB = bitcast i64* %ln8CA to i64*
  %ln8CC = load i64, i64* %ln8CB, !tbaa !5
  %ln8CD = inttoptr i64 %ln8CC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8CE = load i64*, i64** %Sp_Var
  %ln8CF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8CD( i64* %Base_Arg, i64* %ln8CE, i64* %Hp_Arg, i64 %ln8CF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.589605 UTC

%r8xh_closure_struct = type <{i64, i64, i64, i64}>
@r8xh_closure$def = internal global %r8xh_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xh_info$def to i64), i64 0, i64 0, i64 0}>
@r8xh_closure = internal alias i8, bitcast (%r8xh_closure_struct* @r8xh_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.592811 UTC

@r8xh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xh_info$def to i8*)
define internal ghccc void @r8xh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r8x8_closure_struct* @r8x8_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xh_info$def to i64)) to i32),i32 0)}>
{
c8CP:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8CJ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8D2 = load i64*, i64** %Sp_Var
  %ln8D3 = getelementptr inbounds i64, i64* %ln8D2, i32 -3
  %ln8D4 = ptrtoint i64* %ln8D3 to i64
  %ln8D5 = icmp ult i64 %ln8D4, %SpLim_Arg
  %ln8D6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8D5, i1 0 )
  br i1 %ln8D6, label %c8CV, label %c8CW
c8CW:
  %ln8D7 = ptrtoint i64* %Base_Arg to i64
  %ln8D8 = inttoptr i64 %ln8D7 to i8*
  %ln8D9 = load i64, i64* %R1_Var
  %ln8Da = inttoptr i64 %ln8D9 to i8*
  %ln8Db = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8Dc = call ccc i8* (i8*, i8*) %ln8Db( i8* %ln8D8, i8* %ln8Da ) nounwind
  %ln8Dd = ptrtoint i8* %ln8Dc to i64
  store i64 %ln8Dd, i64* %lc8CJ
  %ln8De = load i64, i64* %lc8CJ
  %ln8Df = icmp eq i64 %ln8De, 0
  br i1 %ln8Df, label %c8CL, label %c8CK
c8CK:
  %ln8Dh = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Dg = load i64*, i64** %Sp_Var
  %ln8Di = getelementptr inbounds i64, i64* %ln8Dg, i32 -2
  store i64 %ln8Dh, i64* %ln8Di, !tbaa !2
  %ln8Dk = load i64, i64* %lc8CJ
  %ln8Dj = load i64*, i64** %Sp_Var
  %ln8Dl = getelementptr inbounds i64, i64* %ln8Dj, i32 -1
  store i64 %ln8Dk, i64* %ln8Dl, !tbaa !2
  %ln8Dn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CM_info$def to i64
  %ln8Dm = load i64*, i64** %Sp_Var
  %ln8Do = getelementptr inbounds i64, i64* %ln8Dm, i32 -3
  store i64 %ln8Dn, i64* %ln8Do, !tbaa !2
  %ln8Dp = ptrtoint %r8x8_closure_struct* @r8x8_closure$def to i64
  store i64 %ln8Dp, i64* %R1_Var
  %ln8Dq = load i64*, i64** %Sp_Var
  %ln8Dr = getelementptr inbounds i64, i64* %ln8Dq, i32 -3
  %ln8Ds = ptrtoint i64* %ln8Dr to i64
  %ln8Dt = inttoptr i64 %ln8Ds to i64*
  store i64* %ln8Dt, i64** %Sp_Var
  %ln8Du = load i64, i64* %R1_Var
  %ln8Dv = and i64 %ln8Du, 7
  %ln8Dw = icmp ne i64 %ln8Dv, 0
  br i1 %ln8Dw, label %u8D1, label %c8CN
c8CN:
  %ln8Dy = load i64, i64* %R1_Var
  %ln8Dz = inttoptr i64 %ln8Dy to i64*
  %ln8DA = load i64, i64* %ln8Dz, !tbaa !4
  %ln8DB = inttoptr i64 %ln8DA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DC = load i64*, i64** %Sp_Var
  %ln8DD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DB( i64* %Base_Arg, i64* %ln8DC, i64* %Hp_Arg, i64 %ln8DD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8D1:
  %ln8DE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DF = load i64*, i64** %Sp_Var
  %ln8DG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DE( i64* %Base_Arg, i64* %ln8DF, i64* %Hp_Arg, i64 %ln8DG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8CL:
  %ln8DI = load i64, i64* %R1_Var
  %ln8DJ = inttoptr i64 %ln8DI to i64*
  %ln8DK = load i64, i64* %ln8DJ, !tbaa !4
  %ln8DL = inttoptr i64 %ln8DK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DM = load i64*, i64** %Sp_Var
  %ln8DN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DL( i64* %Base_Arg, i64* %ln8DM, i64* %Hp_Arg, i64 %ln8DN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8CV:
  %ln8DO = load i64, i64* %R1_Var
  store i64 %ln8DO, i64* %R1_Var
  %ln8DP = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8DQ = bitcast i64* %ln8DP to i64*
  %ln8DR = load i64, i64* %ln8DQ, !tbaa !5
  %ln8DS = inttoptr i64 %ln8DR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DT = load i64*, i64** %Sp_Var
  %ln8DU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DS( i64* %Base_Arg, i64* %ln8DT, i64* %Hp_Arg, i64 %ln8DU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.596632 UTC

@c8CM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CM_info$def to i8*)
define internal ghccc void @c8CM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c8CM:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8DV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CS_info$def to i64
  %ln8DW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8DV, i64* %ln8DW, !tbaa !2
  %ln8DX = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln8DY = add i64 %ln8DX, 1
  store i64 %ln8DY, i64* %R4_Var
  %ln8DZ = add i64 %R1_Arg, 23
  %ln8E0 = inttoptr i64 %ln8DZ to i64*
  %ln8E1 = load i64, i64* %ln8E0, !tbaa !4
  store i64 %ln8E1, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln8E2 = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8E3 = load i64, i64* %R2_Var
  %ln8E4 = load i64, i64* %R3_Var
  %ln8E5 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8E2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8E3, i64 %ln8E4, i64 %ln8E5, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.598438 UTC

@c8CS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CS_info$def to i8*)
define internal ghccc void @c8CS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
c8CS:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8E6 = load i64*, i64** %Hp_Var
  %ln8E7 = getelementptr inbounds i64, i64* %ln8E6, i32 3
  %ln8E8 = ptrtoint i64* %ln8E7 to i64
  %ln8E9 = inttoptr i64 %ln8E8 to i64*
  store i64* %ln8E9, i64** %Hp_Var
  %ln8Ea = load i64*, i64** %Hp_Var
  %ln8Eb = ptrtoint i64* %ln8Ea to i64
  %ln8Ec = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Ed = bitcast i64* %ln8Ec to i64*
  %ln8Ee = load i64, i64* %ln8Ed, !tbaa !5
  %ln8Ef = icmp ugt i64 %ln8Eb, %ln8Ee
  %ln8Eg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Ef, i1 0 )
  br i1 %ln8Eg, label %c8D0, label %c8CZ
c8CZ:
  %ln8Ei = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln8Eh = load i64*, i64** %Hp_Var
  %ln8Ej = getelementptr inbounds i64, i64* %ln8Eh, i32 -2
  store i64 %ln8Ei, i64* %ln8Ej, !tbaa !3
  %ln8El = load i64, i64* %R1_Var
  %ln8Ek = load i64*, i64** %Hp_Var
  %ln8Em = getelementptr inbounds i64, i64* %ln8Ek, i32 -1
  store i64 %ln8El, i64* %ln8Em, !tbaa !3
  %ln8Eo = load i64, i64* %R2_Var
  %ln8En = load i64*, i64** %Hp_Var
  %ln8Ep = getelementptr inbounds i64, i64* %ln8En, i32 0
  store i64 %ln8Eo, i64* %ln8Ep, !tbaa !3
  %ln8Er = load i64*, i64** %Hp_Var
  %ln8Es = ptrtoint i64* %ln8Er to i64
  %ln8Et = add i64 %ln8Es, -14
  store i64 %ln8Et, i64* %R1_Var
  %ln8Eu = load i64*, i64** %Sp_Var
  %ln8Ev = getelementptr inbounds i64, i64* %ln8Eu, i32 1
  %ln8Ew = ptrtoint i64* %ln8Ev to i64
  %ln8Ex = inttoptr i64 %ln8Ew to i64*
  store i64* %ln8Ex, i64** %Sp_Var
  %ln8Ey = load i64*, i64** %Sp_Var
  %ln8Ez = getelementptr inbounds i64, i64* %ln8Ey, i32 0
  %ln8EA = bitcast i64* %ln8Ez to i64*
  %ln8EB = load i64, i64* %ln8EA, !tbaa !2
  %ln8EC = inttoptr i64 %ln8EB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ED = load i64*, i64** %Sp_Var
  %ln8EE = load i64*, i64** %Hp_Var
  %ln8EF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8EC( i64* %Base_Arg, i64* %ln8ED, i64* %ln8EE, i64 %ln8EF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8D0:
  %ln8EG = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8EG, !tbaa !5
  %ln8EH = load i64, i64* %R2_Var
  store i64 %ln8EH, i64* %R2_Var
  %ln8EI = load i64, i64* %R1_Var
  store i64 %ln8EI, i64* %R1_Var
  %ln8EJ = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8EK = load i64*, i64** %Sp_Var
  %ln8EL = load i64*, i64** %Hp_Var
  %ln8EM = load i64, i64* %R1_Var
  %ln8EN = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8EJ( i64* %Base_Arg, i64* %ln8EK, i64* %ln8EL, i64 %ln8EM, i64 %ln8EN, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.600509 UTC

%r8xi_bytes_struct = type <{[21 x i8]}>
@r8xi_bytes$def = internal constant %r8xi_bytes_struct<{[21 x i8] [i8 76, i8 101, i8 110, i8 103, i8 116, i8 104, i8 32, i8 111, i8 102, i8 32, i8 118, i8 101, i8 99, i8 116, i8 111, i8 114, i8 32, i8 50, i8 58, i8 32, i8 0]}>, align 1
@r8xi_bytes = internal alias i8, bitcast (%r8xi_bytes_struct* @r8xi_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.602778 UTC

%r8xj_closure_struct = type <{i64, i64, i64, i64}>
@r8xj_closure$def = internal global %r8xj_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xj_info$def to i64), i64 0, i64 0, i64 0}>
@r8xj_closure = internal alias i8, bitcast (%r8xj_closure_struct* @r8xj_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.604343 UTC

@r8xj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xj_info$def to i8*)
define internal ghccc void @r8xj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
c8EU:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8ER = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8EX = load i64*, i64** %Sp_Var
  %ln8EY = getelementptr inbounds i64, i64* %ln8EX, i32 -2
  %ln8EZ = ptrtoint i64* %ln8EY to i64
  %ln8F0 = icmp ult i64 %ln8EZ, %SpLim_Arg
  %ln8F1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8F0, i1 0 )
  br i1 %ln8F1, label %c8EV, label %c8EW
c8EW:
  %ln8F2 = ptrtoint i64* %Base_Arg to i64
  %ln8F3 = inttoptr i64 %ln8F2 to i8*
  %ln8F4 = load i64, i64* %R1_Var
  %ln8F5 = inttoptr i64 %ln8F4 to i8*
  %ln8F6 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8F7 = call ccc i8* (i8*, i8*) %ln8F6( i8* %ln8F3, i8* %ln8F5 ) nounwind
  %ln8F8 = ptrtoint i8* %ln8F7 to i64
  store i64 %ln8F8, i64* %lc8ER
  %ln8F9 = load i64, i64* %lc8ER
  %ln8Fa = icmp eq i64 %ln8F9, 0
  br i1 %ln8Fa, label %c8ET, label %c8ES
c8ES:
  %ln8Fc = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Fb = load i64*, i64** %Sp_Var
  %ln8Fd = getelementptr inbounds i64, i64* %ln8Fb, i32 -2
  store i64 %ln8Fc, i64* %ln8Fd, !tbaa !2
  %ln8Ff = load i64, i64* %lc8ER
  %ln8Fe = load i64*, i64** %Sp_Var
  %ln8Fg = getelementptr inbounds i64, i64* %ln8Fe, i32 -1
  store i64 %ln8Ff, i64* %ln8Fg, !tbaa !2
  %ln8Fh = ptrtoint %r8xi_bytes_struct* @r8xi_bytes$def to i64
  store i64 %ln8Fh, i64* %R2_Var
  %ln8Fi = load i64*, i64** %Sp_Var
  %ln8Fj = getelementptr inbounds i64, i64* %ln8Fi, i32 -2
  %ln8Fk = ptrtoint i64* %ln8Fj to i64
  %ln8Fl = inttoptr i64 %ln8Fk to i64*
  store i64* %ln8Fl, i64** %Sp_Var
  %ln8Fm = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Fn = load i64*, i64** %Sp_Var
  %ln8Fo = load i64, i64* %R1_Var
  %ln8Fp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Fm( i64* %Base_Arg, i64* %ln8Fn, i64* %Hp_Arg, i64 %ln8Fo, i64 %ln8Fp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ET:
  %ln8Fr = load i64, i64* %R1_Var
  %ln8Fs = inttoptr i64 %ln8Fr to i64*
  %ln8Ft = load i64, i64* %ln8Fs, !tbaa !4
  %ln8Fu = inttoptr i64 %ln8Ft to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Fv = load i64*, i64** %Sp_Var
  %ln8Fw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Fu( i64* %Base_Arg, i64* %ln8Fv, i64* %Hp_Arg, i64 %ln8Fw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8EV:
  %ln8Fx = load i64, i64* %R1_Var
  store i64 %ln8Fx, i64* %R1_Var
  %ln8Fy = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Fz = bitcast i64* %ln8Fy to i64*
  %ln8FA = load i64, i64* %ln8Fz, !tbaa !5
  %ln8FB = inttoptr i64 %ln8FA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8FC = load i64*, i64** %Sp_Var
  %ln8FD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8FB( i64* %Base_Arg, i64* %ln8FC, i64* %Hp_Arg, i64 %ln8FD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.607171 UTC

%r8xk_bytes_struct = type <{[21 x i8]}>
@r8xk_bytes$def = internal constant %r8xk_bytes_struct<{[21 x i8] [i8 76, i8 101, i8 110, i8 103, i8 116, i8 104, i8 32, i8 111, i8 102, i8 32, i8 118, i8 101, i8 99, i8 116, i8 111, i8 114, i8 32, i8 49, i8 58, i8 32, i8 0]}>, align 1
@r8xk_bytes = internal alias i8, bitcast (%r8xk_bytes_struct* @r8xk_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.608718 UTC

%r8xl_closure_struct = type <{i64, i64, i64, i64}>
@r8xl_closure$def = internal global %r8xl_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xl_info$def to i64), i64 0, i64 0, i64 0}>
@r8xl_closure = internal alias i8, bitcast (%r8xl_closure_struct* @r8xl_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.610488 UTC

@r8xl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xl_info$def to i8*)
define internal ghccc void @r8xl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
c8FK:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8FH = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8FN = load i64*, i64** %Sp_Var
  %ln8FO = getelementptr inbounds i64, i64* %ln8FN, i32 -2
  %ln8FP = ptrtoint i64* %ln8FO to i64
  %ln8FQ = icmp ult i64 %ln8FP, %SpLim_Arg
  %ln8FR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8FQ, i1 0 )
  br i1 %ln8FR, label %c8FL, label %c8FM
c8FM:
  %ln8FS = ptrtoint i64* %Base_Arg to i64
  %ln8FT = inttoptr i64 %ln8FS to i8*
  %ln8FU = load i64, i64* %R1_Var
  %ln8FV = inttoptr i64 %ln8FU to i8*
  %ln8FW = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8FX = call ccc i8* (i8*, i8*) %ln8FW( i8* %ln8FT, i8* %ln8FV ) nounwind
  %ln8FY = ptrtoint i8* %ln8FX to i64
  store i64 %ln8FY, i64* %lc8FH
  %ln8FZ = load i64, i64* %lc8FH
  %ln8G0 = icmp eq i64 %ln8FZ, 0
  br i1 %ln8G0, label %c8FJ, label %c8FI
c8FI:
  %ln8G2 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8G1 = load i64*, i64** %Sp_Var
  %ln8G3 = getelementptr inbounds i64, i64* %ln8G1, i32 -2
  store i64 %ln8G2, i64* %ln8G3, !tbaa !2
  %ln8G5 = load i64, i64* %lc8FH
  %ln8G4 = load i64*, i64** %Sp_Var
  %ln8G6 = getelementptr inbounds i64, i64* %ln8G4, i32 -1
  store i64 %ln8G5, i64* %ln8G6, !tbaa !2
  %ln8G7 = ptrtoint %r8xk_bytes_struct* @r8xk_bytes$def to i64
  store i64 %ln8G7, i64* %R2_Var
  %ln8G8 = load i64*, i64** %Sp_Var
  %ln8G9 = getelementptr inbounds i64, i64* %ln8G8, i32 -2
  %ln8Ga = ptrtoint i64* %ln8G9 to i64
  %ln8Gb = inttoptr i64 %ln8Ga to i64*
  store i64* %ln8Gb, i64** %Sp_Var
  %ln8Gc = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Gd = load i64*, i64** %Sp_Var
  %ln8Ge = load i64, i64* %R1_Var
  %ln8Gf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Gc( i64* %Base_Arg, i64* %ln8Gd, i64* %Hp_Arg, i64 %ln8Ge, i64 %ln8Gf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FJ:
  %ln8Gh = load i64, i64* %R1_Var
  %ln8Gi = inttoptr i64 %ln8Gh to i64*
  %ln8Gj = load i64, i64* %ln8Gi, !tbaa !4
  %ln8Gk = inttoptr i64 %ln8Gj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Gl = load i64*, i64** %Sp_Var
  %ln8Gm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Gk( i64* %Base_Arg, i64* %ln8Gl, i64* %Hp_Arg, i64 %ln8Gm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FL:
  %ln8Gn = load i64, i64* %R1_Var
  store i64 %ln8Gn, i64* %R1_Var
  %ln8Go = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Gp = bitcast i64* %ln8Go to i64*
  %ln8Gq = load i64, i64* %ln8Gp, !tbaa !5
  %ln8Gr = inttoptr i64 %ln8Gq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Gs = load i64*, i64** %Sp_Var
  %ln8Gt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Gr( i64* %Base_Arg, i64* %ln8Gs, i64* %Hp_Arg, i64 %ln8Gt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.612975 UTC

%r8xm_bytes_struct = type <{[22 x i8]}>
@r8xm_bytes$def = internal constant %r8xm_bytes_struct<{[22 x i8] [i8 10, i8 66, i8 76, i8 65, i8 83, i8 32, i8 76, i8 101, i8 118, i8 101, i8 108, i8 45, i8 49, i8 32, i8 116, i8 101, i8 115, i8 116, i8 32, i8 58, i8 32, i8 0]}>, align 1
@r8xm_bytes = internal alias i8, bitcast (%r8xm_bytes_struct* @r8xm_bytes$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.614483 UTC

%r8xn_closure_struct = type <{i64, i64, i64, i64}>
@r8xn_closure$def = internal global %r8xn_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xn_info$def to i64), i64 0, i64 0, i64 0}>
@r8xn_closure = internal alias i8, bitcast (%r8xn_closure_struct* @r8xn_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.616341 UTC

@r8xn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r8xn_info$def to i8*)
define internal ghccc void @r8xn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
c8GA:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8Gx = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8GD = load i64*, i64** %Sp_Var
  %ln8GE = getelementptr inbounds i64, i64* %ln8GD, i32 -2
  %ln8GF = ptrtoint i64* %ln8GE to i64
  %ln8GG = icmp ult i64 %ln8GF, %SpLim_Arg
  %ln8GH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8GG, i1 0 )
  br i1 %ln8GH, label %c8GB, label %c8GC
c8GC:
  %ln8GI = ptrtoint i64* %Base_Arg to i64
  %ln8GJ = inttoptr i64 %ln8GI to i8*
  %ln8GK = load i64, i64* %R1_Var
  %ln8GL = inttoptr i64 %ln8GK to i8*
  %ln8GM = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8GN = call ccc i8* (i8*, i8*) %ln8GM( i8* %ln8GJ, i8* %ln8GL ) nounwind
  %ln8GO = ptrtoint i8* %ln8GN to i64
  store i64 %ln8GO, i64* %lc8Gx
  %ln8GP = load i64, i64* %lc8Gx
  %ln8GQ = icmp eq i64 %ln8GP, 0
  br i1 %ln8GQ, label %c8Gz, label %c8Gy
c8Gy:
  %ln8GS = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8GR = load i64*, i64** %Sp_Var
  %ln8GT = getelementptr inbounds i64, i64* %ln8GR, i32 -2
  store i64 %ln8GS, i64* %ln8GT, !tbaa !2
  %ln8GV = load i64, i64* %lc8Gx
  %ln8GU = load i64*, i64** %Sp_Var
  %ln8GW = getelementptr inbounds i64, i64* %ln8GU, i32 -1
  store i64 %ln8GV, i64* %ln8GW, !tbaa !2
  %ln8GX = ptrtoint %r8xm_bytes_struct* @r8xm_bytes$def to i64
  store i64 %ln8GX, i64* %R2_Var
  %ln8GY = load i64*, i64** %Sp_Var
  %ln8GZ = getelementptr inbounds i64, i64* %ln8GY, i32 -2
  %ln8H0 = ptrtoint i64* %ln8GZ to i64
  %ln8H1 = inttoptr i64 %ln8H0 to i64*
  store i64* %ln8H1, i64** %Sp_Var
  %ln8H2 = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8H3 = load i64*, i64** %Sp_Var
  %ln8H4 = load i64, i64* %R1_Var
  %ln8H5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8H2( i64* %Base_Arg, i64* %ln8H3, i64* %Hp_Arg, i64 %ln8H4, i64 %ln8H5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Gz:
  %ln8H7 = load i64, i64* %R1_Var
  %ln8H8 = inttoptr i64 %ln8H7 to i64*
  %ln8H9 = load i64, i64* %ln8H8, !tbaa !4
  %ln8Ha = inttoptr i64 %ln8H9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hb = load i64*, i64** %Sp_Var
  %ln8Hc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ha( i64* %Base_Arg, i64* %ln8Hb, i64* %Hp_Arg, i64 %ln8Hc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8GB:
  %ln8Hd = load i64, i64* %R1_Var
  store i64 %ln8Hd, i64* %R1_Var
  %ln8He = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Hf = bitcast i64* %ln8He to i64*
  %ln8Hg = load i64, i64* %ln8Hf, !tbaa !5
  %ln8Hh = inttoptr i64 %ln8Hg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hi = load i64*, i64** %Sp_Var
  %ln8Hj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Hh( i64* %Base_Arg, i64* %ln8Hi, i64* %Hp_Arg, i64 %ln8Hj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.623871 UTC

%u8JQ_srt_struct = type <{i64, i64, i64}>
%u8JR_srt_struct = type <{i64, i64, i64, i64}>
%u8JS_srt_struct = type <{i64, i64, i64, i64}>
%u8JT_srt_struct = type <{i64, i64, i64, i64}>
%u8JU_srt_struct = type <{i64, i64, i64, i64}>
%u8JV_srt_struct = type <{i64, i64, i64, i64}>
%u8JW_srt_struct = type <{i64, i64, i64}>
%u8JX_srt_struct = type <{i64, i64, i64, i64}>
%u8JY_srt_struct = type <{i64, i64, i64}>
%u8JZ_srt_struct = type <{i64, i64, i64}>
%u8K0_srt_struct = type <{i64, i64, i64}>
%u8K1_srt_struct = type <{i64, i64, i64}>
%u8K2_srt_struct = type <{i64, i64, i64}>
%u8K3_srt_struct = type <{i64, i64, i64}>
%u8K4_srt_struct = type <{i64, i64, i64}>
%u8K5_srt_struct = type <{i64, i64, i64}>
%u8K6_srt_struct = type <{i64, i64, i64, i64, i64}>
%u8K7_srt_struct = type <{i64, i64, i64, i64}>
%u8K8_srt_struct = type <{i64, i64, i64, i64}>
%u8K9_srt_struct = type <{i64, i64, i64}>
%u8Ka_srt_struct = type <{i64, i64, i64, i64}>
%u8Kb_srt_struct = type <{i64, i64, i64}>
%u8Kc_srt_struct = type <{i64, i64, i64, i64}>
%u8Kd_srt_struct = type <{i64, i64, i64, i64}>
%u8Ke_srt_struct = type <{i64, i64, i64, i64}>
%u8Kf_srt_struct = type <{i64, i64, i64}>
%u8Kg_srt_struct = type <{i64, i64, i64, i64}>
%Main_main1_closure_struct = type <{i64, i64, i64, i64}>
@u8JQ_srt$def = internal global %u8JQ_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziNominalDiffTime_zdfShowNominalDiffTime3_closure to i64), i64 0}>
@u8JQ_srt = internal alias i8, bitcast (%u8JQ_srt_struct* @u8JQ_srt$def to i8*)
@u8JR_srt$def = internal global %u8JR_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_DataziFixed_showFixed_closure to i64), i64 ptrtoint (i8* @u8JQ_srt to i64), i64 0}>
@u8JR_srt = internal alias i8, bitcast (%u8JR_srt_struct* @u8JR_srt$def to i8*)
@u8JS_srt$def = internal global %u8JS_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_divInteger_closure to i64), i64 ptrtoint (i8* @u8JR_srt to i64), i64 0}>
@u8JS_srt = internal alias i8, bitcast (%u8JS_srt_struct* @u8JS_srt$def to i8*)
@u8JT_srt$def = internal global %u8JT_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_timesInteger_closure to i64), i64 ptrtoint (i8* @u8JS_srt to i64), i64 0}>
@u8JT_srt = internal alias i8, bitcast (%u8JT_srt_struct* @u8JT_srt$def to i8*)
@u8JU_srt$def = internal global %u8JU_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_minusInteger_closure to i64), i64 ptrtoint (i8* @u8JT_srt to i64), i64 0}>
@u8JU_srt = internal alias i8, bitcast (%u8JU_srt_struct* @u8JU_srt$def to i8*)
@u8JV_srt$def = internal global %u8JV_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_closure to i64), i64 ptrtoint (i8* @u8JU_srt to i64), i64 0}>
@u8JV_srt = internal alias i8, bitcast (%u8JV_srt_struct* @u8JV_srt$def to i8*)
@u8JW_srt$def = internal global %u8JW_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8JV_srt to i64), i64 0}>
@u8JW_srt = internal alias i8, bitcast (%u8JW_srt_struct* @u8JW_srt$def to i8*)
@u8JX_srt$def = internal global %u8JX_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_closure to i64), i64 ptrtoint (i8* @u8JW_srt to i64), i64 0}>
@u8JX_srt = internal alias i8, bitcast (%u8JX_srt_struct* @u8JX_srt$def to i8*)
@u8JY_srt$def = internal global %u8JY_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8JX_srt to i64), i64 0}>
@u8JY_srt = internal alias i8, bitcast (%u8JY_srt_struct* @u8JY_srt$def to i8*)
@u8JZ_srt$def = internal global %u8JZ_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8JY_srt to i64), i64 0}>
@u8JZ_srt = internal alias i8, bitcast (%u8JZ_srt_struct* @u8JZ_srt$def to i8*)
@u8K0_srt$def = internal global %u8K0_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8JZ_srt to i64), i64 0}>
@u8K0_srt = internal alias i8, bitcast (%u8K0_srt_struct* @u8K0_srt$def to i8*)
@u8K1_srt$def = internal global %u8K1_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8K0_srt to i64), i64 0}>
@u8K1_srt = internal alias i8, bitcast (%u8K1_srt_struct* @u8K1_srt$def to i8*)
@u8K2_srt$def = internal global %u8K2_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8K1_srt to i64), i64 0}>
@u8K2_srt = internal alias i8, bitcast (%u8K2_srt_struct* @u8K2_srt$def to i8*)
@u8K3_srt$def = internal global %u8K3_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8K2_srt to i64), i64 0}>
@u8K3_srt = internal alias i8, bitcast (%u8K3_srt_struct* @u8K3_srt$def to i8*)
@u8K4_srt$def = internal global %u8K4_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8K3_srt to i64), i64 0}>
@u8K4_srt = internal alias i8, bitcast (%u8K4_srt_struct* @u8K4_srt$def to i8*)
@u8K5_srt$def = internal global %u8K5_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8K4_srt to i64), i64 0}>
@u8K5_srt = internal alias i8, bitcast (%u8K5_srt_struct* @u8K5_srt$def to i8*)
@u8K6_srt$def = internal global %u8K6_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStrzq_closure to i64), i64 ptrtoint (i8* @u8K5_srt to i64), i64 0}>
@u8K6_srt = internal alias i8, bitcast (%u8K6_srt_struct* @u8K6_srt$def to i8*)
@u8K7_srt$def = internal global %u8K7_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_closure to i64), i64 ptrtoint (i8* @u8K6_srt to i64), i64 0}>
@u8K7_srt = internal alias i8, bitcast (%u8K7_srt_struct* @u8K7_srt$def to i8*)
@u8K8_srt$def = internal global %u8K8_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @hblaszm0zi0zi0zi0zminplace_HBLASziLevel1_zdwaxpy_closure to i64), i64 ptrtoint (i8* @u8K7_srt to i64), i64 0}>
@u8K8_srt = internal alias i8, bitcast (%u8K8_srt_struct* @u8K8_srt$def to i8*)
@u8K9_srt$def = internal global %u8K9_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8K8_srt to i64), i64 0}>
@u8K9_srt = internal alias i8, bitcast (%u8K9_srt_struct* @u8K9_srt$def to i8*)
@u8Ka_srt$def = internal global %u8Ka_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8x8_closure_struct* @r8x8_closure$def to i64), i64 ptrtoint (i8* @u8K9_srt to i64), i64 0}>
@u8Ka_srt = internal alias i8, bitcast (%u8Ka_srt_struct* @u8Ka_srt$def to i8*)
@u8Kb_srt$def = internal global %u8Kb_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8Ka_srt to i64), i64 0}>
@u8Kb_srt = internal alias i8, bitcast (%u8Kb_srt_struct* @u8Kb_srt$def to i8*)
@u8Kc_srt$def = internal global %u8Kc_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8xg_closure_struct* @r8xg_closure$def to i64), i64 ptrtoint (i8* @u8Kb_srt to i64), i64 0}>
@u8Kc_srt = internal alias i8, bitcast (%u8Kc_srt_struct* @u8Kc_srt$def to i8*)
@u8Kd_srt$def = internal global %u8Kd_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8xh_closure_struct* @r8xh_closure$def to i64), i64 ptrtoint (i8* @u8Kc_srt to i64), i64 0}>
@u8Kd_srt = internal alias i8, bitcast (%u8Kd_srt_struct* @u8Kd_srt$def to i8*)
@u8Ke_srt$def = internal global %u8Ke_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8xj_closure_struct* @r8xj_closure$def to i64), i64 ptrtoint (i8* @u8Kd_srt to i64), i64 0}>
@u8Ke_srt = internal alias i8, bitcast (%u8Ke_srt_struct* @u8Ke_srt$def to i8*)
@u8Kf_srt$def = internal global %u8Kf_srt_struct<{i64 ptrtoint (i8* @stg_SRT_1_info to i64), i64 ptrtoint (i8* @u8Ke_srt to i64), i64 0}>
@u8Kf_srt = internal alias i8, bitcast (%u8Kf_srt_struct* @u8Kf_srt$def to i8*)
@u8Kg_srt$def = internal global %u8Kg_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r8xl_closure_struct* @r8xl_closure$def to i64), i64 ptrtoint (i8* @u8Kf_srt to i64), i64 0}>
@u8Kg_srt = internal alias i8, bitcast (%u8Kg_srt_struct* @u8Kg_srt$def to i8*)
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 ptrtoint (%r8xn_closure_struct* @r8xn_closure$def to i64), i64 ptrtoint (i8* @u8Kg_srt to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.628056 UTC

@s8yP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yP_info$def to i8*)
define internal ghccc void @s8yP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K4_srt_struct* @u8K4_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yP_info$def to i64)) to i32),i32 0)}>
{
c8I2:
  %ls8y5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Kh = load i64*, i64** %Sp_Var
  %ln8Ki = getelementptr inbounds i64, i64* %ln8Kh, i32 -6
  %ln8Kj = ptrtoint i64* %ln8Ki to i64
  %ln8Kk = icmp ult i64 %ln8Kj, %SpLim_Arg
  %ln8Kl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Kk, i1 0 )
  br i1 %ln8Kl, label %c8J5, label %c8J6
c8J6:
  %ln8Kn = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Km = load i64*, i64** %Sp_Var
  %ln8Ko = getelementptr inbounds i64, i64* %ln8Km, i32 -2
  store i64 %ln8Kn, i64* %ln8Ko, !tbaa !2
  %ln8Kq = load i64, i64* %R1_Var
  %ln8Kp = load i64*, i64** %Sp_Var
  %ln8Kr = getelementptr inbounds i64, i64* %ln8Kp, i32 -1
  store i64 %ln8Kq, i64* %ln8Kr, !tbaa !2
  %ln8Kt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HZ_info$def to i64
  %ln8Ks = load i64*, i64** %Sp_Var
  %ln8Ku = getelementptr inbounds i64, i64* %ln8Ks, i32 -4
  store i64 %ln8Kt, i64* %ln8Ku, !tbaa !2
  %ln8Kx = load i64, i64* %R1_Var
  %ln8Ky = add i64 %ln8Kx, 16
  %ln8Kz = inttoptr i64 %ln8Ky to i64*
  %ln8KA = load i64, i64* %ln8Kz, !tbaa !4
  store i64 %ln8KA, i64* %ls8y5
  %ln8KD = load i64, i64* %R1_Var
  %ln8KE = add i64 %ln8KD, 24
  %ln8KF = inttoptr i64 %ln8KE to i64*
  %ln8KG = load i64, i64* %ln8KF, !tbaa !4
  store i64 %ln8KG, i64* %R1_Var
  %ln8KI = load i64, i64* %ls8y5
  %ln8KH = load i64*, i64** %Sp_Var
  %ln8KJ = getelementptr inbounds i64, i64* %ln8KH, i32 -3
  store i64 %ln8KI, i64* %ln8KJ, !tbaa !2
  %ln8KK = load i64*, i64** %Sp_Var
  %ln8KL = getelementptr inbounds i64, i64* %ln8KK, i32 -4
  %ln8KM = ptrtoint i64* %ln8KL to i64
  %ln8KN = inttoptr i64 %ln8KM to i64*
  store i64* %ln8KN, i64** %Sp_Var
  %ln8KO = load i64, i64* %R1_Var
  %ln8KP = and i64 %ln8KO, 7
  %ln8KQ = icmp ne i64 %ln8KP, 0
  br i1 %ln8KQ, label %u8Jp, label %c8I0
c8I0:
  %ln8KS = load i64, i64* %R1_Var
  %ln8KT = inttoptr i64 %ln8KS to i64*
  %ln8KU = load i64, i64* %ln8KT, !tbaa !4
  %ln8KV = inttoptr i64 %ln8KU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8KW = load i64*, i64** %Sp_Var
  %ln8KX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8KV( i64* %Base_Arg, i64* %ln8KW, i64* %Hp_Arg, i64 %ln8KX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Jp:
  %ln8KY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8KZ = load i64*, i64** %Sp_Var
  %ln8L0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8KY( i64* %Base_Arg, i64* %ln8KZ, i64* %Hp_Arg, i64 %ln8L0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8J5:
  %ln8L1 = load i64, i64* %R1_Var
  store i64 %ln8L1, i64* %R1_Var
  %ln8L2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8L3 = bitcast i64* %ln8L2 to i64*
  %ln8L4 = load i64, i64* %ln8L3, !tbaa !5
  %ln8L5 = inttoptr i64 %ln8L4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8L6 = load i64*, i64** %Sp_Var
  %ln8L7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8L5( i64* %Base_Arg, i64* %ln8L6, i64* %Hp_Arg, i64 %ln8L7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.632089 UTC

@c8HZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HZ_info$def to i8*)
define internal ghccc void @c8HZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K3_srt_struct* @u8K3_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HZ_info$def to i64)) to i32),i32 0)}>
{
c8HZ:
  %ls8yn = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8L9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8I5_info$def to i64
  %ln8L8 = load i64*, i64** %Sp_Var
  %ln8La = getelementptr inbounds i64, i64* %ln8L8, i32 -1
  store i64 %ln8L9, i64* %ln8La, !tbaa !2
  %ln8Ld = load i64, i64* %R1_Var
  %ln8Le = add i64 %ln8Ld, 15
  %ln8Lf = inttoptr i64 %ln8Le to i64*
  %ln8Lg = load i64, i64* %ln8Lf, !tbaa !4
  store i64 %ln8Lg, i64* %ls8yn
  %ln8Lj = load i64, i64* %R1_Var
  %ln8Lk = add i64 %ln8Lj, 7
  %ln8Ll = inttoptr i64 %ln8Lk to i64*
  %ln8Lm = load i64, i64* %ln8Ll, !tbaa !4
  store i64 %ln8Lm, i64* %R1_Var
  %ln8Lo = load i64, i64* %ls8yn
  %ln8Ln = load i64*, i64** %Sp_Var
  %ln8Lp = getelementptr inbounds i64, i64* %ln8Ln, i32 0
  store i64 %ln8Lo, i64* %ln8Lp, !tbaa !2
  %ln8Lq = load i64*, i64** %Sp_Var
  %ln8Lr = getelementptr inbounds i64, i64* %ln8Lq, i32 -1
  %ln8Ls = ptrtoint i64* %ln8Lr to i64
  %ln8Lt = inttoptr i64 %ln8Ls to i64*
  store i64* %ln8Lt, i64** %Sp_Var
  %ln8Lu = load i64, i64* %R1_Var
  %ln8Lv = and i64 %ln8Lu, 7
  %ln8Lw = icmp ne i64 %ln8Lv, 0
  br i1 %ln8Lw, label %u8Jo, label %c8I6
c8I6:
  %ln8Ly = load i64, i64* %R1_Var
  %ln8Lz = inttoptr i64 %ln8Ly to i64*
  %ln8LA = load i64, i64* %ln8Lz, !tbaa !4
  %ln8LB = inttoptr i64 %ln8LA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8LC = load i64*, i64** %Sp_Var
  %ln8LD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8LB( i64* %Base_Arg, i64* %ln8LC, i64* %Hp_Arg, i64 %ln8LD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Jo:
  %ln8LE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8I5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8LF = load i64*, i64** %Sp_Var
  %ln8LG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8LE( i64* %Base_Arg, i64* %ln8LF, i64* %Hp_Arg, i64 %ln8LG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.634759 UTC

@c8I5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8I5_info$def to i8*)
define internal ghccc void @c8I5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K2_srt_struct* @u8K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8I5_info$def to i64)) to i32),i32 0)}>
{
c8I5:
  %ls8yp = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8LH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ia_info$def to i64
  %ln8LI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8LH, i64* %ln8LI, !tbaa !2
  %ln8LL = load i64, i64* %R1_Var
  %ln8LM = add i64 %ln8LL, 7
  %ln8LN = inttoptr i64 %ln8LM to i64*
  %ln8LO = load i64, i64* %ln8LN, !tbaa !4
  store i64 %ln8LO, i64* %ls8yp
  %ln8LP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8LQ = bitcast i64* %ln8LP to i64*
  %ln8LR = load i64, i64* %ln8LQ, !tbaa !2
  store i64 %ln8LR, i64* %R1_Var
  %ln8LS = load i64, i64* %ls8yp
  %ln8LT = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8LS, i64* %ln8LT, !tbaa !2
  %ln8LU = load i64, i64* %R1_Var
  %ln8LV = and i64 %ln8LU, 7
  %ln8LW = icmp ne i64 %ln8LV, 0
  br i1 %ln8LW, label %u8Jq, label %c8Ib
c8Ib:
  %ln8LY = load i64, i64* %R1_Var
  %ln8LZ = inttoptr i64 %ln8LY to i64*
  %ln8M0 = load i64, i64* %ln8LZ, !tbaa !4
  %ln8M1 = inttoptr i64 %ln8M0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8M2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8M1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8M2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Jq:
  %ln8M3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ia_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8M4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8M3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8M4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.636471 UTC

@c8Ia_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ia_info$def to i8*)
define internal ghccc void @c8Ia_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K1_srt_struct* @u8K1_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ia_info$def to i64)) to i32),i32 0)}>
{
c8Ia:
  %ls8yp = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8M5 = load i64*, i64** %Sp_Var
  %ln8M6 = getelementptr inbounds i64, i64* %ln8M5, i32 1
  %ln8M7 = bitcast i64* %ln8M6 to i64*
  %ln8M8 = load i64, i64* %ln8M7, !tbaa !2
  store i64 %ln8M8, i64* %ls8yp
  %ln8Ma = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Il_info$def to i64
  %ln8M9 = load i64*, i64** %Sp_Var
  %ln8Mb = getelementptr inbounds i64, i64* %ln8M9, i32 1
  store i64 %ln8Ma, i64* %ln8Mb, !tbaa !2
  %ln8Mc = add i64 %R1_Arg, 7
  %ln8Md = inttoptr i64 %ln8Mc to i64*
  %ln8Me = load i64, i64* %ln8Md, !tbaa !4
  %ln8Mf = trunc i64 %ln8Me to i32
  %ln8Mg = zext i32 %ln8Mf to i64
  store i64 %ln8Mg, i64* %R3_Var
  %ln8Mh = load i64, i64* %ls8yp
  store i64 %ln8Mh, i64* %R2_Var
  %ln8Mi = load i64*, i64** %Sp_Var
  %ln8Mj = getelementptr inbounds i64, i64* %ln8Mi, i32 1
  %ln8Mk = ptrtoint i64* %ln8Mj to i64
  %ln8Ml = inttoptr i64 %ln8Mk to i64*
  store i64* %ln8Ml, i64** %Sp_Var
  %ln8Mm = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mn = load i64*, i64** %Sp_Var
  %ln8Mo = load i64, i64* %R2_Var
  %ln8Mp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mm( i64* %Base_Arg, i64* %ln8Mn, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Mo, i64 %ln8Mp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.639406 UTC

@c8Il_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Il_info$def to i8*)
define internal ghccc void @c8Il_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K0_srt_struct* @u8K0_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Il_info$def to i64)) to i32),i32 0)}>
{
c8Il:
  %ls8yv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Mr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8In_info$def to i64
  %ln8Mq = load i64*, i64** %Sp_Var
  %ln8Ms = getelementptr inbounds i64, i64* %ln8Mq, i32 -1
  store i64 %ln8Mr, i64* %ln8Ms, !tbaa !2
  %ln8Mt = load i64, i64* %R1_Var
  store i64 %ln8Mt, i64* %ls8yv
  %ln8Mu = load i64*, i64** %Sp_Var
  %ln8Mv = getelementptr inbounds i64, i64* %ln8Mu, i32 1
  %ln8Mw = bitcast i64* %ln8Mv to i64*
  %ln8Mx = load i64, i64* %ln8Mw, !tbaa !2
  store i64 %ln8Mx, i64* %R1_Var
  %ln8My = load i64*, i64** %Sp_Var
  %ln8Mz = getelementptr inbounds i64, i64* %ln8My, i32 0
  store i64 %R2_Arg, i64* %ln8Mz, !tbaa !2
  %ln8MB = load i64, i64* %ls8yv
  %ln8MA = load i64*, i64** %Sp_Var
  %ln8MC = getelementptr inbounds i64, i64* %ln8MA, i32 1
  store i64 %ln8MB, i64* %ln8MC, !tbaa !2
  %ln8MD = load i64*, i64** %Sp_Var
  %ln8ME = getelementptr inbounds i64, i64* %ln8MD, i32 -1
  %ln8MF = ptrtoint i64* %ln8ME to i64
  %ln8MG = inttoptr i64 %ln8MF to i64*
  store i64* %ln8MG, i64** %Sp_Var
  %ln8MH = load i64, i64* %R1_Var
  %ln8MI = and i64 %ln8MH, 7
  %ln8MJ = icmp ne i64 %ln8MI, 0
  br i1 %ln8MJ, label %u8Jr, label %c8Io
c8Io:
  %ln8ML = load i64, i64* %R1_Var
  %ln8MM = inttoptr i64 %ln8ML to i64*
  %ln8MN = load i64, i64* %ln8MM, !tbaa !4
  %ln8MO = inttoptr i64 %ln8MN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MP = load i64*, i64** %Sp_Var
  %ln8MQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8MO( i64* %Base_Arg, i64* %ln8MP, i64* %Hp_Arg, i64 %ln8MQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Jr:
  %ln8MR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8In_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MS = load i64*, i64** %Sp_Var
  %ln8MT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8MR( i64* %Base_Arg, i64* %ln8MS, i64* %Hp_Arg, i64 %ln8MT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.641159 UTC

@c8In_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8In_info$def to i8*)
define internal ghccc void @c8In_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JZ_srt_struct* @u8JZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8In_info$def to i64)) to i32),i32 0)}>
{
c8In:
  %ls8yz = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8MV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Is_info$def to i64
  %ln8MU = load i64*, i64** %Sp_Var
  %ln8MW = getelementptr inbounds i64, i64* %ln8MU, i32 -1
  store i64 %ln8MV, i64* %ln8MW, !tbaa !2
  %ln8MZ = load i64, i64* %R1_Var
  %ln8N0 = add i64 %ln8MZ, 15
  %ln8N1 = inttoptr i64 %ln8N0 to i64*
  %ln8N2 = load i64, i64* %ln8N1, !tbaa !4
  store i64 %ln8N2, i64* %ls8yz
  %ln8N5 = load i64, i64* %R1_Var
  %ln8N6 = add i64 %ln8N5, 7
  %ln8N7 = inttoptr i64 %ln8N6 to i64*
  %ln8N8 = load i64, i64* %ln8N7, !tbaa !4
  store i64 %ln8N8, i64* %R1_Var
  %ln8Na = load i64, i64* %ls8yz
  %ln8N9 = load i64*, i64** %Sp_Var
  %ln8Nb = getelementptr inbounds i64, i64* %ln8N9, i32 0
  store i64 %ln8Na, i64* %ln8Nb, !tbaa !2
  %ln8Nc = load i64*, i64** %Sp_Var
  %ln8Nd = getelementptr inbounds i64, i64* %ln8Nc, i32 -1
  %ln8Ne = ptrtoint i64* %ln8Nd to i64
  %ln8Nf = inttoptr i64 %ln8Ne to i64*
  store i64* %ln8Nf, i64** %Sp_Var
  %ln8Ng = load i64, i64* %R1_Var
  %ln8Nh = and i64 %ln8Ng, 7
  %ln8Ni = icmp ne i64 %ln8Nh, 0
  br i1 %ln8Ni, label %u8Js, label %c8It
c8It:
  %ln8Nk = load i64, i64* %R1_Var
  %ln8Nl = inttoptr i64 %ln8Nk to i64*
  %ln8Nm = load i64, i64* %ln8Nl, !tbaa !4
  %ln8Nn = inttoptr i64 %ln8Nm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8No = load i64*, i64** %Sp_Var
  %ln8Np = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nn( i64* %Base_Arg, i64* %ln8No, i64* %Hp_Arg, i64 %ln8Np, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Js:
  %ln8Nq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Is_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Nr = load i64*, i64** %Sp_Var
  %ln8Ns = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nq( i64* %Base_Arg, i64* %ln8Nr, i64* %Hp_Arg, i64 %ln8Ns, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.644109 UTC

@c8Is_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Is_info$def to i8*)
define internal ghccc void @c8Is_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JY_srt_struct* @u8JY_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Is_info$def to i64)) to i32),i32 0)}>
{
c8Is:
  %ls8yB = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Nt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ix_info$def to i64
  %ln8Nu = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Nt, i64* %ln8Nu, !tbaa !2
  %ln8Nx = load i64, i64* %R1_Var
  %ln8Ny = add i64 %ln8Nx, 7
  %ln8Nz = inttoptr i64 %ln8Ny to i64*
  %ln8NA = load i64, i64* %ln8Nz, !tbaa !4
  store i64 %ln8NA, i64* %ls8yB
  %ln8NB = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8NC = bitcast i64* %ln8NB to i64*
  %ln8ND = load i64, i64* %ln8NC, !tbaa !2
  store i64 %ln8ND, i64* %R1_Var
  %ln8NE = load i64, i64* %ls8yB
  %ln8NF = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8NE, i64* %ln8NF, !tbaa !2
  %ln8NG = load i64, i64* %R1_Var
  %ln8NH = and i64 %ln8NG, 7
  %ln8NI = icmp ne i64 %ln8NH, 0
  br i1 %ln8NI, label %u8Jt, label %c8Iy
c8Iy:
  %ln8NK = load i64, i64* %R1_Var
  %ln8NL = inttoptr i64 %ln8NK to i64*
  %ln8NM = load i64, i64* %ln8NL, !tbaa !4
  %ln8NN = inttoptr i64 %ln8NM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8NO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8NN( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8NO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Jt:
  %ln8NP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ix_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8NQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8NP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8NQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.646386 UTC

@c8Ix_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ix_info$def to i8*)
define internal ghccc void @c8Ix_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 67, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JX_srt_struct* @u8JX_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ix_info$def to i64)) to i32),i32 0)}>
{
c8Ix:
  %ls8yB = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8NR = load i64*, i64** %Sp_Var
  %ln8NS = getelementptr inbounds i64, i64* %ln8NR, i32 1
  %ln8NT = bitcast i64* %ln8NS to i64*
  %ln8NU = load i64, i64* %ln8NT, !tbaa !2
  store i64 %ln8NU, i64* %ls8yB
  %ln8NW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8II_info$def to i64
  %ln8NV = load i64*, i64** %Sp_Var
  %ln8NX = getelementptr inbounds i64, i64* %ln8NV, i32 1
  store i64 %ln8NW, i64* %ln8NX, !tbaa !2
  %ln8NY = add i64 %R1_Arg, 7
  %ln8NZ = inttoptr i64 %ln8NY to i64*
  %ln8O0 = load i64, i64* %ln8NZ, !tbaa !4
  %ln8O1 = trunc i64 %ln8O0 to i32
  %ln8O2 = zext i32 %ln8O1 to i64
  store i64 %ln8O2, i64* %R3_Var
  %ln8O3 = load i64, i64* %ls8yB
  store i64 %ln8O3, i64* %R2_Var
  %ln8O4 = load i64*, i64** %Sp_Var
  %ln8O5 = getelementptr inbounds i64, i64* %ln8O4, i32 1
  %ln8O6 = ptrtoint i64* %ln8O5 to i64
  %ln8O7 = inttoptr i64 %ln8O6 to i64*
  store i64* %ln8O7, i64** %Sp_Var
  %ln8O8 = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8O9 = load i64*, i64** %Sp_Var
  %ln8Oa = load i64, i64* %R2_Var
  %ln8Ob = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8O8( i64* %Base_Arg, i64* %ln8O9, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Oa, i64 %ln8Ob, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.648401 UTC

@c8II_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8II_info$def to i8*)
define internal ghccc void @c8II_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JW_srt_struct* @u8JW_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8II_info$def to i64)) to i32),i32 0)}>
{
c8II:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8Oc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IK_info$def to i64
  %ln8Od = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Oc, i64* %ln8Od, !tbaa !2
  %ln8Oe = load i64, i64* %R2_Var
  store i64 %ln8Oe, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8Of = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Og = load i64, i64* %R2_Var
  %ln8Oh = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Of( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Og, i64 %ln8Oh, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.65039 UTC

@c8IK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IK_info$def to i8*)
define internal ghccc void @c8IK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JV_srt_struct* @u8JV_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IK_info$def to i64)) to i32),i32 0)}>
{
c8IK:
  %ls8yw = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Oi = load i64*, i64** %Sp_Var
  %ln8Oj = getelementptr inbounds i64, i64* %ln8Oi, i32 1
  %ln8Ok = bitcast i64* %ln8Oj to i64*
  %ln8Ol = load i64, i64* %ln8Ok, !tbaa !2
  store i64 %ln8Ol, i64* %ls8yw
  %ln8On = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IO_info$def to i64
  %ln8Om = load i64*, i64** %Sp_Var
  %ln8Oo = getelementptr inbounds i64, i64* %ln8Om, i32 1
  store i64 %ln8On, i64* %ln8Oo, !tbaa !2
  %ln8Op = load i64, i64* %ls8yw
  store i64 %ln8Op, i64* %R3_Var
  %ln8Oq = load i64*, i64** %Sp_Var
  %ln8Or = getelementptr inbounds i64, i64* %ln8Oq, i32 2
  %ln8Os = bitcast i64* %ln8Or to i64*
  %ln8Ot = load i64, i64* %ln8Os, !tbaa !2
  store i64 %ln8Ot, i64* %R2_Var
  %ln8Ou = load i64*, i64** %Sp_Var
  %ln8Ov = getelementptr inbounds i64, i64* %ln8Ou, i32 2
  store i64 %R1_Arg, i64* %ln8Ov, !tbaa !2
  %ln8Ow = load i64*, i64** %Sp_Var
  %ln8Ox = getelementptr inbounds i64, i64* %ln8Ow, i32 1
  %ln8Oy = ptrtoint i64* %ln8Ox to i64
  %ln8Oz = inttoptr i64 %ln8Oy to i64*
  store i64* %ln8Oz, i64** %Sp_Var
  %ln8OA = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OB = load i64*, i64** %Sp_Var
  %ln8OC = load i64, i64* %R2_Var
  %ln8OD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OA( i64* %Base_Arg, i64* %ln8OB, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OC, i64 %ln8OD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.651824 UTC

@c8IO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IO_info$def to i8*)
define internal ghccc void @c8IO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JU_srt_struct* @u8JU_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IO_info$def to i64)) to i32),i32 0)}>
{
c8IO:
  %ls8yK = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8OE = load i64*, i64** %Sp_Var
  %ln8OF = getelementptr inbounds i64, i64* %ln8OE, i32 1
  %ln8OG = bitcast i64* %ln8OF to i64*
  %ln8OH = load i64, i64* %ln8OG, !tbaa !2
  store i64 %ln8OH, i64* %ls8yK
  %ln8OJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IS_info$def to i64
  %ln8OI = load i64*, i64** %Sp_Var
  %ln8OK = getelementptr inbounds i64, i64* %ln8OI, i32 1
  store i64 %ln8OJ, i64* %ln8OK, !tbaa !2
  %ln8OL = load i64, i64* %ls8yK
  store i64 %ln8OL, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8OM = load i64*, i64** %Sp_Var
  %ln8ON = getelementptr inbounds i64, i64* %ln8OM, i32 1
  %ln8OO = ptrtoint i64* %ln8ON to i64
  %ln8OP = inttoptr i64 %ln8OO to i64*
  store i64* %ln8OP, i64** %Sp_Var
  %ln8OQ = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OR = load i64*, i64** %Sp_Var
  %ln8OS = load i64, i64* %R2_Var
  %ln8OT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OQ( i64* %Base_Arg, i64* %ln8OR, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OS, i64 %ln8OT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.653341 UTC

@c8IS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IS_info$def to i8*)
define internal ghccc void @c8IS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JT_srt_struct* @u8JT_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IS_info$def to i64)) to i32),i32 0)}>
{
c8IS:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8OU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IW_info$def to i64
  %ln8OV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8OU, i64* %ln8OV, !tbaa !2
  %ln8OW = ptrtoint %r8xa_closure_struct* @r8xa_closure$def to i64
  %ln8OX = add i64 %ln8OW, 1
  store i64 %ln8OX, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8OY = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OZ = load i64, i64* %R2_Var
  %ln8P0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OZ, i64 %ln8P0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.654254 UTC

@c8IW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IW_info$def to i8*)
define internal ghccc void @c8IW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JS_srt_struct* @u8JS_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8IW_info$def to i64)) to i32),i32 0)}>
{
c8IW:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8P1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8J0_info$def to i64
  %ln8P2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8P1, i64* %ln8P2, !tbaa !2
  %ln8P3 = ptrtoint i8* @base_DataziFixed_zdfHasResolutionE5_closure to i64
  store i64 %ln8P3, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8P4 = bitcast i8* @integerzmgmp_GHCziIntegerziType_divInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8P5 = load i64, i64* %R2_Var
  %ln8P6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8P4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8P5, i64 %ln8P6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.655172 UTC

@c8J0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8J0_info$def to i8*)
define internal ghccc void @c8J0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JR_srt_struct* @u8JR_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8J0_info$def to i64)) to i32),i32 0)}>
{
c8J0:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8P7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8J4_info$def to i64
  %ln8P8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8P7, i64* %ln8P8, !tbaa !2
  store i64 %R1_Arg, i64* %R4_Var
  %ln8P9 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8Pa = add i64 %ln8P9, 2
  store i64 %ln8Pa, i64* %R3_Var
  %ln8Pb = ptrtoint i8* @base_DataziFixed_zdfHasResolutionE12zuzdcresolution_closure to i64
  %ln8Pc = add i64 %ln8Pb, 1
  store i64 %ln8Pc, i64* %R2_Var
  %ln8Pd = bitcast i8* @base_DataziFixed_showFixed_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Pe = load i64, i64* %R2_Var
  %ln8Pf = load i64, i64* %R3_Var
  %ln8Pg = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Pd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Pe, i64 %ln8Pf, i64 %ln8Pg, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.656585 UTC

@c8J4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8J4_info$def to i8*)
define internal ghccc void @c8J4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8JQ_srt_struct* @u8JQ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8J4_info$def to i64)) to i32),i32 0)}>
{
c8J4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Ph = ptrtoint i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziNominalDiffTime_zdfShowNominalDiffTime3_closure to i64
  store i64 %ln8Ph, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8Pi = load i64*, i64** %Sp_Var
  %ln8Pj = getelementptr inbounds i64, i64* %ln8Pi, i32 1
  %ln8Pk = ptrtoint i64* %ln8Pj to i64
  %ln8Pl = inttoptr i64 %ln8Pk to i64*
  store i64* %ln8Pl, i64** %Sp_Var
  %ln8Pm = bitcast i8* @base_GHCziBase_zpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Pn = load i64*, i64** %Sp_Var
  %ln8Po = load i64, i64* %R2_Var
  %ln8Pp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Pm( i64* %Base_Arg, i64* %ln8Pn, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Po, i64 %ln8Pp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.658027 UTC

@s8yQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yQ_info$def to i8*)
define internal ghccc void @s8yQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K5_srt_struct* @u8K5_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yQ_info$def to i64)) to i32),i32 0)}>
{
c8Ju:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8y5 = alloca i64, i32 1
  %ls8yk = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Pq = load i64*, i64** %Hp_Var
  %ln8Pr = getelementptr inbounds i64, i64* %ln8Pq, i32 4
  %ln8Ps = ptrtoint i64* %ln8Pr to i64
  %ln8Pt = inttoptr i64 %ln8Ps to i64*
  store i64* %ln8Pt, i64** %Hp_Var
  %ln8Pu = load i64*, i64** %Hp_Var
  %ln8Pv = ptrtoint i64* %ln8Pu to i64
  %ln8Pw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Px = bitcast i64* %ln8Pw to i64*
  %ln8Py = load i64, i64* %ln8Px, !tbaa !5
  %ln8Pz = icmp ugt i64 %ln8Pv, %ln8Py
  %ln8PA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Pz, i1 0 )
  br i1 %ln8PA, label %c8Jy, label %c8Jx
c8Jx:
  %ln8PD = load i64, i64* %R1_Var
  %ln8PE = add i64 %ln8PD, 16
  %ln8PF = inttoptr i64 %ln8PE to i64*
  %ln8PG = load i64, i64* %ln8PF, !tbaa !4
  store i64 %ln8PG, i64* %ls8y5
  %ln8PJ = load i64, i64* %R1_Var
  %ln8PK = add i64 %ln8PJ, 24
  %ln8PL = inttoptr i64 %ln8PK to i64*
  %ln8PM = load i64, i64* %ln8PL, !tbaa !4
  store i64 %ln8PM, i64* %ls8yk
  %ln8PO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yP_info$def to i64
  %ln8PN = load i64*, i64** %Hp_Var
  %ln8PP = getelementptr inbounds i64, i64* %ln8PN, i32 -3
  store i64 %ln8PO, i64* %ln8PP, !tbaa !3
  %ln8PR = load i64, i64* %ls8y5
  %ln8PQ = load i64*, i64** %Hp_Var
  %ln8PS = getelementptr inbounds i64, i64* %ln8PQ, i32 -1
  store i64 %ln8PR, i64* %ln8PS, !tbaa !3
  %ln8PU = load i64, i64* %ls8yk
  %ln8PT = load i64*, i64** %Hp_Var
  %ln8PV = getelementptr inbounds i64, i64* %ln8PT, i32 0
  store i64 %ln8PU, i64* %ln8PV, !tbaa !3
  %ln8PW = load i64*, i64** %Hp_Var
  %ln8PX = getelementptr inbounds i64, i64* %ln8PW, i32 -3
  %ln8PY = ptrtoint i64* %ln8PX to i64
  store i64 %ln8PY, i64* %R3_Var
  %ln8PZ = ptrtoint %r8x9_bytes_struct* @r8x9_bytes$def to i64
  store i64 %ln8PZ, i64* %R2_Var
  %ln8Q0 = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Q1 = load i64*, i64** %Hp_Var
  %ln8Q2 = load i64, i64* %R1_Var
  %ln8Q3 = load i64, i64* %R2_Var
  %ln8Q4 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Q0( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8Q1, i64 %ln8Q2, i64 %ln8Q3, i64 %ln8Q4, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Jy:
  %ln8Q5 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln8Q5, !tbaa !5
  %ln8Q6 = load i64, i64* %R1_Var
  store i64 %ln8Q6, i64* %R1_Var
  %ln8Q7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Q8 = bitcast i64* %ln8Q7 to i64*
  %ln8Q9 = load i64, i64* %ln8Q8, !tbaa !5
  %ln8Qa = inttoptr i64 %ln8Q9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qb = load i64*, i64** %Hp_Var
  %ln8Qc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qa( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8Qb, i64 %ln8Qc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.660972 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
c8Jz:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Qd = load i64*, i64** %Sp_Var
  %ln8Qe = getelementptr inbounds i64, i64* %ln8Qd, i32 -8
  %ln8Qf = ptrtoint i64* %ln8Qe to i64
  %ln8Qg = icmp ult i64 %ln8Qf, %SpLim_Arg
  %ln8Qh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Qg, i1 0 )
  br i1 %ln8Qh, label %c8JA, label %c8JB
c8JB:
  %ln8Qj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ho_info$def to i64
  %ln8Qi = load i64*, i64** %Sp_Var
  %ln8Qk = getelementptr inbounds i64, i64* %ln8Qi, i32 -1
  store i64 %ln8Qj, i64* %ln8Qk, !tbaa !2
  %ln8Ql = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8Qm = add i64 %ln8Ql, 2
  store i64 %ln8Qm, i64* %R4_Var
  %ln8Qn = ptrtoint %r8xn_closure_struct* @r8xn_closure$def to i64
  store i64 %ln8Qn, i64* %R3_Var
  %ln8Qo = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8Qo, i64* %R2_Var
  %ln8Qp = load i64*, i64** %Sp_Var
  %ln8Qq = getelementptr inbounds i64, i64* %ln8Qp, i32 -1
  %ln8Qr = ptrtoint i64* %ln8Qq to i64
  %ln8Qs = inttoptr i64 %ln8Qr to i64*
  store i64* %ln8Qs, i64** %Sp_Var
  %ln8Qt = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qu = load i64*, i64** %Sp_Var
  %ln8Qv = load i64, i64* %R1_Var
  %ln8Qw = load i64, i64* %R2_Var
  %ln8Qx = load i64, i64* %R3_Var
  %ln8Qy = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qt( i64* %Base_Arg, i64* %ln8Qu, i64* %Hp_Arg, i64 %ln8Qv, i64 %ln8Qw, i64 %ln8Qx, i64 %ln8Qy, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8JA:
  %ln8Qz = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %ln8Qz, i64* %R1_Var
  %ln8QA = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8QB = bitcast i64* %ln8QA to i64*
  %ln8QC = load i64, i64* %ln8QB, !tbaa !5
  %ln8QD = inttoptr i64 %ln8QC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8QE = load i64*, i64** %Sp_Var
  %ln8QF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8QD( i64* %Base_Arg, i64* %ln8QE, i64* %Hp_Arg, i64 %ln8QF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.66242 UTC

@c8Ho_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ho_info$def to i8*)
define internal ghccc void @c8Ho_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Kg_srt_struct* @u8Kg_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ho_info$def to i64)) to i32),i32 0)}>
{
c8Ho:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8QG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hq_info$def to i64
  %ln8QH = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8QG, i64* %ln8QH, !tbaa !2
  %ln8QI = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8QJ = add i64 %ln8QI, 2
  store i64 %ln8QJ, i64* %R4_Var
  %ln8QK = ptrtoint %r8xl_closure_struct* @r8xl_closure$def to i64
  store i64 %ln8QK, i64* %R3_Var
  %ln8QL = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8QL, i64* %R2_Var
  %ln8QM = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8QN = load i64, i64* %R2_Var
  %ln8QO = load i64, i64* %R3_Var
  %ln8QP = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8QM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8QN, i64 %ln8QO, i64 %ln8QP, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.663486 UTC

@c8Hq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hq_info$def to i8*)
define internal ghccc void @c8Hq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Kf_srt_struct* @u8Kf_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hq_info$def to i64)) to i32),i32 0)}>
{
c8Hq:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8QQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hs_info$def to i64
  %ln8QR = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8QQ, i64* %ln8QR, !tbaa !2
  %ln8QS = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8QT = add i64 %ln8QS, 2
  store i64 %ln8QT, i64* %R4_Var
  %ln8QU = ptrtoint %r8xh_closure_struct* @r8xh_closure$def to i64
  store i64 %ln8QU, i64* %R3_Var
  %ln8QV = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8QV, i64* %R2_Var
  %ln8QW = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8QX = load i64, i64* %R2_Var
  %ln8QY = load i64, i64* %R3_Var
  %ln8QZ = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8QW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8QX, i64 %ln8QY, i64 %ln8QZ, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.664923 UTC

@c8Hs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hs_info$def to i8*)
define internal ghccc void @c8Hs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Ke_srt_struct* @u8Ke_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hs_info$def to i64)) to i32),i32 0)}>
{
c8Hs:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8R0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hu_info$def to i64
  %ln8R1 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8R0, i64* %ln8R1, !tbaa !2
  %ln8R2 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8R3 = add i64 %ln8R2, 2
  store i64 %ln8R3, i64* %R4_Var
  %ln8R4 = ptrtoint %r8xj_closure_struct* @r8xj_closure$def to i64
  store i64 %ln8R4, i64* %R3_Var
  %ln8R5 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8R5, i64* %R2_Var
  %ln8R6 = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8R7 = load i64, i64* %R2_Var
  %ln8R8 = load i64, i64* %R3_Var
  %ln8R9 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8R6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8R7, i64 %ln8R8, i64 %ln8R9, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.665893 UTC

@c8Hu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hu_info$def to i8*)
define internal ghccc void @c8Hu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Kd_srt_struct* @u8Kd_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hu_info$def to i64)) to i32),i32 0)}>
{
c8Hu:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Ra = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hw_info$def to i64
  %ln8Rb = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Ra, i64* %ln8Rb, !tbaa !2
  %ln8Rc = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8Rd = add i64 %ln8Rc, 2
  store i64 %ln8Rd, i64* %R4_Var
  %ln8Re = ptrtoint %r8xh_closure_struct* @r8xh_closure$def to i64
  store i64 %ln8Re, i64* %R3_Var
  %ln8Rf = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8Rf, i64* %R2_Var
  %ln8Rg = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Rh = load i64, i64* %R2_Var
  %ln8Ri = load i64, i64* %R3_Var
  %ln8Rj = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Rg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Rh, i64 %ln8Ri, i64 %ln8Rj, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.6669 UTC

@c8Hw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hw_info$def to i8*)
define internal ghccc void @c8Hw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Kc_srt_struct* @u8Kc_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hw_info$def to i64)) to i32),i32 0)}>
{
c8Hw:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Rk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hy_info$def to i64
  %ln8Rl = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Rk, i64* %ln8Rl, !tbaa !2
  %ln8Rm = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8Rn = add i64 %ln8Rm, 2
  store i64 %ln8Rn, i64* %R4_Var
  %ln8Ro = ptrtoint %r8xg_closure_struct* @r8xg_closure$def to i64
  store i64 %ln8Ro, i64* %R3_Var
  %ln8Rp = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8Rp, i64* %R2_Var
  %ln8Rq = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Rr = load i64, i64* %R2_Var
  %ln8Rs = load i64, i64* %R3_Var
  %ln8Rt = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Rq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Rr, i64 %ln8Rs, i64 %ln8Rt, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.668237 UTC

@c8Hy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hy_info$def to i8*)
define internal ghccc void @c8Hy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Kb_srt_struct* @u8Kb_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Hy_info$def to i64)) to i32),i32 0)}>
{
c8Hy:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Ru = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HA_info$def to i64
  %ln8Rv = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Ru, i64* %ln8Rv, !tbaa !2
  store i64 0, i64* %R2_Var
  %ln8Rw = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Rx = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Rw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Rx, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.669421 UTC

@c8HA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HA_info$def to i8*)
define internal ghccc void @c8HA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8Ka_srt_struct* @u8Ka_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HA_info$def to i64)) to i32),i32 0)}>
{
c8HA:
  %ls8y5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Rz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HC_info$def to i64
  %ln8Ry = load i64*, i64** %Sp_Var
  %ln8RA = getelementptr inbounds i64, i64* %ln8Ry, i32 -1
  store i64 %ln8Rz, i64* %ln8RA, !tbaa !2
  %ln8RB = load i64, i64* %R1_Var
  store i64 %ln8RB, i64* %ls8y5
  %ln8RC = ptrtoint %r8x8_closure_struct* @r8x8_closure$def to i64
  store i64 %ln8RC, i64* %R1_Var
  %ln8RE = load i64, i64* %ls8y5
  %ln8RD = load i64*, i64** %Sp_Var
  %ln8RF = getelementptr inbounds i64, i64* %ln8RD, i32 0
  store i64 %ln8RE, i64* %ln8RF, !tbaa !2
  %ln8RG = load i64*, i64** %Sp_Var
  %ln8RH = getelementptr inbounds i64, i64* %ln8RG, i32 -1
  %ln8RI = ptrtoint i64* %ln8RH to i64
  %ln8RJ = inttoptr i64 %ln8RI to i64*
  store i64* %ln8RJ, i64** %Sp_Var
  %ln8RK = load i64, i64* %R1_Var
  %ln8RL = and i64 %ln8RK, 7
  %ln8RM = icmp ne i64 %ln8RL, 0
  br i1 %ln8RM, label %u8JP, label %c8HD
c8HD:
  %ln8RO = load i64, i64* %R1_Var
  %ln8RP = inttoptr i64 %ln8RO to i64*
  %ln8RQ = load i64, i64* %ln8RP, !tbaa !4
  %ln8RR = inttoptr i64 %ln8RQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RS = load i64*, i64** %Sp_Var
  %ln8RT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RR( i64* %Base_Arg, i64* %ln8RS, i64* %Hp_Arg, i64 %ln8RT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8JP:
  %ln8RU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HC_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RV = load i64*, i64** %Sp_Var
  %ln8RW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RU( i64* %Base_Arg, i64* %ln8RV, i64* %Hp_Arg, i64 %ln8RW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.671449 UTC

@c8HC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HC_info$def to i8*)
define internal ghccc void @c8HC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K9_srt_struct* @u8K9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HC_info$def to i64)) to i32),i32 0)}>
{
c8HC:
  %ls8y9 = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %ls8y8 = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %ls8y7 = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8RY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HH_info$def to i64
  %ln8RX = load i64*, i64** %Sp_Var
  %ln8RZ = getelementptr inbounds i64, i64* %ln8RX, i32 -3
  store i64 %ln8RY, i64* %ln8RZ, !tbaa !2
  %ln8S0 = add i64 %R1_Arg, 7
  %ln8S1 = inttoptr i64 %ln8S0 to i64*
  %ln8S2 = load i64, i64* %ln8S1, !tbaa !4
  store i64 %ln8S2, i64* %ls8y9
  %ln8S3 = load i64, i64* %ls8y9
  store i64 %ln8S3, i64* %R6_Var
  %ln8S4 = add i64 %R1_Arg, 23
  %ln8S5 = inttoptr i64 %ln8S4 to i64*
  %ln8S6 = load i64, i64* %ln8S5, !tbaa !4
  store i64 %ln8S6, i64* %ls8y8
  %ln8S7 = load i64, i64* %ls8y8
  store i64 %ln8S7, i64* %R5_Var
  %ln8S8 = add i64 %R1_Arg, 15
  %ln8S9 = inttoptr i64 %ln8S8 to i64*
  %ln8Sa = load i64, i64* %ln8S9, !tbaa !4
  store i64 %ln8Sa, i64* %ls8y7
  %ln8Sb = load i64, i64* %ls8y7
  store i64 %ln8Sb, i64* %R4_Var
  %ln8Sc = ptrtoint %r8xb_closure_struct* @r8xb_closure$def to i64
  %ln8Sd = add i64 %ln8Sc, 1
  store i64 %ln8Sd, i64* %R3_Var
  %ln8Se = ptrtoint i8* @base_GHCziFloat_zdfNumFloat_closure to i64
  store i64 %ln8Se, i64* %R2_Var
  %ln8Sg = load i64, i64* %ls8y7
  %ln8Sf = load i64*, i64** %Sp_Var
  %ln8Sh = getelementptr inbounds i64, i64* %ln8Sf, i32 -6
  store i64 %ln8Sg, i64* %ln8Sh, !tbaa !2
  %ln8Sj = load i64, i64* %ls8y8
  %ln8Si = load i64*, i64** %Sp_Var
  %ln8Sk = getelementptr inbounds i64, i64* %ln8Si, i32 -5
  store i64 %ln8Sj, i64* %ln8Sk, !tbaa !2
  %ln8Sm = load i64, i64* %ls8y9
  %ln8Sl = load i64*, i64** %Sp_Var
  %ln8Sn = getelementptr inbounds i64, i64* %ln8Sl, i32 -4
  store i64 %ln8Sm, i64* %ln8Sn, !tbaa !2
  %ln8Sp = load i64, i64* %ls8y8
  %ln8So = load i64*, i64** %Sp_Var
  %ln8Sq = getelementptr inbounds i64, i64* %ln8So, i32 -2
  store i64 %ln8Sp, i64* %ln8Sq, !tbaa !2
  %ln8Ss = load i64, i64* %ls8y9
  %ln8Sr = load i64*, i64** %Sp_Var
  %ln8St = getelementptr inbounds i64, i64* %ln8Sr, i32 -1
  store i64 %ln8Ss, i64* %ln8St, !tbaa !2
  %ln8Sv = load i64, i64* %ls8y7
  %ln8Su = load i64*, i64** %Sp_Var
  %ln8Sw = getelementptr inbounds i64, i64* %ln8Su, i32 0
  store i64 %ln8Sv, i64* %ln8Sw, !tbaa !2
  %ln8Sx = load i64*, i64** %Sp_Var
  %ln8Sy = getelementptr inbounds i64, i64* %ln8Sx, i32 -6
  %ln8Sz = ptrtoint i64* %ln8Sy to i64
  %ln8SA = inttoptr i64 %ln8Sz to i64*
  store i64* %ln8SA, i64** %Sp_Var
  %ln8SB = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziLevel1_zdwaxpy_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8SC = load i64*, i64** %Sp_Var
  %ln8SD = load i64, i64* %R2_Var
  %ln8SE = load i64, i64* %R3_Var
  %ln8SF = load i64, i64* %R4_Var
  %ln8SG = load i64, i64* %R5_Var
  %ln8SH = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8SB( i64* %Base_Arg, i64* %ln8SC, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8SD, i64 %ln8SE, i64 %ln8SF, i64 %ln8SG, i64 %ln8SH, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.673297 UTC

@c8HH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HH_info$def to i8*)
define internal ghccc void @c8HH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 324, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K8_srt_struct* @u8K8_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HH_info$def to i64)) to i32),i32 0)}>
{
c8HH:
  %ls8y7 = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8SI = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln8SJ = bitcast i64* %ln8SI to i64*
  %ln8SK = load i64, i64* %ln8SJ, !tbaa !2
  store i64 %ln8SK, i64* %ls8y7
  %ln8SL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HL_info$def to i64
  %ln8SM = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  store i64 %ln8SL, i64* %ln8SM, !tbaa !2
  %ln8SN = add i64 %R1_Arg, 7
  %ln8SO = inttoptr i64 %ln8SN to i64*
  %ln8SP = load i64, i64* %ln8SO, !tbaa !4
  store i64 %ln8SP, i64* %R6_Var
  %ln8SQ = add i64 %R1_Arg, 23
  %ln8SR = inttoptr i64 %ln8SQ to i64*
  %ln8SS = load i64, i64* %ln8SR, !tbaa !4
  store i64 %ln8SS, i64* %R5_Var
  %ln8ST = add i64 %R1_Arg, 15
  %ln8SU = inttoptr i64 %ln8ST to i64*
  %ln8SV = load i64, i64* %ln8SU, !tbaa !4
  store i64 %ln8SV, i64* %R4_Var
  %ln8SW = ptrtoint %r8xb_closure_struct* @r8xb_closure$def to i64
  %ln8SX = add i64 %ln8SW, 1
  store i64 %ln8SX, i64* %R3_Var
  %ln8SY = ptrtoint i8* @base_GHCziFloat_zdfNumFloat_closure to i64
  store i64 %ln8SY, i64* %R2_Var
  %ln8SZ = load i64, i64* %ls8y7
  %ln8T0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8SZ, i64* %ln8T0, !tbaa !2
  %ln8T1 = bitcast i8* @hblaszm0zi0zi0zi0zminplace_HBLASziLevel1_zdwaxpy_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8T2 = load i64, i64* %R2_Var
  %ln8T3 = load i64, i64* %R3_Var
  %ln8T4 = load i64, i64* %R4_Var
  %ln8T5 = load i64, i64* %R5_Var
  %ln8T6 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8T1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8T2, i64 %ln8T3, i64 %ln8T4, i64 %ln8T5, i64 %ln8T6, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.675259 UTC

@c8HL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HL_info$def to i8*)
define internal ghccc void @c8HL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K7_srt_struct* @u8K7_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HL_info$def to i64)) to i32),i32 0)}>
{
c8HL:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8T7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HP_info$def to i64
  %ln8T8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8T7, i64* %ln8T8, !tbaa !2
  store i64 0, i64* %R2_Var
  %ln8T9 = bitcast i8* @timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ta = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8T9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Ta, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.676565 UTC

@c8HP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HP_info$def to i8*)
define internal ghccc void @c8HP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%u8K6_srt_struct* @u8K6_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8HP_info$def to i64)) to i32),i32 0)}>
{
c8HP:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Tb = load i64*, i64** %Hp_Var
  %ln8Tc = getelementptr inbounds i64, i64* %ln8Tb, i32 4
  %ln8Td = ptrtoint i64* %ln8Tc to i64
  %ln8Te = inttoptr i64 %ln8Td to i64*
  store i64* %ln8Te, i64** %Hp_Var
  %ln8Tf = load i64*, i64** %Hp_Var
  %ln8Tg = ptrtoint i64* %ln8Tf to i64
  %ln8Th = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Ti = bitcast i64* %ln8Th to i64*
  %ln8Tj = load i64, i64* %ln8Ti, !tbaa !5
  %ln8Tk = icmp ugt i64 %ln8Tg, %ln8Tj
  %ln8Tl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Tk, i1 0 )
  br i1 %ln8Tl, label %c8JO, label %c8JN
c8JN:
  %ln8Tn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yQ_info$def to i64
  %ln8Tm = load i64*, i64** %Hp_Var
  %ln8To = getelementptr inbounds i64, i64* %ln8Tm, i32 -3
  store i64 %ln8Tn, i64* %ln8To, !tbaa !3
  %ln8Tq = load i64*, i64** %Sp_Var
  %ln8Tr = getelementptr inbounds i64, i64* %ln8Tq, i32 1
  %ln8Ts = bitcast i64* %ln8Tr to i64*
  %ln8Tt = load i64, i64* %ln8Ts, !tbaa !2
  %ln8Tp = load i64*, i64** %Hp_Var
  %ln8Tu = getelementptr inbounds i64, i64* %ln8Tp, i32 -1
  store i64 %ln8Tt, i64* %ln8Tu, !tbaa !3
  %ln8Tw = load i64, i64* %R1_Var
  %ln8Tv = load i64*, i64** %Hp_Var
  %ln8Tx = getelementptr inbounds i64, i64* %ln8Tv, i32 0
  store i64 %ln8Tw, i64* %ln8Tx, !tbaa !3
  %ln8Ty = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8Tz = add i64 %ln8Ty, 2
  store i64 %ln8Tz, i64* %R4_Var
  %ln8TA = load i64*, i64** %Hp_Var
  %ln8TB = getelementptr inbounds i64, i64* %ln8TA, i32 -3
  %ln8TC = ptrtoint i64* %ln8TB to i64
  store i64 %ln8TC, i64* %R3_Var
  %ln8TD = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8TD, i64* %R2_Var
  %ln8TE = load i64*, i64** %Sp_Var
  %ln8TF = getelementptr inbounds i64, i64* %ln8TE, i32 2
  %ln8TG = ptrtoint i64* %ln8TF to i64
  %ln8TH = inttoptr i64 %ln8TG to i64*
  store i64* %ln8TH, i64** %Sp_Var
  %ln8TI = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TJ = load i64*, i64** %Sp_Var
  %ln8TK = load i64*, i64** %Hp_Var
  %ln8TL = load i64, i64* %R1_Var
  %ln8TM = load i64, i64* %R2_Var
  %ln8TN = load i64, i64* %R3_Var
  %ln8TO = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TI( i64* %Base_Arg, i64* %ln8TJ, i64* %ln8TK, i64 %ln8TL, i64 %ln8TM, i64 %ln8TN, i64 %ln8TO, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8JO:
  %ln8TP = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln8TP, !tbaa !5
  %ln8TQ = load i64, i64* %R1_Var
  store i64 %ln8TQ, i64* %R1_Var
  %ln8TR = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TS = load i64*, i64** %Sp_Var
  %ln8TT = load i64*, i64** %Hp_Var
  %ln8TU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TR( i64* %Base_Arg, i64* %ln8TS, i64* %ln8TT, i64 %ln8TU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.678626 UTC

%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.679179 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)) to i32),i32 0)}>
{
c8TZ:
  %ln8U2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8U2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.680135 UTC

%Main_main2_closure_struct = type <{i64, i64, i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.680999 UTC

@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
c8U7:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Ua = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %ln8Ub = add i64 %ln8Ua, 1
  store i64 %ln8Ub, i64* %R2_Var
  %ln8Uc = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ud = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Uc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Ud, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.681997 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2019-04-26 20:55:44.683015 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)) to i32),i32 0)}>
{
c8Ui:
  %ln8Ul = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ul( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2019-04-26 20:55:44.684278 UTC

@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@stg_SRT_1_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_closure = external global i8
@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@base_GHCziFloat_zdfNumFloat_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziIOziVector_zdwcreateVecX_info = external global i8
@integerzmgmp_GHCziIntegerziType_Szh_con_info = external global i8
@ghczmprim_GHCziTypes_Fzh_con_info = external global i8
@ghczmprim_GHCziCString_unpackCStringzh_info = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@base_GHCziShow_zdwshowSignedInt_info = external global i8
@base_GHCziBase_zpzpzuzdszpzp_info = external global i8
@ghczmprim_GHCziCString_unpackAppendCStringzh_info = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@stg_gc_pp = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziInternalziNominalDiffTime_zdfShowNominalDiffTime3_closure = external global i8
@stg_SRT_2_info = external global i8
@base_DataziFixed_showFixed_closure = external global i8
@integerzmgmp_GHCziIntegerziType_divInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_timesInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_minusInteger_closure = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_closure = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_closure = external global i8
@stg_SRT_3_info = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStrzq_closure = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_closure = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziLevel1_zdwaxpy_closure = external global i8
@stg_upd_frame_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziSystem_zdwsystemToUTCTime_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziPOSIX_zdwutcTimeToPOSIXSeconds_info = external global i8
@integerzmgmp_GHCziIntegerziType_minusInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_timesInteger_info = external global i8
@base_DataziFixed_zdfHasResolutionE5_closure = external global i8
@integerzmgmp_GHCziIntegerziType_divInteger_info = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_DataziFixed_zdfHasResolutionE12zuzdcresolution_closure = external global i8
@base_DataziFixed_showFixed_info = external global i8
@base_GHCziBase_zpzp_info = external global i8
@base_GHCziIOziHandleziText_hPutStrzq_info = external global i8
@timezm1zi8zi0zi2_DataziTimeziClockziInternalziCTimespec_zdwclockGetTime_info = external global i8
@hblaszm0zi0zi0zi0zminplace_HBLASziLevel1_zdwaxpy_info = external global i8
@stg_gc_unpt_r1 = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8


==================== LLVM Code ====================
2019-04-26 20:55:44.685366 UTC

@llvm.used = appending constant [54 x i8*] [i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%u8Kg_srt_struct* @u8Kg_srt$def to i8*), i8* bitcast (%u8Kf_srt_struct* @u8Kf_srt$def to i8*), i8* bitcast (%u8Ke_srt_struct* @u8Ke_srt$def to i8*), i8* bitcast (%u8Kd_srt_struct* @u8Kd_srt$def to i8*), i8* bitcast (%u8Kc_srt_struct* @u8Kc_srt$def to i8*), i8* bitcast (%u8Kb_srt_struct* @u8Kb_srt$def to i8*), i8* bitcast (%u8Ka_srt_struct* @u8Ka_srt$def to i8*), i8* bitcast (%u8K9_srt_struct* @u8K9_srt$def to i8*), i8* bitcast (%u8K8_srt_struct* @u8K8_srt$def to i8*), i8* bitcast (%u8K7_srt_struct* @u8K7_srt$def to i8*), i8* bitcast (%u8K6_srt_struct* @u8K6_srt$def to i8*), i8* bitcast (%u8K5_srt_struct* @u8K5_srt$def to i8*), i8* bitcast (%u8K4_srt_struct* @u8K4_srt$def to i8*), i8* bitcast (%u8K3_srt_struct* @u8K3_srt$def to i8*), i8* bitcast (%u8K2_srt_struct* @u8K2_srt$def to i8*), i8* bitcast (%u8K1_srt_struct* @u8K1_srt$def to i8*), i8* bitcast (%u8K0_srt_struct* @u8K0_srt$def to i8*), i8* bitcast (%u8JZ_srt_struct* @u8JZ_srt$def to i8*), i8* bitcast (%u8JY_srt_struct* @u8JY_srt$def to i8*), i8* bitcast (%u8JX_srt_struct* @u8JX_srt$def to i8*), i8* bitcast (%u8JW_srt_struct* @u8JW_srt$def to i8*), i8* bitcast (%u8JV_srt_struct* @u8JV_srt$def to i8*), i8* bitcast (%u8JU_srt_struct* @u8JU_srt$def to i8*), i8* bitcast (%u8JT_srt_struct* @u8JT_srt$def to i8*), i8* bitcast (%u8JS_srt_struct* @u8JS_srt$def to i8*), i8* bitcast (%u8JR_srt_struct* @u8JR_srt$def to i8*), i8* bitcast (%u8JQ_srt_struct* @u8JQ_srt$def to i8*), i8* bitcast (%r8xn_closure_struct* @r8xn_closure$def to i8*), i8* bitcast (%r8xm_bytes_struct* @r8xm_bytes$def to i8*), i8* bitcast (%r8xl_closure_struct* @r8xl_closure$def to i8*), i8* bitcast (%r8xk_bytes_struct* @r8xk_bytes$def to i8*), i8* bitcast (%r8xj_closure_struct* @r8xj_closure$def to i8*), i8* bitcast (%r8xi_bytes_struct* @r8xi_bytes$def to i8*), i8* bitcast (%r8xh_closure_struct* @r8xh_closure$def to i8*), i8* bitcast (%r8xg_closure_struct* @r8xg_closure$def to i8*), i8* bitcast (%r8xf_closure_struct* @r8xf_closure$def to i8*), i8* bitcast (%r8xe_closure_struct* @r8xe_closure$def to i8*), i8* bitcast (%r8xd_bytes_struct* @r8xd_bytes$def to i8*), i8* bitcast (%r8xc_bytes_struct* @r8xc_bytes$def to i8*), i8* bitcast (%r8xb_closure_struct* @r8xb_closure$def to i8*), i8* bitcast (%r8xa_closure_struct* @r8xa_closure$def to i8*), i8* bitcast (%r8x9_bytes_struct* @r8x9_bytes$def to i8*), i8* bitcast (%r8x8_closure_struct* @r8x8_closure$def to i8*), i8* bitcast (%u8z0_srt_struct* @u8z0_srt$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*), i8* bitcast (%r8x7_closure_struct* @r8x7_closure$def to i8*)], section "llvm.metadata"

