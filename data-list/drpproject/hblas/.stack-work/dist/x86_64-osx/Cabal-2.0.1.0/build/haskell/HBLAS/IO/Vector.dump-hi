
==================== FINAL INTERFACE ====================
2020-05-29 02:06:22.115767 UTC

interface hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j:HBLAS.IO.Vector 8022
  interface hash: 98e94f30e4edb435a12aa63d50c82404
  ABI hash: da85799c924be5a79270dffe0f1c6355
  export-list hash: 387007447901b60a7e782fddbba74de1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 89f0d5a71cd5b0871cf62fde90f7814f
  sig of: Nothing
  used TH splices: False
  where
exports:
  HBLAS.IO.Vector.createFlatMatrix
  HBLAS.IO.Vector.createSymLowSq
  HBLAS.IO.Vector.createSymLowTri
  HBLAS.IO.Vector.createSymSq
  HBLAS.IO.Vector.createSymUpSq
  HBLAS.IO.Vector.createSymUpTri
  HBLAS.IO.Vector.createUnSymSq
  HBLAS.IO.Vector.createVec0
  HBLAS.IO.Vector.createVecX
  HBLAS.IO.Vector.createVecX'
  HBLAS.IO.Vector.helperSymLowSq
  HBLAS.IO.Vector.helperSymLowTri
  HBLAS.IO.Vector.helperSymUpSq
  HBLAS.IO.Vector.helperSymUpTri
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 primitive-0.6.3.0
                      transformers-0.5.2.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  vector-0.12.0.1:Data.Vector 05d09acb6f8f89c1df7193ef513155f3
addDependentFile "/Users/mamtajakter/.stack/programs/x86_64-osx/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
d7380e00a110c08487d71ad5cb0d3690
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HBLAS.IO.Vector.$trModule3
                   HBLAS.IO.Vector.$trModule1) -}
a5270357f146187af5659ab7a6792d90
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.IO.Vector.$trModule2) -}
fcf06dfcff08c85e727ee044be4d27f6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HBLAS.IO.Vector"#) -}
fdba16bcafb302a8c304be3680623883
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HBLAS.IO.Vector.$trModule4) -}
1488bb43e2a10e011790db99b8ac259b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hblas-0.0.0.0-F71I6QhmeyVEy1DCNMIf5j"#) -}
7bb343280c1998aac72912bdd5d64c55
  $wcreateFlatMatrix ::
    GHC.Num.Num n =>
    GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Vector.Vector n
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False -> Data.Vector.empty @ n
                                          GHC.Types.True
                                          -> case GHC.Classes.modInt# ww 9# of ww2 { DEFAULT ->
                                             case HBLAS.IO.Vector.$wcreateVecX
                                                    @ n
                                                    w
                                                    0#
                                                    ww2
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case HBLAS.IO.Vector.$wcreateFlatMatrix
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv1 ipv4
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 ipv1) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv4) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ n
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ n)
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)))) of ds2 { (#,#) ipv6 ipv7 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv8 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                  Data.Vector.Vector
                                                                                  n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ n)
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ n
                                                                                    ipv8
                                                                                    dt1
                                                                                    ipv7)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv9 ipv10 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv8
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv9 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv4)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv5
                                                                                              ipv3
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))))) of ds1 { (#,#) ipv8 ipv9 ->
                                                               case ipv9 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv7
                                                                      ipv8
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R)))) of ds3 { (#,#) ipv10 ipv11 ->
                                                               (# ipv10
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    dt1
                                                                    ipv11 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector n #)
                                                          of {} }) of ds1 { (#,#) ipv6 ipv7 ->
                                             ipv7 } } } } }) -}
c383f864a67100f5cbf8aae2e83b0159
  $wcreateSymLowSq ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False
                                          -> Data.Vector.empty @ (Data.Vector.Vector n)
                                          GHC.Types.True
                                          -> let {
                                               x :: Data.Vector.Vector n
                                               = case GHC.Classes.modInt# ww 9# of ww2 { DEFAULT ->
                                                 HBLAS.IO.Vector.$whelperSymLowSq
                                                   @ n
                                                   w
                                                   0#
                                                   ww2
                                                   ww
                                                   ww1 }
                                             } in
                                             case HBLAS.IO.Vector.$wcreateSymLowSq
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ (Data.Vector.Vector n))
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector
                                                                              (Data.Vector.Vector n)
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   (Data.Vector.Vector
                                                                                      n))[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ (Data.Vector.Vector
                                                                                        n))
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ (Data.Vector.Vector
                                                                                         n)
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Vector.Vector
                                                                                                                                                               n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     (Data.Vector.Vector
                                                                                                        n)) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     (Data.Vector.Vector
                                                                                                        n)
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ (Data.Vector.Vector
                                                                                               n)
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ (Data.Vector.Vector
                                                                                           n)
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      (Data.Vector.Vector
                                                                                                         n))
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <Data.Vector.Vector
                                                                                                                                             n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ (Data.Vector.Vector
                                                                                                   n)
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      (Data.Vector.Vector
                                                                                                         n))>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n))>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Data.Vector.Vector
                                                                                                n))>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ (Data.Vector.Vector n)
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector
                                                                           (Data.Vector.Vector n) #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Data.Vector.Vector n) #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
16cad586c28fcead8e37c6e93e0f228c
  $wcreateSymLowTri ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False
                                          -> Data.Vector.empty @ (Data.Vector.Vector n)
                                          GHC.Types.True
                                          -> let {
                                               x :: Data.Vector.Vector n
                                               = case GHC.Classes.modInt# ww 9# of ww2 { DEFAULT ->
                                                 HBLAS.IO.Vector.$whelperSymLowTri
                                                   @ n
                                                   w
                                                   0#
                                                   ww2
                                                   ww
                                                   (GHC.Types.I# ww1) }
                                             } in
                                             case HBLAS.IO.Vector.$wcreateSymLowTri
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ (Data.Vector.Vector n))
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector
                                                                              (Data.Vector.Vector n)
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   (Data.Vector.Vector
                                                                                      n))[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ (Data.Vector.Vector
                                                                                        n))
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ (Data.Vector.Vector
                                                                                         n)
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Vector.Vector
                                                                                                                                                               n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     (Data.Vector.Vector
                                                                                                        n)) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     (Data.Vector.Vector
                                                                                                        n)
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ (Data.Vector.Vector
                                                                                               n)
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ (Data.Vector.Vector
                                                                                           n)
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      (Data.Vector.Vector
                                                                                                         n))
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <Data.Vector.Vector
                                                                                                                                             n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ (Data.Vector.Vector
                                                                                                   n)
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      (Data.Vector.Vector
                                                                                                         n))>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n))>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Data.Vector.Vector
                                                                                                n))>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ (Data.Vector.Vector n)
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector
                                                                           (Data.Vector.Vector n) #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Data.Vector.Vector n) #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
bdc70b76c2b78b4e003738cdd9a4c50e
  $wcreateSymSq ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False
                                          -> Data.Vector.empty @ (Data.Vector.Vector n)
                                          GHC.Types.True
                                          -> let {
                                               x :: Data.Vector.Vector n
                                               = case GHC.Classes.modInt# ww 9# of ww2 { DEFAULT ->
                                                 HBLAS.IO.Vector.$wcreateVecX @ n w 0# ww2 ww1 }
                                             } in
                                             case HBLAS.IO.Vector.$wcreateSymSq
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ (Data.Vector.Vector n))
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector
                                                                              (Data.Vector.Vector n)
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   (Data.Vector.Vector
                                                                                      n))[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ (Data.Vector.Vector
                                                                                        n))
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ (Data.Vector.Vector
                                                                                         n)
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Vector.Vector
                                                                                                                                                               n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     (Data.Vector.Vector
                                                                                                        n)) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     (Data.Vector.Vector
                                                                                                        n)
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ (Data.Vector.Vector
                                                                                               n)
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ (Data.Vector.Vector
                                                                                           n)
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      (Data.Vector.Vector
                                                                                                         n))
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <Data.Vector.Vector
                                                                                                                                             n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ (Data.Vector.Vector
                                                                                                   n)
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      (Data.Vector.Vector
                                                                                                         n))>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n))>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Data.Vector.Vector
                                                                                                n))>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ (Data.Vector.Vector n)
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector
                                                                           (Data.Vector.Vector n) #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Data.Vector.Vector n) #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
3a384a8b0b4256d966c0b27b49f3a425
  $wcreateSymUpSq ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False
                                          -> Data.Vector.empty @ (Data.Vector.Vector n)
                                          GHC.Types.True
                                          -> let {
                                               x :: Data.Vector.Vector n
                                               = case GHC.Classes.modInt# ww 9# of ww2 { DEFAULT ->
                                                 HBLAS.IO.Vector.$whelperSymUpSq
                                                   @ n
                                                   w
                                                   0#
                                                   ww2
                                                   ww
                                                   ww1 }
                                             } in
                                             case HBLAS.IO.Vector.$wcreateSymUpSq
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ (Data.Vector.Vector n))
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector
                                                                              (Data.Vector.Vector n)
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   (Data.Vector.Vector
                                                                                      n))[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ (Data.Vector.Vector
                                                                                        n))
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ (Data.Vector.Vector
                                                                                         n)
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Vector.Vector
                                                                                                                                                               n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     (Data.Vector.Vector
                                                                                                        n)) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     (Data.Vector.Vector
                                                                                                        n)
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ (Data.Vector.Vector
                                                                                               n)
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ (Data.Vector.Vector
                                                                                           n)
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      (Data.Vector.Vector
                                                                                                         n))
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <Data.Vector.Vector
                                                                                                                                             n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ (Data.Vector.Vector
                                                                                                   n)
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      (Data.Vector.Vector
                                                                                                         n))>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n))>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Data.Vector.Vector
                                                                                                n))>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ (Data.Vector.Vector n)
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector
                                                                           (Data.Vector.Vector n) #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Data.Vector.Vector n) #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
ced68f20a243e6ef9710e0aa2bc38ba0
  $wcreateSymUpTri ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False
                                          -> Data.Vector.empty @ (Data.Vector.Vector n)
                                          GHC.Types.True
                                          -> let {
                                               x :: Data.Vector.Vector n
                                               = case GHC.Classes.modInt# ww 9# of ww2 { DEFAULT ->
                                                 case HBLAS.IO.Vector.$whelperSymUpTri
                                                        @ n
                                                        w
                                                        0#
                                                        ww2
                                                        ww
                                                        ww1 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<=# ww 0#) of wild2 {
                                                   GHC.Types.False
                                                   -> case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.<=# ww dt1) of wild3 {
                                                        GHC.Types.False
                                                        -> let {
                                                             y1 :: GHC.Prim.Int#
                                                             = GHC.Prim.-# dt1 ww
                                                           } in
                                                           case GHC.Prim.tagToEnum#
                                                                  @ GHC.Types.Bool
                                                                  (GHC.Prim.<=# 0# y1) of wild4 {
                                                             GHC.Types.False
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  (GHC.Prim.+# dt dt1)
                                                                  0#
                                                                  dt2
                                                             GHC.Types.True
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  (GHC.Prim.+# dt dt1)
                                                                  y1
                                                                  dt2 }
                                                        GHC.Types.True
                                                        -> let {
                                                             y1 :: GHC.Prim.Int#
                                                             = GHC.Prim.-# dt1 ww
                                                           } in
                                                           case GHC.Prim.tagToEnum#
                                                                  @ GHC.Types.Bool
                                                                  (GHC.Prim.<=# 0# y1) of wild4 {
                                                             GHC.Types.False
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  (GHC.Prim.+# dt ww)
                                                                  0#
                                                                  dt2
                                                             GHC.Types.True
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  (GHC.Prim.+# dt ww)
                                                                  y1
                                                                  dt2 } }
                                                   GHC.Types.True
                                                   -> case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.<=# 0# dt1) of wild3 {
                                                        GHC.Types.False
                                                        -> case GHC.Prim.tagToEnum#
                                                                  @ GHC.Types.Bool
                                                                  (GHC.Prim.<=# 0# dt1) of wild4 {
                                                             GHC.Types.False
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  (GHC.Prim.+# dt dt1)
                                                                  0#
                                                                  dt2
                                                             GHC.Types.True
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  (GHC.Prim.+# dt dt1)
                                                                  dt1
                                                                  dt2 }
                                                        GHC.Types.True
                                                        -> case GHC.Prim.tagToEnum#
                                                                  @ GHC.Types.Bool
                                                                  (GHC.Prim.<=# 0# dt1) of wild4 {
                                                             GHC.Types.False
                                                             -> Data.Vector.Vector @ n dt 0# dt2
                                                             GHC.Types.True
                                                             -> Data.Vector.Vector
                                                                  @ n
                                                                  dt
                                                                  dt1
                                                                  dt2 } } } } }
                                             } in
                                             case HBLAS.IO.Vector.$wcreateSymUpTri
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ (Data.Vector.Vector n))
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector
                                                                              (Data.Vector.Vector n)
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   (Data.Vector.Vector
                                                                                      n))[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ (Data.Vector.Vector
                                                                                        n))
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ (Data.Vector.Vector
                                                                                         n)
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Vector.Vector
                                                                                                                                                               n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     (Data.Vector.Vector
                                                                                                        n)) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     (Data.Vector.Vector
                                                                                                        n)
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ (Data.Vector.Vector
                                                                                               n)
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ (Data.Vector.Vector
                                                                                           n)
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      (Data.Vector.Vector
                                                                                                         n))
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <Data.Vector.Vector
                                                                                                                                             n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ (Data.Vector.Vector
                                                                                                   n)
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      (Data.Vector.Vector
                                                                                                         n))>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n))>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Data.Vector.Vector
                                                                                                n))>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ (Data.Vector.Vector n)
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector
                                                                           (Data.Vector.Vector n) #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Data.Vector.Vector n) #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
bb71ef0358dbb5b9e695ab21ab33218b
  $wcreateUnSymSq ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww1) of wild {
                                          GHC.Types.False
                                          -> Data.Vector.empty @ (Data.Vector.Vector n)
                                          GHC.Types.True
                                          -> let {
                                               x :: Data.Vector.Vector n
                                               = HBLAS.IO.Vector.$wcreateVecX
                                                   @ n
                                                   w
                                                   0#
                                                   (GHC.Prim.andI# ww 1#)
                                                   ww1
                                             } in
                                             case HBLAS.IO.Vector.$wcreateUnSymSq
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    ww1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector
                                                           (Data.Vector.Vector n) #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ (Data.Vector.Vector n)
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ (Data.Vector.Vector n))
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector
                                                                              (Data.Vector.Vector n)
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   (Data.Vector.Vector
                                                                                      n))[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ (Data.Vector.Vector
                                                                                        n))
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ (Data.Vector.Vector
                                                                                         n)
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Vector.Vector
                                                                                                                                                               n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     (Data.Vector.Vector
                                                                                                        n)) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     (Data.Vector.Vector
                                                                                                        n)
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ (Data.Vector.Vector
                                                                                               n)
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ (Data.Vector.Vector
                                                                                           n)
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ (Data.Vector.Vector
                                                                                        n)
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      (Data.Vector.Vector
                                                                                                         n))
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               (Data.Vector.Vector
                                                                                                  n)) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <Data.Vector.Vector
                                                                                                                                             n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ (Data.Vector.Vector
                                                                                                   n)
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      (Data.Vector.Vector
                                                                                                         n))>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ (Data.Vector.Vector n)
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            (Data.Vector.Vector
                                                                                               n))>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       (Data.Vector.Vector
                                                                                                          n)>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n)>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 (Data.Vector.Vector
                                                                                                    n))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Data.Vector.Vector
                                                                                                     n))>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Data.Vector.Vector
                                                                                                n))>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Data.Vector.Vector
                                                                                                      n)>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ (Data.Vector.Vector n)
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector
                                                                           (Data.Vector.Vector n) #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Data.Vector.Vector n) #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
b53ad062f82e719683ee939ab6afc454
  $wcreateVecX ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Vector.Vector n
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><L,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww2) of wild {
                                          GHC.Types.False -> Data.Vector.empty @ n
                                          GHC.Types.True
                                          -> let {
                                               x :: n
                                               = GHC.Num.+
                                                   @ n
                                                   w
                                                   (GHC.Num.fromInteger
                                                      @ n
                                                      w
                                                      (case GHC.Classes.modInt#
                                                              ww1
                                                              9# of ww3 { DEFAULT ->
                                                       GHC.Integer.Type.smallInteger ww3 }))
                                                   (GHC.Num.fromInteger @ n w 1)
                                             } in
                                             case HBLAS.IO.Vector.$wcreateVecX
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ n
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ n)
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ n)
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ n
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     n) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     n
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ n
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ n
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector n #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
6cd42d20b1fd6ff8954c925e22528e07
  $whelperSymLowSq ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#)
                                          (ww3 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=# ww ww2) of wild {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<# ww ww3) of wild1 {
                                               GHC.Types.False -> Data.Vector.empty @ n
                                               GHC.Types.True
                                               -> let {
                                                    x :: n = GHC.Num.fromInteger @ n w 0
                                                  } in
                                                  case HBLAS.IO.Vector.$whelperSymLowSq
                                                         @ n
                                                         w
                                                         (GHC.Prim.+# ww 1#)
                                                         (GHC.Prim.+# ww1 1#)
                                                         ww2
                                                         ww3 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                  case GHC.Magic.runRW#
                                                         @ ('GHC.Types.TupleRep
                                                              '['GHC.Types.TupleRep '[],
                                                                'GHC.Types.LiftedRep])
                                                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              Data.Vector.Vector n #)
                                                         (\ (s1 :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld)[OneShot] ->
                                                          let {
                                                            x1 :: GHC.Prim.Int#
                                                            = GHC.Prim.+# 1# ipv1
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 1#) of wild4 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<#
                                                                         x1
                                                                         ipv1) of wild5 {
                                                                 GHC.Types.False
                                                                 -> case GHC.Prim.newArray#
                                                                           @ n
                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                           x1
                                                                           (Data.Vector.Mutable.uninitialised
                                                                              @ n)
                                                                           s1
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R))
                                                                                          (((GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                    letrec {
                                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                                      -> GHC.Types.Int
                                                                                      -> Data.Either.Either
                                                                                           GHC.Types.Bool
                                                                                           GHC.Types.Bool
                                                                                      -> GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           GHC.Types.Int
                                                                        {- Arity: 3 -}
                                                                      = \ (ds4 :: GHC.Types.SPEC)
                                                                          (z :: GHC.Types.Int)
                                                                          (s7 :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool) ->
                                                                        case ds4 of ds5 { DEFAULT ->
                                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                                        (\ (s8 :: GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld) ->
                                                                         let {
                                                                           $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       GHC.Types.Int #)
                                                                             <join 2> {- Arity: 2 -}
                                                                           = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        Data.Vector.Vector
                                                                                        n)[OneShot]
                                                                               (s' :: Data.Either.Either
                                                                                        GHC.Types.Bool
                                                                                        GHC.Types.Bool)[OneShot] ->
                                                                             case x2 of wild2 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                             case (f1
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld)
                                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                                        @ GHC.Prim.RealWorld)
                                                                                     (Data.Vector.$fVectorVectora
                                                                                        @ n)
                                                                                     (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                      (Data.Vector.Mutable.MVector
                                                                                         @ (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld))
                                                                                         @ n
                                                                                         ipv6
                                                                                         dt1
                                                                                         ipv4)
                                                                                        `cast`
                                                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                                    `cast`
                                                                                  (GHC.ST.N:ST[0]
                                                                                       <GHC.Prim.RealWorld>_N
                                                                                       <()>_R)
                                                                                    s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                             (foldlM'_loop
                                                                                GHC.Types.SPEC
                                                                                (case m1 of wild6 { GHC.Types.I# y ->
                                                                                 GHC.Types.I#
                                                                                   (GHC.Prim.+#
                                                                                      ipv6
                                                                                      y) })
                                                                                s')
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)
                                                                               ipv5 } }
                                                                         } in
                                                                         case s7 of wild2 {
                                                                           Data.Either.Left sa
                                                                           -> case sa of wild3 {
                                                                                GHC.Types.False
                                                                                -> (foldlM'_loop
                                                                                      GHC.Types.SPEC
                                                                                      z1
                                                                                      (Data.Either.Right
                                                                                         @ GHC.Types.Bool
                                                                                         @ GHC.Types.Bool
                                                                                         GHC.Types.True))
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <GHC.Types.Int>_R)
                                                                                     s8
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Vector
                                                                                        @ n
                                                                                        (GHC.Types.I#
                                                                                           1#)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                          Data.Vector.Vector
                                                                                                          n) ->
                                                                                         let {
                                                                                           $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                          (Data.Vector.Generic.Base.Mutable
                                                                                                             Data.Vector.Vector)
                                                                                                          n
                                                                                           = Data.Vector.Generic.Base.$p1Vector
                                                                                               @ Data.Vector.Vector
                                                                                               @ n
                                                                                               $dVector
                                                                                         } in
                                                                                         \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                           @ (Data.Vector.Generic.Base.Mutable
                                                                                                Data.Vector.Vector)
                                                                                           @ n
                                                                                           $dMVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           v1
                                                                                           (GHC.Types.I#
                                                                                              0#)
                                                                                           x))
                                                                                     (Data.Either.Left
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) }
                                                                           Data.Either.Right sb
                                                                           -> case sb of wild3 {
                                                                                GHC.Types.False
                                                                                -> (# s8, z1 #)
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Vector
                                                                                        @ n
                                                                                        (GHC.Types.I#
                                                                                           ipv1)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         case mv
                                                                                                `cast`
                                                                                              (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                         m1>_N <n>_N) of wild7 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                         Control.Monad.Primitive.primitive
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           @ ()
                                                                                           (\ (s# :: GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          m1)) ->
                                                                                            case GHC.Prim.copyArray#
                                                                                                   @ n
                                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                                        m1)
                                                                                                   ipv2
                                                                                                   ipv
                                                                                                   dt2
                                                                                                   dt
                                                                                                   dt1
                                                                                                   s# of s'# { DEFAULT ->
                                                                                            (# s'#,
                                                                                               GHC.Tuple.() #) }) }))
                                                                                     (Data.Either.Right
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) } })
                                                                          `cast`
                                                                        (Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)) } }
                                                                    } in
                                                                    case (foldlM'_loop
                                                                            GHC.Types.SPEC
                                                                            (GHC.Types.I# 0#)
                                                                            (Data.Either.Left
                                                                               @ GHC.Types.Bool
                                                                               @ GHC.Types.Bool
                                                                               GHC.Types.True))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <GHC.Types.Int>_R)
                                                                           ipv3
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                              (GHC.ST.ST
                                                                                                                 GHC.Prim.RealWorld))
                                                                                                           n)>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                    case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                    case GHC.Prim.unsafeFreezeArray#
                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                           @ n
                                                                           ipv4
                                                                           ipv6
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R
                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R))
                                                                                          (((GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                    (# ipv5
                                                                         `cast`
                                                                       (Nth:2
                                                                            (Nth:3
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (((GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        n>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.Array
                                                                                                       n)>_R)
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R
                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        n>_R))))),
                                                                       Data.Vector.Vector
                                                                         @ n
                                                                         0#
                                                                         dt1
                                                                         ipv9 #) } } } }
                                                                 GHC.Types.True
                                                                 -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                           x1
                                                                    ret_ty (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              Data.Vector.Vector
                                                                                n #)
                                                                    of {} }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                                  ipv4 } } }
                                          GHC.Types.True
                                          -> let {
                                               x :: n
                                               = GHC.Num.+
                                                   @ n
                                                   w
                                                   (GHC.Num.fromInteger
                                                      @ n
                                                      w
                                                      (case GHC.Classes.modInt#
                                                              ww1
                                                              9# of ww4 { DEFAULT ->
                                                       GHC.Integer.Type.smallInteger ww4 }))
                                                   (GHC.Num.fromInteger @ n w 1)
                                             } in
                                             case HBLAS.IO.Vector.$whelperSymLowSq
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2
                                                    ww3 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ n
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ n)
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ n)
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ n
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     n) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     n
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ n
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ n
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector n #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
3fdb490b43ace34631bcf0489de09b1e
  $whelperSymLowTri ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><L,U><S,U><L,A>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#)
                                          (w1 :: GHC.Types.Int) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=# ww ww2) of wild {
                                          GHC.Types.False -> Data.Vector.empty @ n
                                          GHC.Types.True
                                          -> let {
                                               x :: n
                                               = GHC.Num.+
                                                   @ n
                                                   w
                                                   (GHC.Num.fromInteger
                                                      @ n
                                                      w
                                                      (case GHC.Classes.modInt#
                                                              ww1
                                                              9# of ww3 { DEFAULT ->
                                                       GHC.Integer.Type.smallInteger ww3 }))
                                                   (GHC.Num.fromInteger @ n w 1)
                                             } in
                                             case HBLAS.IO.Vector.$whelperSymLowTri
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2
                                                    w1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ n
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ n)
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ n)
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ n
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     n) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     n
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ n
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ n
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector n #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
c6a796b8690fb63fe2231fa03707d5e9
  $whelperSymUpSq ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#)
                                          (ww3 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww2) of wild {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<# ww ww3) of wild1 {
                                               GHC.Types.False -> Data.Vector.empty @ n
                                               GHC.Types.True
                                               -> let {
                                                    x :: n
                                                    = GHC.Num.+
                                                        @ n
                                                        w
                                                        (GHC.Num.fromInteger
                                                           @ n
                                                           w
                                                           (case GHC.Classes.modInt#
                                                                   ww1
                                                                   9# of ww4 { DEFAULT ->
                                                            GHC.Integer.Type.smallInteger ww4 }))
                                                        (GHC.Num.fromInteger @ n w 1)
                                                  } in
                                                  case HBLAS.IO.Vector.$whelperSymUpSq
                                                         @ n
                                                         w
                                                         (GHC.Prim.+# ww 1#)
                                                         (GHC.Prim.+# ww1 1#)
                                                         ww2
                                                         ww3 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                  case GHC.Magic.runRW#
                                                         @ ('GHC.Types.TupleRep
                                                              '['GHC.Types.TupleRep '[],
                                                                'GHC.Types.LiftedRep])
                                                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              Data.Vector.Vector n #)
                                                         (\ (s1 :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld)[OneShot] ->
                                                          let {
                                                            x1 :: GHC.Prim.Int#
                                                            = GHC.Prim.+# 1# ipv1
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 1#) of wild4 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<#
                                                                         x1
                                                                         ipv1) of wild5 {
                                                                 GHC.Types.False
                                                                 -> case GHC.Prim.newArray#
                                                                           @ n
                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                           x1
                                                                           (Data.Vector.Mutable.uninitialised
                                                                              @ n)
                                                                           s1
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R))
                                                                                          (((GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                    letrec {
                                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                                      -> GHC.Types.Int
                                                                                      -> Data.Either.Either
                                                                                           GHC.Types.Bool
                                                                                           GHC.Types.Bool
                                                                                      -> GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           GHC.Types.Int
                                                                        {- Arity: 3 -}
                                                                      = \ (ds4 :: GHC.Types.SPEC)
                                                                          (z :: GHC.Types.Int)
                                                                          (s7 :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool) ->
                                                                        case ds4 of ds5 { DEFAULT ->
                                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                                        (\ (s8 :: GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld) ->
                                                                         let {
                                                                           $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       GHC.Types.Int #)
                                                                             <join 2> {- Arity: 2 -}
                                                                           = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        Data.Vector.Vector
                                                                                        n)[OneShot]
                                                                               (s' :: Data.Either.Either
                                                                                        GHC.Types.Bool
                                                                                        GHC.Types.Bool)[OneShot] ->
                                                                             case x2 of wild2 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                             case (f1
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld)
                                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                                        @ GHC.Prim.RealWorld)
                                                                                     (Data.Vector.$fVectorVectora
                                                                                        @ n)
                                                                                     (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                      (Data.Vector.Mutable.MVector
                                                                                         @ (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld))
                                                                                         @ n
                                                                                         ipv6
                                                                                         dt1
                                                                                         ipv4)
                                                                                        `cast`
                                                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                                    `cast`
                                                                                  (GHC.ST.N:ST[0]
                                                                                       <GHC.Prim.RealWorld>_N
                                                                                       <()>_R)
                                                                                    s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                             (foldlM'_loop
                                                                                GHC.Types.SPEC
                                                                                (case m1 of wild6 { GHC.Types.I# y ->
                                                                                 GHC.Types.I#
                                                                                   (GHC.Prim.+#
                                                                                      ipv6
                                                                                      y) })
                                                                                s')
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)
                                                                               ipv5 } }
                                                                         } in
                                                                         case s7 of wild2 {
                                                                           Data.Either.Left sa
                                                                           -> case sa of wild3 {
                                                                                GHC.Types.False
                                                                                -> (foldlM'_loop
                                                                                      GHC.Types.SPEC
                                                                                      z1
                                                                                      (Data.Either.Right
                                                                                         @ GHC.Types.Bool
                                                                                         @ GHC.Types.Bool
                                                                                         GHC.Types.True))
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <GHC.Types.Int>_R)
                                                                                     s8
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Vector
                                                                                        @ n
                                                                                        (GHC.Types.I#
                                                                                           1#)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                          Data.Vector.Vector
                                                                                                          n) ->
                                                                                         let {
                                                                                           $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                          (Data.Vector.Generic.Base.Mutable
                                                                                                             Data.Vector.Vector)
                                                                                                          n
                                                                                           = Data.Vector.Generic.Base.$p1Vector
                                                                                               @ Data.Vector.Vector
                                                                                               @ n
                                                                                               $dVector
                                                                                         } in
                                                                                         \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                           @ (Data.Vector.Generic.Base.Mutable
                                                                                                Data.Vector.Vector)
                                                                                           @ n
                                                                                           $dMVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           v1
                                                                                           (GHC.Types.I#
                                                                                              0#)
                                                                                           x))
                                                                                     (Data.Either.Left
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) }
                                                                           Data.Either.Right sb
                                                                           -> case sb of wild3 {
                                                                                GHC.Types.False
                                                                                -> (# s8, z1 #)
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Vector
                                                                                        @ n
                                                                                        (GHC.Types.I#
                                                                                           ipv1)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         case mv
                                                                                                `cast`
                                                                                              (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                         m1>_N <n>_N) of wild7 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                         Control.Monad.Primitive.primitive
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           @ ()
                                                                                           (\ (s# :: GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          m1)) ->
                                                                                            case GHC.Prim.copyArray#
                                                                                                   @ n
                                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                                        m1)
                                                                                                   ipv2
                                                                                                   ipv
                                                                                                   dt2
                                                                                                   dt
                                                                                                   dt1
                                                                                                   s# of s'# { DEFAULT ->
                                                                                            (# s'#,
                                                                                               GHC.Tuple.() #) }) }))
                                                                                     (Data.Either.Right
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) } })
                                                                          `cast`
                                                                        (Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)) } }
                                                                    } in
                                                                    case (foldlM'_loop
                                                                            GHC.Types.SPEC
                                                                            (GHC.Types.I# 0#)
                                                                            (Data.Either.Left
                                                                               @ GHC.Types.Bool
                                                                               @ GHC.Types.Bool
                                                                               GHC.Types.True))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <GHC.Types.Int>_R)
                                                                           ipv3
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                              (GHC.ST.ST
                                                                                                                 GHC.Prim.RealWorld))
                                                                                                           n)>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                    case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                    case GHC.Prim.unsafeFreezeArray#
                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                           @ n
                                                                           ipv4
                                                                           ipv6
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R
                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R))
                                                                                          (((GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                    (# ipv5
                                                                         `cast`
                                                                       (Nth:2
                                                                            (Nth:3
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (((GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        n>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.Array
                                                                                                       n)>_R)
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R
                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        n>_R))))),
                                                                       Data.Vector.Vector
                                                                         @ n
                                                                         0#
                                                                         dt1
                                                                         ipv9 #) } } } }
                                                                 GHC.Types.True
                                                                 -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                           x1
                                                                    ret_ty (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              Data.Vector.Vector
                                                                                n #)
                                                                    of {} }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                                  ipv4 } } }
                                          GHC.Types.True
                                          -> let {
                                               x :: n = GHC.Num.fromInteger @ n w 0
                                             } in
                                             case HBLAS.IO.Vector.$whelperSymUpSq
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2
                                                    ww3 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ n
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ n)
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ n)
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ n
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     n) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     n
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ n
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ n
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector n #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
12cc16c87d9a085f20cb1a2edc8c3b1f
  $whelperSymUpTri ::
    GHC.Num.Num n =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ n
                                          (w :: GHC.Num.Num n)
                                          (ww :: GHC.Prim.Int#)
                                          (ww1 :: GHC.Prim.Int#)
                                          (ww2 :: GHC.Prim.Int#)
                                          (ww3 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww ww2) of wild {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<# ww ww3) of wild1 {
                                               GHC.Types.False -> Data.Vector.empty @ n
                                               GHC.Types.True
                                               -> let {
                                                    x :: n
                                                    = GHC.Num.+
                                                        @ n
                                                        w
                                                        (GHC.Num.fromInteger
                                                           @ n
                                                           w
                                                           (case GHC.Classes.modInt#
                                                                   ww1
                                                                   9# of ww4 { DEFAULT ->
                                                            GHC.Integer.Type.smallInteger ww4 }))
                                                        (GHC.Num.fromInteger @ n w 1)
                                                  } in
                                                  case HBLAS.IO.Vector.$whelperSymUpTri
                                                         @ n
                                                         w
                                                         (GHC.Prim.+# ww 1#)
                                                         (GHC.Prim.+# ww1 1#)
                                                         ww2
                                                         ww3 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                  case GHC.Magic.runRW#
                                                         @ ('GHC.Types.TupleRep
                                                              '['GHC.Types.TupleRep '[],
                                                                'GHC.Types.LiftedRep])
                                                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              Data.Vector.Vector n #)
                                                         (\ (s1 :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld)[OneShot] ->
                                                          let {
                                                            x1 :: GHC.Prim.Int#
                                                            = GHC.Prim.+# 1# ipv1
                                                          } in
                                                          case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 1#) of wild4 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<#
                                                                         x1
                                                                         ipv1) of wild5 {
                                                                 GHC.Types.False
                                                                 -> case GHC.Prim.newArray#
                                                                           @ n
                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                           x1
                                                                           (Data.Vector.Mutable.uninitialised
                                                                              @ n)
                                                                           s1
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R))
                                                                                          (((GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                    letrec {
                                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                                      -> GHC.Types.Int
                                                                                      -> Data.Either.Either
                                                                                           GHC.Types.Bool
                                                                                           GHC.Types.Bool
                                                                                      -> GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           GHC.Types.Int
                                                                        {- Arity: 3 -}
                                                                      = \ (ds4 :: GHC.Types.SPEC)
                                                                          (z :: GHC.Types.Int)
                                                                          (s7 :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool) ->
                                                                        case ds4 of ds5 { DEFAULT ->
                                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                                        (\ (s8 :: GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld) ->
                                                                         let {
                                                                           $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                       GHC.Types.Int #)
                                                                             <join 2> {- Arity: 2 -}
                                                                           = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        Data.Vector.Vector
                                                                                        n)[OneShot]
                                                                               (s' :: Data.Either.Either
                                                                                        GHC.Types.Bool
                                                                                        GHC.Types.Bool)[OneShot] ->
                                                                             case x2 of wild2 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                             case (f1
                                                                                     @ (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld)
                                                                                     (Control.Monad.Primitive.$fPrimMonadST
                                                                                        @ GHC.Prim.RealWorld)
                                                                                     (Data.Vector.$fVectorVectora
                                                                                        @ n)
                                                                                     (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                      (Data.Vector.Mutable.MVector
                                                                                         @ (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld))
                                                                                         @ n
                                                                                         ipv6
                                                                                         dt1
                                                                                         ipv4)
                                                                                        `cast`
                                                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                                    `cast`
                                                                                  (GHC.ST.N:ST[0]
                                                                                       <GHC.Prim.RealWorld>_N
                                                                                       <()>_R)
                                                                                    s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                             (foldlM'_loop
                                                                                GHC.Types.SPEC
                                                                                (case m1 of wild6 { GHC.Types.I# y ->
                                                                                 GHC.Types.I#
                                                                                   (GHC.Prim.+#
                                                                                      ipv6
                                                                                      y) })
                                                                                s')
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)
                                                                               ipv5 } }
                                                                         } in
                                                                         case s7 of wild2 {
                                                                           Data.Either.Left sa
                                                                           -> case sa of wild3 {
                                                                                GHC.Types.False
                                                                                -> (foldlM'_loop
                                                                                      GHC.Types.SPEC
                                                                                      z1
                                                                                      (Data.Either.Right
                                                                                         @ GHC.Types.Bool
                                                                                         @ GHC.Types.Bool
                                                                                         GHC.Types.True))
                                                                                     `cast`
                                                                                   (GHC.ST.N:ST[0]
                                                                                        <GHC.Prim.RealWorld>_N
                                                                                        <GHC.Types.Int>_R)
                                                                                     s8
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Vector
                                                                                        @ n
                                                                                        (GHC.Types.I#
                                                                                           1#)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                          Data.Vector.Vector
                                                                                                          n) ->
                                                                                         let {
                                                                                           $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                          (Data.Vector.Generic.Base.Mutable
                                                                                                             Data.Vector.Vector)
                                                                                                          n
                                                                                           = Data.Vector.Generic.Base.$p1Vector
                                                                                               @ Data.Vector.Vector
                                                                                               @ n
                                                                                               $dVector
                                                                                         } in
                                                                                         \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                           @ (Data.Vector.Generic.Base.Mutable
                                                                                                Data.Vector.Vector)
                                                                                           @ n
                                                                                           $dMVector
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           v1
                                                                                           (GHC.Types.I#
                                                                                              0#)
                                                                                           x))
                                                                                     (Data.Either.Left
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) }
                                                                           Data.Either.Right sb
                                                                           -> case sb of wild3 {
                                                                                GHC.Types.False
                                                                                -> (# s8, z1 #)
                                                                                GHC.Types.True
                                                                                -> $j
                                                                                     (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                        @ Data.Vector.Vector
                                                                                        @ n
                                                                                        (GHC.Types.I#
                                                                                           ipv1)
                                                                                        (\ @ m1 :: *
                                                                                                   -> *
                                                                                           ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                             m1)
                                                                                           ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                           Data.Vector.Vector
                                                                                                           n)
                                                                                           (mv :: Data.Vector.Generic.Base.Mutable
                                                                                                    Data.Vector.Vector
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       m1)
                                                                                                    n) ->
                                                                                         case mv
                                                                                                `cast`
                                                                                              (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                         m1>_N <n>_N) of wild7 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                         Control.Monad.Primitive.primitive
                                                                                           @ m1
                                                                                           $dPrimMonad
                                                                                           @ ()
                                                                                           (\ (s# :: GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          m1)) ->
                                                                                            case GHC.Prim.copyArray#
                                                                                                   @ n
                                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                                        m1)
                                                                                                   ipv2
                                                                                                   ipv
                                                                                                   dt2
                                                                                                   dt
                                                                                                   dt1
                                                                                                   s# of s'# { DEFAULT ->
                                                                                            (# s'#,
                                                                                               GHC.Tuple.() #) }) }))
                                                                                     (Data.Either.Right
                                                                                        @ GHC.Types.Bool
                                                                                        @ GHC.Types.Bool
                                                                                        GHC.Types.False) } })
                                                                          `cast`
                                                                        (Sym (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <GHC.Types.Int>_R)) } }
                                                                    } in
                                                                    case (foldlM'_loop
                                                                            GHC.Types.SPEC
                                                                            (GHC.Types.I# 0#)
                                                                            (Data.Either.Left
                                                                               @ GHC.Types.Bool
                                                                               @ GHC.Types.Bool
                                                                               GHC.Types.True))
                                                                           `cast`
                                                                         (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <GHC.Types.Int>_R)
                                                                           ipv3
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                              (GHC.ST.ST
                                                                                                                 GHC.Prim.RealWorld))
                                                                                                           n)>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                    case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                    case GHC.Prim.unsafeFreezeArray#
                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                (GHC.ST.ST
                                                                                   GHC.Prim.RealWorld))
                                                                           @ n
                                                                           ipv4
                                                                           ipv6
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R
                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            n>_R))
                                                                                          (((GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                    (# ipv5
                                                                         `cast`
                                                                       (Nth:2
                                                                            (Nth:3
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (((GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        n>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.Array
                                                                                                       n)>_R)
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R
                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        n>_R))))),
                                                                       Data.Vector.Vector
                                                                         @ n
                                                                         0#
                                                                         dt1
                                                                         ipv9 #) } } } }
                                                                 GHC.Types.True
                                                                 -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                           x1
                                                                    ret_ty (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              Data.Vector.Vector
                                                                                n #)
                                                                    of {} }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                                  ipv4 } } }
                                          GHC.Types.True
                                          -> let {
                                               x :: n = GHC.Num.fromInteger @ n w 0
                                             } in
                                             case HBLAS.IO.Vector.$whelperSymUpTri
                                                    @ n
                                                    w
                                                    (GHC.Prim.+# ww 1#)
                                                    (GHC.Prim.+# ww1 1#)
                                                    ww2
                                                    ww3 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                             case GHC.Magic.runRW#
                                                    @ ('GHC.Types.TupleRep
                                                         '['GHC.Types.TupleRep '[],
                                                           'GHC.Types.LiftedRep])
                                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Vector n #)
                                                    (\ (s1 :: GHC.Prim.State#
                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                     let {
                                                       x1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ipv1
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<# x1 1#) of wild4 {
                                                       GHC.Types.False
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.<# x1 ipv1) of wild5 {
                                                            GHC.Types.False
                                                            -> case GHC.Prim.newArray#
                                                                      @ n
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      x1
                                                                      (Data.Vector.Mutable.uninitialised
                                                                         @ n)
                                                                      s1
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                               letrec {
                                                                 foldlM'_loop :: GHC.Types.SPEC
                                                                                 -> GHC.Types.Int
                                                                                 -> Data.Either.Either
                                                                                      GHC.Types.Bool
                                                                                      GHC.Types.Bool
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      GHC.Types.Int
                                                                   {- Arity: 3 -}
                                                                 = \ (ds4 :: GHC.Types.SPEC)
                                                                     (z :: GHC.Types.Int)
                                                                     (s7 :: Data.Either.Either
                                                                              GHC.Types.Bool
                                                                              GHC.Types.Bool) ->
                                                                   case ds4 of ds5 { DEFAULT ->
                                                                   case z of z1 { GHC.Types.I# ipv6 ->
                                                                   (\ (s8 :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld) ->
                                                                    let {
                                                                      $j :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                              Data.Vector.Vector n
                                                                            -> Data.Either.Either
                                                                                 GHC.Types.Bool
                                                                                 GHC.Types.Bool
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Types.Int #)
                                                                        <join 2> {- Arity: 2 -}
                                                                      = \ (x2 :: Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   Data.Vector.Vector
                                                                                   n)[OneShot]
                                                                          (s' :: Data.Either.Either
                                                                                   GHC.Types.Bool
                                                                                   GHC.Types.Bool)[OneShot] ->
                                                                        case x2 of wild1 { Data.Vector.Fusion.Bundle.Monadic.Chunk m1 f1 ->
                                                                        case (f1
                                                                                @ (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)
                                                                                (Control.Monad.Primitive.$fPrimMonadST
                                                                                   @ GHC.Prim.RealWorld)
                                                                                (Data.Vector.$fVectorVectora
                                                                                   @ n)
                                                                                (case m1 of dt { GHC.Types.I# dt1 ->
                                                                                 (Data.Vector.Mutable.MVector
                                                                                    @ (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                    @ n
                                                                                    ipv6
                                                                                    dt1
                                                                                    ipv4)
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <n>_N) }))
                                                                               `cast`
                                                                             (GHC.ST.N:ST[0]
                                                                                  <GHC.Prim.RealWorld>_N
                                                                                  <()>_R)
                                                                               s8 of ds1 { (#,#) ipv5 ipv7 ->
                                                                        (foldlM'_loop
                                                                           GHC.Types.SPEC
                                                                           (case m1 of wild6 { GHC.Types.I# y ->
                                                                            GHC.Types.I#
                                                                              (GHC.Prim.+#
                                                                                 ipv6
                                                                                 y) })
                                                                           s')
                                                                          `cast`
                                                                        (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)
                                                                          ipv5 } }
                                                                    } in
                                                                    case s7 of wild2 {
                                                                      Data.Either.Left sa
                                                                      -> case sa of wild1 {
                                                                           GHC.Types.False
                                                                           -> (foldlM'_loop
                                                                                 GHC.Types.SPEC
                                                                                 z1
                                                                                 (Data.Either.Right
                                                                                    @ GHC.Types.Bool
                                                                                    @ GHC.Types.Bool
                                                                                    GHC.Types.True))
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)
                                                                                s8
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I# 1#)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                     Data.Vector.Vector
                                                                                                     n) ->
                                                                                    let {
                                                                                      $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                                                                     (Data.Vector.Generic.Base.Mutable
                                                                                                        Data.Vector.Vector)
                                                                                                     n
                                                                                      = Data.Vector.Generic.Base.$p1Vector
                                                                                          @ Data.Vector.Vector
                                                                                          @ n
                                                                                          $dVector
                                                                                    } in
                                                                                    \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                                                      @ (Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector)
                                                                                      @ n
                                                                                      $dMVector
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      v1
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      x))
                                                                                (Data.Either.Left
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) }
                                                                      Data.Either.Right sb
                                                                      -> case sb of wild1 {
                                                                           GHC.Types.False
                                                                           -> (# s8, z1 #)
                                                                           GHC.Types.True
                                                                           -> $j
                                                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                                                   @ Data.Vector.Vector
                                                                                   @ n
                                                                                   (GHC.Types.I#
                                                                                      ipv1)
                                                                                   (\ @ m1 :: * -> *
                                                                                      ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                                                        m1)
                                                                                      ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                                                                      Data.Vector.Vector
                                                                                                      n)
                                                                                      (mv :: Data.Vector.Generic.Base.Mutable
                                                                                               Data.Vector.Vector
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  m1)
                                                                                               n) ->
                                                                                    case mv
                                                                                           `cast`
                                                                                         (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                    m1>_N <n>_N) of wild3 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                                    Control.Monad.Primitive.primitive
                                                                                      @ m1
                                                                                      $dPrimMonad
                                                                                      @ ()
                                                                                      (\ (s# :: GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     m1)) ->
                                                                                       case GHC.Prim.copyArray#
                                                                                              @ n
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   m1)
                                                                                              ipv2
                                                                                              ipv
                                                                                              dt2
                                                                                              dt
                                                                                              dt1
                                                                                              s# of s'# { DEFAULT ->
                                                                                       (# s'#,
                                                                                          GHC.Tuple.() #) }) }))
                                                                                (Data.Either.Right
                                                                                   @ GHC.Types.Bool
                                                                                   @ GHC.Types.Bool
                                                                                   GHC.Types.False) } })
                                                                     `cast`
                                                                   (Sym (GHC.ST.N:ST[0]
                                                                             <GHC.Prim.RealWorld>_N
                                                                             <GHC.Types.Int>_R)) } }
                                                               } in
                                                               case (foldlM'_loop
                                                                       GHC.Types.SPEC
                                                                       (GHC.Types.I# 0#)
                                                                       (Data.Either.Left
                                                                          @ GHC.Types.Bool
                                                                          @ GHC.Types.Bool
                                                                          GHC.Types.True))
                                                                      `cast`
                                                                    (GHC.ST.N:ST[0]
                                                                         <GHC.Prim.RealWorld>_N
                                                                         <GHC.Types.Int>_R)
                                                                      ipv3
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:3
                                                                                (Nth:2
                                                                                     (Trans
                                                                                          (((GHC.Prim.State#
                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                            ->_R ((#,#)
                                                                                                    <'GHC.Types.TupleRep
                                                                                                       '[]>_R
                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                    (GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R)_R)
                                                                                           ->_R <GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                         (GHC.ST.ST
                                                                                                            GHC.Prim.RealWorld))
                                                                                                      n)>_R)
                                                                                          (<GHC.ST.STRep
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                    (GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld))
                                                                                                 n)>_R
                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       n>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                               case ipv7 of dt { GHC.Types.I# dt1 ->
                                                               case GHC.Prim.unsafeFreezeArray#
                                                                      @ (Control.Monad.Primitive.PrimState
                                                                           (GHC.ST.ST
                                                                              GHC.Prim.RealWorld))
                                                                      @ n
                                                                      ipv4
                                                                      ipv6
                                                                        `cast`
                                                                      (Nth:2
                                                                           (Nth:2
                                                                                (Trans
                                                                                     (<GHC.ST.STRep
                                                                                         GHC.Prim.RealWorld
                                                                                         (Data.Primitive.Array.Array
                                                                                            n)>_R
                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                    <Data.Primitive.Array.Array
                                                                                                       n>_R))
                                                                                     (((GHC.Prim.State#
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                       ->_R ((#,#)
                                                                                               <'GHC.Types.TupleRep
                                                                                                  '[]>_R
                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                               (GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               <Data.Primitive.Array.Array
                                                                                                  n>_R)_R)
                                                                                      ->_R <GHC.ST.ST
                                                                                              GHC.Prim.RealWorld
                                                                                              (Data.Primitive.Array.Array
                                                                                                 n)>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                               (# ipv5
                                                                    `cast`
                                                                  (Nth:2
                                                                       (Nth:3
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (((GHC.Prim.State#
                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  n)>_R)
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             n)>_R
                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                <Data.Primitive.Array.Array
                                                                                                   n>_R))))),
                                                                  Data.Vector.Vector
                                                                    @ n
                                                                    0#
                                                                    dt1
                                                                    ipv9 #) } } } }
                                                            GHC.Types.True
                                                            -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                      x1
                                                               ret_ty (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Vector.Vector n #)
                                                               of {} }
                                                       GHC.Types.True
                                                       -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector n #)
                                                          of {} }) of ds1 { (#,#) ipv3 ipv4 ->
                                             ipv4 } } }) -}
b7d292c0a098cdeb4f7da87faeea3fba
  createFlatMatrix ::
    GHC.Num.Num n =>
    GHC.Types.Int -> GHC.Types.Int -> Data.Vector.Vector n
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateFlatMatrix @ n w ww1 ww3 } }) -}
7dac6d86dc5dc8c3e5ea44baee1fd2dd
  createSymLowSq ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymLowSq @ n w ww1 ww3 } }) -}
b1c6a828e089acc62778b80df9cb6633
  createSymLowTri ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymLowTri @ n w ww1 ww3 } }) -}
ed97129fba43bb9a3ae486e87fa2bd5d
  createSymSq ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymSq @ n w ww1 ww3 } }) -}
58850120efb50fd2a45bd16d9113a780
  createSymUpSq ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymUpSq @ n w ww1 ww3 } }) -}
1e34a4e95e90b39e08d4f586cd2a55f8
  createSymUpTri ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateSymUpTri @ n w ww1 ww3 } }) -}
141bab0e77f71354cad98a909506fa1b
  createUnSymSq ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Vector.Vector (Data.Vector.Vector n)
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 HBLAS.IO.Vector.$wcreateUnSymSq @ n w ww1 ww3 } }) -}
147114b46fbf353661c12b5c479960e8
  createVec0 ::
    GHC.Num.Num n => GHC.Types.Int -> Data.Vector.Vector n
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(S),1*U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ n ($dNum :: GHC.Num.Num n) (n1 :: GHC.Types.Int) ->
                 case n1 of n2 { GHC.Types.I# ipv ->
                 Data.Vector.Generic.new
                   @ Data.Vector.Vector
                   @ n
                   (Data.Vector.$fVectorVectora @ n)
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Vector
                      @ n
                      (Data.Vector.$fVectorVectora @ n)
                      (Data.Vector.Fusion.Bundle.Monadic.replicate
                         @ Data.Vector.Fusion.Util.Id
                         @ n
                         @ Data.Vector.Vector
                         Data.Vector.Fusion.Util.$fMonadId
                         n2
                         (GHC.Num.fromInteger @ n $dNum 0))) }) -}
9da951ca992d6c081b39632217bcda1e
  createVecX ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> Data.Vector.Vector n
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 HBLAS.IO.Vector.$wcreateVecX @ n w ww1 ww3 ww5 } } }) -}
5ca9f8a37fdb39c5f4c07d9fe92793bc
  createVecX' ::
    GHC.Num.Num n => GHC.Types.Int -> Data.Vector.Vector n
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(S),1*U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ n ($dNum :: GHC.Num.Num n) (n1 :: GHC.Types.Int) ->
                 case n1 of n2 { GHC.Types.I# ipv ->
                 Data.Vector.Generic.new
                   @ Data.Vector.Vector
                   @ n
                   (Data.Vector.$fVectorVectora @ n)
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Vector
                      @ n
                      (Data.Vector.$fVectorVectora @ n)
                      (Data.Vector.Fusion.Bundle.Monadic.replicate
                         @ Data.Vector.Fusion.Util.Id
                         @ n
                         @ Data.Vector.Vector
                         Data.Vector.Fusion.Util.$fMonadId
                         n2
                         (GHC.Num.fromInteger @ n $dNum 1))) }) -}
737716980b3233d2e144c3c9c71208d8
  helperSymLowSq ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w4 of ww6 { GHC.Types.I# ww7 ->
                 HBLAS.IO.Vector.$whelperSymLowSq @ n w ww1 ww3 ww5 ww7 } } } }) -}
6eced5ef34df0d4efac673e530240eae
  helperSymLowTri ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,1*H>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w4 of w5 { GHC.Types.I# ipv ->
                 HBLAS.IO.Vector.$whelperSymLowTri @ n w ww1 ww3 ww5 w5 } } } }) -}
e786cb51d64a6c5907ca6ec85a925261
  helperSymUpSq ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w4 of ww6 { GHC.Types.I# ww7 ->
                 HBLAS.IO.Vector.$whelperSymUpSq @ n w ww1 ww3 ww5 ww7 } } } }) -}
ce2caee90c15e19969be4562719bbfc1
  helperSymUpTri ::
    GHC.Num.Num n =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Vector n
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case w3 of ww4 { GHC.Types.I# ww5 ->
                 case w4 of ww6 { GHC.Types.I# ww7 ->
                 HBLAS.IO.Vector.$whelperSymUpTri @ n w ww1 ww3 ww5 ww7 } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

