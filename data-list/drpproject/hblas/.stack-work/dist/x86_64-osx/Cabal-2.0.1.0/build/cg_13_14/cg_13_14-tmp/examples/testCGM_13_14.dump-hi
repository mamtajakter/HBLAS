
==================== FINAL INTERFACE ====================
2020-05-19 09:49:11.930526 UTC

interface main:Main 8022
  interface hash: 2499e7c03f96b964d132737f33bf3223
  ABI hash: 4a2313d1f107d9eb967e7afd2e9eefe6
  export-list hash: 254a9a20816b5b01f447893b34b751dc
  orphan hash: efa1a4853d471e05023eb22ec351d088
  flag hash: bd7f62cd6b766140f2c5946d38d13cc6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.conjugateGradient
  Main.main
  Main.repeatNTimes
  Main.round4dp
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 hblas-0.0.0.0 integer-gmp-1.0.1.0 loop-0.3.0
                      matrix-0.3.5.0 primitive-0.6.3.0 time-1.8.0.2 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hblas-0.0.0.0:HBLAS.Class 4610295a6fba69f91f0316e9de344d57
import  -/  hblas-0.0.0.0:HBLAS.IO.List 00f4537849fc164c4d5fa78c59442f7f
import  -/  hblas-0.0.0.0:HBLAS.Level1 0d0408d05a653a0c62d18c63e70eedd6
import  -/  hblas-0.0.0.0:HBLAS.Level2 a8785bc7fbe636afab71813b32636e39
import  -/  time-1.8.0.2:Data.Time 94c4b97ca0ea17df29bc6210fb9e1b2b
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a07e012374f68f0eec645405302031bb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9bbc4ffee03d887b4be58f486cb9ae4c
1b6714741e41e3b9a606b45b6de51f6c
  $s$wcreateSymSq ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [[GHC.Types.Float]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [~] -}
f921ce07498905e6c86f89ef5aa78116
  $s$wcreateVecX ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Types.Float]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [~] -}
4037c972197a0c88217594c9989277ee
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
0f1a95d29eb129d139de800e53a25678
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c9f0ae6af767c92c7e2d66814cef1e4f
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
60b96fad6a4543de1c2e9acde552af27
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger# w1 Main.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             Main.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.I# ww1 -> Main.$wf ww1 w1 }
                        GHC.Types.True -> 1# } }
                   GHC.Types.True -> case Main.$s^1 ret_ty GHC.Prim.Int# of {} } }) -}
c38fb36d62e37c1de337e4c727d1b3e9
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
8454ff125d3a98e1591fc7497319bd35
  $wround4dp :: GHC.Real.RealFrac n => n -> n
  {- Arity: 2,
     Strictness: <S(LS(LC(C(S))LL)LLLLL),U(1*U(1*U(A,A,1*C1(C1(U)),A,A,A,1*C1(U)),A,A),1*U(A,1*C1(C1(U)),A,C(U)),A,A,1*C1(C1(U)),A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ n (w :: GHC.Real.RealFrac n) (w1 :: n) ->
                 let {
                   $dFractional :: GHC.Real.Fractional n = GHC.Real.$p2RealFrac @ n w
                 } in
                 GHC.Real./
                   @ n
                   $dFractional
                   (let {
                      $dReal :: GHC.Real.Real n = GHC.Real.$p1RealFrac @ n w
                    } in
                    let {
                      $dNum :: GHC.Num.Num n = GHC.Real.$p1Real @ n $dReal
                    } in
                    GHC.Num.fromInteger
                      @ n
                      $dNum
                      (GHC.Real.round
                         @ n
                         w
                         @ GHC.Integer.Type.Integer
                         GHC.Real.$fIntegralInteger
                         (GHC.Num.*
                            @ n
                            $dNum
                            w1
                            (GHC.Real.fromRational @ n $dFractional Main.round4dp1))))
                   (GHC.Real.fromRational @ n $dFractional Main.round4dp1)) -}
ac085da105ed84069d6c10ac0e6526cd
  conjugateGradient ::
    (GHC.Num.Num n, GHC.Real.Fractional n, GHC.Classes.Ord n,
     GHC.Float.Floating n) =>
    [[n]] -> [n] -> [n] -> [n]
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,A><S(S(LLLC(S)LLL)LLL),1*U(1*U(C(C1(U)),A,C(C(U)),1*C1(U),A,A,C(U)),A,A,A)><L,U(A,A,C(C1(U)),A,A,A,A,A)><S(S(LC(C(S))LC(S))LLLLLLLLLLLLLLLLLLLLLL),U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,1*C1(U)),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (7, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dFractional :: GHC.Real.Fractional n)
                   ($dOrd :: GHC.Classes.Ord n)
                   ($dFloating :: GHC.Float.Floating n) ->
                 let {
                   $dFractional1 :: GHC.Real.Fractional n
                   = GHC.Float.$p1Floating @ n $dFloating
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (a :: [[n]]) (b :: [n]) (vec0 :: [n]) ->
                 case a of a1 { DEFAULT ->
                 case b of b1 { DEFAULT ->
                 case vec0 of vec1 { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.Base.foldr
                           @ [n]
                           @ b2
                           (GHC.Base.mapFB @ n @ b2 @ [n] c (HBLAS.Level1.dot @ n $dNum1 b1))
                           n1
                           a1) of ab { DEFAULT ->
                 case GHC.Num.negate
                        @ n
                        $dNum1
                        (GHC.Num.fromInteger @ n $dNum1 1) of minus1 { DEFAULT ->
                 let {
                   alpha2 :: n = GHC.Num.fromInteger @ n $dNum1 1
                 } in
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ b2
                           (GHC.List.zipWithFB
                              @ n
                              @ b2
                              @ b2
                              @ n
                              @ n
                              c1
                              (\ (x2 :: n) (y2 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 y2 (GHC.Num.* @ n $dNum1 alpha2 x2)))
                           n1
                           (HBLAS.Level1.axpy @ n $dNum1 minus1 ab vec1)
                           b1) of r1 { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.Base.foldr
                           @ n
                           @ b2
                           (GHC.Base.mapFB @ n @ b2 @ n c (GHC.Num.* @ n $dNum1 minus1))
                           n1
                           r1) of y { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.Base.foldr
                           @ [n]
                           @ b2
                           (GHC.Base.mapFB @ n @ b2 @ [n] c (HBLAS.Level1.dot @ n $dNum1 y))
                           n1
                           a1) of z { DEFAULT ->
                 case HBLAS.Level1.dot @ n $dNum1 y z of s { DEFAULT ->
                 case GHC.Real./
                        @ n
                        $dFractional1
                        (HBLAS.Level1.dot @ n $dNum1 y r1)
                        s of t { DEFAULT ->
                 let {
                   alpha1 :: n = GHC.Num.fromInteger @ n $dNum1 1
                 } in
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ b2
                           (GHC.List.zipWithFB
                              @ n
                              @ b2
                              @ b2
                              @ n
                              @ n
                              c1
                              (\ (x2 :: n) (y2 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 y2 (GHC.Num.* @ n $dNum1 alpha1 x2)))
                           n1
                           (HBLAS.Level1.axpy @ n $dNum1 t y vec1)
                           b1) of x2 { DEFAULT ->
                 case GHC.Base.foldr
                        @ n
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        (GHC.List.lengthFB @ n)
                        GHC.List.idLength
                        b1
                        (GHC.Types.I# 0#) of n1 { GHC.Types.I# ipv ->
                 case GHC.Real.fromRational
                        @ n
                        $dFractional1
                        (GHC.Real.:%
                           @ GHC.Integer.Type.Integer
                           1
                           10000000000) of tol { DEFAULT ->
                 letrec {
                   cgm :: GHC.Types.Int -> ([n], [n], [n], n, n, [n]) -> [n]
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: GHC.Types.Int) (ds1 :: ([n], [n], [n], n, n, [n])) ->
                     case GHC.Classes.eqInt ds (GHC.Types.I# 0#) of wild {
                       GHC.Types.False
                       -> case ds of ds2 { GHC.Types.I# ipv1 ->
                          case ds1 of wild1 { (,,,,,) r' y' z' s' t' x' ->
                          case r' of r'1 { DEFAULT ->
                          case y' of y'1 { DEFAULT ->
                          case z' of z'1 { DEFAULT ->
                          case s' of s'1 { DEFAULT ->
                          case t' of t'1 { DEFAULT ->
                          case x' of x'1 { DEFAULT ->
                          case GHC.Classes.<
                                 @ n
                                 $dOrd
                                 (HBLAS.Level1.nrm2 @ n $dNum1 $dFloating r'1)
                                 tol of wild2 {
                            GHC.Types.False
                            -> case GHC.Num.* @ n $dNum1 minus1 t'1 of minust { DEFAULT ->
                               let {
                                 alpha3 :: n = GHC.Num.fromInteger @ n $dNum1 1
                               } in
                               case GHC.Base.build
                                      @ n
                                      (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n2 :: b2)[OneShot] ->
                                       GHC.List.foldr2
                                         @ n
                                         @ n
                                         @ b2
                                         (GHC.List.zipWithFB
                                            @ n
                                            @ b2
                                            @ b2
                                            @ n
                                            @ n
                                            c1
                                            (\ (x3 :: n) (y2 :: n)[OneShot] ->
                                             GHC.Num.+
                                               @ n
                                               $dNum1
                                               y2
                                               (GHC.Num.* @ n $dNum1 alpha3 x3)))
                                         n2
                                         (HBLAS.Level1.axpy @ n $dNum1 minust z'1 vec1)
                                         r'1) of rr { DEFAULT ->
                               case GHC.Classes.<
                                      @ n
                                      $dOrd
                                      (HBLAS.Level1.nrm2 @ n $dNum1 $dFloating rr)
                                      tol of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Real./
                                           @ n
                                           $dFractional1
                                           (HBLAS.Level1.dot @ n $dNum1 rr z'1)
                                           s'1 of bb { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.Base.foldr
                                              @ n
                                              @ b2
                                              (GHC.Base.mapFB
                                                 @ n
                                                 @ b2
                                                 @ n
                                                 c
                                                 (GHC.Num.* @ n $dNum1 bb))
                                              n2
                                              y'1) of by { DEFAULT ->
                                    let {
                                      alpha4 :: n = GHC.Num.fromInteger @ n $dNum1 1
                                    } in
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c1 :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ b2
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ b2
                                                 @ b2
                                                 @ n
                                                 @ n
                                                 c1
                                                 (\ (x3 :: n) (y2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    y2
                                                    (GHC.Num.* @ n $dNum1 alpha4 x3)))
                                              n2
                                              (HBLAS.Level1.axpy @ n $dNum1 minus1 rr vec1)
                                              by) of yy { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.Base.foldr
                                              @ [n]
                                              @ b2
                                              (GHC.Base.mapFB
                                                 @ n
                                                 @ b2
                                                 @ [n]
                                                 c
                                                 (HBLAS.Level1.dot @ n $dNum1 yy))
                                              n2
                                              a1) of zz { DEFAULT ->
                                    case HBLAS.Level1.dot @ n $dNum1 yy zz of ss { DEFAULT ->
                                    case GHC.Real./
                                           @ n
                                           $dFractional1
                                           (HBLAS.Level1.dot @ n $dNum1 rr yy)
                                           ss of tt { DEFAULT ->
                                    let {
                                      alpha5 :: n = GHC.Num.fromInteger @ n $dNum1 1
                                    } in
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c1 :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ b2
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ b2
                                                 @ b2
                                                 @ n
                                                 @ n
                                                 c1
                                                 (\ (x3 :: n) (y2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    y2
                                                    (GHC.Num.* @ n $dNum1 alpha5 x3)))
                                              n2
                                              (HBLAS.Level1.axpy @ n $dNum1 tt yy vec1)
                                              x'1) of xx { DEFAULT ->
                                    cgm
                                      (GHC.Types.I# (GHC.Prim.-# ipv1 1#))
                                      (rr, yy, zz, ss, tt, xx) } } } } } } }
                                 GHC.Types.True -> x'1 } } }
                            GHC.Types.True -> x'1 } } } } } } } } }
                       GHC.Types.True
                       -> case ds1 of wild1 { (,,,,,) ds2 ds3 ds4 ds5 ds6 x' -> x' } }
                 } in
                 cgm n1 (r1, y, z, s, t, x2) } } } } } } } } } } } } }) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
024c892c370a52b0c7cd703a70bafa15
  repeatNTimes ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) =>
    t -> m a -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (5, False, False)
                (\ @ t
                   @ m :: * -> *
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($dNum :: GHC.Num.Num t)
                   ($dEq :: GHC.Classes.Eq t) ->
                 letrec {
                   repeatNTimes1 :: t -> m a -> m () {- Arity: 2 -}
                   = \ (ds :: t) (ds1 :: m a) ->
                     case GHC.Classes.==
                            @ t
                            $dEq
                            ds
                            (GHC.Num.fromInteger @ t $dNum 0) of wild {
                       GHC.Types.False
                       -> case ds of ds2 { DEFAULT ->
                          case ds1 of ds3 { DEFAULT ->
                          GHC.Base.>>
                            @ m
                            $dMonad
                            @ a
                            @ ()
                            ds3
                            (repeatNTimes1
                               (GHC.Num.- @ t $dNum ds2 (GHC.Num.fromInteger @ t $dNum 1))
                               ds3) } }
                       GHC.Types.True -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() }
                 } in
                 repeatNTimes1) -}
45bd13f0cb38738169576b045a55842c
  round4dp ::
    (GHC.Num.Num n, GHC.Real.RealFrac n, GHC.Real.Fractional n,
     GHC.Classes.Ord n, GHC.Float.Floating n) =>
    n -> n
  {- Arity: 6,
     Strictness: <L,A><S(LS(LC(C(S))LL)LLLLL),U(U(U(A,A,C(C1(U)),A,A,A,C(U)),A,A),U(A,C(C1(U)),A,C(U)),A,A,C(C1(U)),A,A)><L,A><L,A><L,A><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.RealFrac n)
                   (w2 :: GHC.Real.Fractional n)
                   (w3 :: GHC.Classes.Ord n)
                   (w4 :: GHC.Float.Floating n)
                   (w5 :: n) ->
                 Main.$wround4dp @ n w1 w5) -}
327738339ddefb0b972579e74a4a0a7f
  round4dp1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.round4dp3
                   Main.round4dp2) -}
c57250295067000b7a184569382bd754
  round4dp2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
072dfc7bfd62c3a48433794fa4f249eb
  round4dp3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10000) -}
"SPEC/Main $wcreateSymSq @ Float" [orphan] [0] forall (w :: GHC.Num.Num
                                                              GHC.Types.Float)
  HBLAS.IO.List.$wcreateSymSq @ GHC.Types.Float w
  = Main.$s$wcreateSymSq
"SPEC/Main $wcreateVecX @ Float" [orphan] [0] forall (w :: GHC.Num.Num
                                                             GHC.Types.Float)
  HBLAS.IO.List.$wcreateVecX @ GHC.Types.Float w
  = Main.$s$wcreateVecX
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

