
==================== FINAL INTERFACE ====================
2020-05-31 20:54:57.197678 UTC

interface main:Main 8022
  interface hash: 0b5ebde7f974ddbd10cb88df7f404a22
  ABI hash: 2fde842256879c5ccee5ba6fe7821c4b
  export-list hash: 4a9e9d8014d60d1206c072090ee33c0c
  orphan hash: d7016fbfa7dad4f20a06ab2377c0875f
  flag hash: 1b24a81a4c58a4d170d6fa4827b0523b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.conjugateGradient
  Main.main
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 hblas-0.0.0.0 integer-gmp-1.0.1.0
                      primitive-0.6.3.0 time-1.8.0.2 transformers-0.5.2.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  deepseq-1.4.3.0:Control.DeepSeq f7740b5516c7babddc012e9aab667581
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hblas-0.0.0.0:HBLAS.Class 02e9dd2e97ec6b77a903a4c0f59ca65b
import  -/  hblas-0.0.0.0:HBLAS.IO.List 004c6395383c8b561bbe2474e6566a97
import  -/  hblas-0.0.0.0:HBLAS.Level1 bde81cafc81f9682234ab53ab9dc7311
import  -/  hblas-0.0.0.0:HBLAS.Level2 18dc2a764d898d16849f3be8e377d40a
import  -/  time-1.8.0.2:Data.Time 94c4b97ca0ea17df29bc6210fb9e1b2b
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a07e012374f68f0eec645405302031bb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9bbc4ffee03d887b4be58f486cb9ae4c
1b6714741e41e3b9a606b45b6de51f6c
  $s$wcreateSymSq ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [[GHC.Types.Float]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [~] -}
f921ce07498905e6c86f89ef5aa78116
  $s$wcreateVecX ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Types.Float]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [~] -}
eceb551b7fa887b6b965e2bd7b520554
  $sdot :: [GHC.Types.Float] -> [GHC.Types.Float] -> GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (a1 :: [GHC.Types.Float]) (b :: [GHC.Types.Float]) ->
                 case a1 of a2 { DEFAULT ->
                 case b of b1 { DEFAULT ->
                 GHC.List.foldr2
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   @ (GHC.Types.Float -> GHC.Types.Float)
                   (GHC.List.zipWithFB
                      @ GHC.Types.Float
                      @ (GHC.Types.Float -> GHC.Types.Float)
                      @ (GHC.Types.Float -> GHC.Types.Float)
                      @ GHC.Types.Float
                      @ GHC.Types.Float
                      (\ (ds :: GHC.Types.Float)
                         (ds1 :: GHC.Types.Float -> GHC.Types.Float)[OneShot]
                         (v :: GHC.Types.Float)[OneShot] ->
                       ds1 (GHC.Float.plusFloat v ds))
                      GHC.Float.timesFloat)
                   (GHC.Base.id @ GHC.Types.Float)
                   a2
                   b1
                   (GHC.Types.F# 0.0#) } }) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0765c1e5a8631b238225d7a4b3867290
  conjugateGradient ::
    (GHC.Num.Num n, GHC.Real.Fractional n, GHC.Classes.Ord n,
     GHC.Float.Floating n) =>
    [[n]] -> [n] -> [n] -> [n]
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,A><S(S(LLLC(S)LLC(S))LLL),1*U(1*U(C(C1(U)),A,C(C(U)),1*C1(U),A,A,C(U)),A,A,A)><L,U(A,A,C(C1(U)),A,A,A,A,A)><S(S(LC(C(S))LC(S))LLLLLLLLLLLLLLLLLLLLLL),U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,C(U)),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (7, False, False)
                (\ @ n
                   ($dNum :: GHC.Num.Num n)
                   ($dFractional :: GHC.Real.Fractional n)
                   ($dOrd :: GHC.Classes.Ord n)
                   ($dFloating :: GHC.Float.Floating n) ->
                 let {
                   $dFractional1 :: GHC.Real.Fractional n
                   = GHC.Float.$p1Floating @ n $dFloating
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                 } in
                 \ (a1 :: [[n]]) (b :: [n]) (vec0 :: [n]) ->
                 case a1 of a2 { DEFAULT ->
                 case b of b1 { DEFAULT ->
                 case vec0 of vec1 { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.Base.foldr
                           @ [n]
                           @ b2
                           (GHC.Base.mapFB @ n @ b2 @ [n] c (HBLAS.Level1.dot @ n $dNum1 b1))
                           n1
                           a2) of ab { DEFAULT ->
                 case GHC.Num.negate
                        @ n
                        $dNum1
                        (GHC.Num.fromInteger @ n $dNum1 1) of minus1 { DEFAULT ->
                 case GHC.Num.fromInteger @ n $dNum1 1 of alpha2 { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ b2
                           (GHC.List.zipWithFB
                              @ n
                              @ b2
                              @ b2
                              @ n
                              @ n
                              c1
                              (\ (x2 :: n) (y2 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 y2 (GHC.Num.* @ n $dNum1 minus1 x2)))
                           n1
                           ab
                           vec1) of xs { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ b2
                           (GHC.List.zipWithFB
                              @ n
                              @ b2
                              @ b2
                              @ n
                              @ n
                              c1
                              (\ (x2 :: n) (y2 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 y2 (GHC.Num.* @ n $dNum1 alpha2 x2)))
                           n1
                           xs
                           b1) of r { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.Base.foldr
                           @ n
                           @ b2
                           (GHC.Base.mapFB @ n @ b2 @ n c (GHC.Num.* @ n $dNum1 minus1))
                           n1
                           r) of y { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.Base.foldr
                           @ [n]
                           @ b2
                           (GHC.Base.mapFB @ n @ b2 @ [n] c (HBLAS.Level1.dot @ n $dNum1 y))
                           n1
                           a2) of z { DEFAULT ->
                 let {
                   k :: n -> n -> n = GHC.Num.+ @ n $dNum1
                 } in
                 case GHC.List.foldr2
                        @ n
                        @ n
                        @ (n -> n)
                        (GHC.List.zipWithFB
                           @ n
                           @ (n -> n)
                           @ (n -> n)
                           @ n
                           @ n
                           (\ (ds :: n) (ds1 :: n -> n)[OneShot] (v :: n)[OneShot] ->
                            ds1 (k v ds))
                           (GHC.Num.* @ n $dNum1))
                        (GHC.Base.id @ n)
                        y
                        z
                        (GHC.Num.fromInteger @ n $dNum1 0) of s { DEFAULT ->
                 case GHC.Real./
                        @ n
                        $dFractional1
                        (let {
                           k1 :: n -> n -> n = GHC.Num.+ @ n $dNum1
                         } in
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ (n -> n)
                           (GHC.List.zipWithFB
                              @ n
                              @ (n -> n)
                              @ (n -> n)
                              @ n
                              @ n
                              (\ (ds :: n) (ds1 :: n -> n)[OneShot] (v :: n)[OneShot] ->
                               ds1 (k1 v ds))
                              (GHC.Num.* @ n $dNum1))
                           (GHC.Base.id @ n)
                           y
                           r
                           (GHC.Num.fromInteger @ n $dNum1 0))
                        s of t { DEFAULT ->
                 case GHC.Num.fromInteger @ n $dNum1 1 of alpha1 { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ b2
                           (GHC.List.zipWithFB
                              @ n
                              @ b2
                              @ b2
                              @ n
                              @ n
                              c1
                              (\ (x2 :: n) (y2 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 y2 (GHC.Num.* @ n $dNum1 t x2)))
                           n1
                           y
                           vec1) of xs1 { DEFAULT ->
                 case GHC.Base.build
                        @ n
                        (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n1 :: b2)[OneShot] ->
                         GHC.List.foldr2
                           @ n
                           @ n
                           @ b2
                           (GHC.List.zipWithFB
                              @ n
                              @ b2
                              @ b2
                              @ n
                              @ n
                              c1
                              (\ (x2 :: n) (y2 :: n)[OneShot] ->
                               GHC.Num.+ @ n $dNum1 y2 (GHC.Num.* @ n $dNum1 alpha1 x2)))
                           n1
                           xs1
                           b1) of x1 { DEFAULT ->
                 case GHC.Base.foldr
                        @ n
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        (GHC.List.lengthFB @ n)
                        GHC.List.idLength
                        b1
                        (GHC.Types.I# 0#) of n1 { GHC.Types.I# ipv ->
                 case GHC.Real.fromRational
                        @ n
                        $dFractional1
                        (GHC.Real.:%
                           @ GHC.Integer.Type.Integer
                           1
                           10000000000) of tol { DEFAULT ->
                 letrec {
                   cgm :: GHC.Types.Int -> ([n], [n], [n], n, n, [n]) -> [n]
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: GHC.Types.Int) (ds1 :: ([n], [n], [n], n, n, [n])) ->
                     case GHC.Classes.eqInt ds (GHC.Types.I# 0#) of wild {
                       GHC.Types.False
                       -> case ds of ds2 { GHC.Types.I# ipv1 ->
                          case ds1 of wild1 { (,,,,,) r' y' z' s' t' x' ->
                          case r' of r'1 { DEFAULT ->
                          case y' of y'1 { DEFAULT ->
                          case z' of z'1 { DEFAULT ->
                          case s' of s'1 { DEFAULT ->
                          case t' of t'1 { DEFAULT ->
                          case x' of x'1 { DEFAULT ->
                          case GHC.Classes.<
                                 @ n
                                 $dOrd
                                 (let {
                                    $dFractional2 :: GHC.Real.Fractional n
                                    = GHC.Float.$p1Floating @ n $dFloating
                                  } in
                                  let {
                                    $dNum2 :: GHC.Num.Num n
                                    = GHC.Real.$p1Fractional @ n $dFractional2
                                  } in
                                  let {
                                    f1 :: n -> n -> n = GHC.Num.+ @ n $dNum2
                                  } in
                                  GHC.Float.sqrt
                                    @ n
                                    $dFloating
                                    (GHC.Base.foldr
                                       @ n
                                       @ (n -> n)
                                       (GHC.Base.mapFB
                                          @ n
                                          @ (n -> n)
                                          @ n
                                          (\ (ds3 :: n)
                                             (ds4 :: n -> n)[OneShot]
                                             (v :: n)[OneShot] ->
                                           ds4 (f1 v ds3))
                                          (\ (i :: n) -> GHC.Num.* @ n $dNum2 i i))
                                       (GHC.Base.id @ n)
                                       r'1
                                       (GHC.Num.fromInteger @ n $dNum2 0)))
                                 tol of wild2 {
                            GHC.Types.False
                            -> case GHC.Num.* @ n $dNum1 minus1 t'1 of minust { DEFAULT ->
                               case GHC.Num.fromInteger @ n $dNum1 1 of alpha3 { DEFAULT ->
                               case GHC.Base.build
                                      @ n
                                      (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n2 :: b2)[OneShot] ->
                                       GHC.List.foldr2
                                         @ n
                                         @ n
                                         @ b2
                                         (GHC.List.zipWithFB
                                            @ n
                                            @ b2
                                            @ b2
                                            @ n
                                            @ n
                                            c1
                                            (\ (x2 :: n) (y2 :: n)[OneShot] ->
                                             GHC.Num.+
                                               @ n
                                               $dNum1
                                               y2
                                               (GHC.Num.* @ n $dNum1 minust x2)))
                                         n2
                                         z'1
                                         vec1) of xs2 { DEFAULT ->
                               case GHC.Base.build
                                      @ n
                                      (\ @ b2 (c1 :: n -> b2 -> b2)[OneShot] (n2 :: b2)[OneShot] ->
                                       GHC.List.foldr2
                                         @ n
                                         @ n
                                         @ b2
                                         (GHC.List.zipWithFB
                                            @ n
                                            @ b2
                                            @ b2
                                            @ n
                                            @ n
                                            c1
                                            (\ (x2 :: n) (y2 :: n)[OneShot] ->
                                             GHC.Num.+
                                               @ n
                                               $dNum1
                                               y2
                                               (GHC.Num.* @ n $dNum1 alpha3 x2)))
                                         n2
                                         xs2
                                         r'1) of rr { DEFAULT ->
                               case GHC.Classes.<
                                      @ n
                                      $dOrd
                                      (let {
                                         $dFractional2 :: GHC.Real.Fractional n
                                         = GHC.Float.$p1Floating @ n $dFloating
                                       } in
                                       let {
                                         $dNum2 :: GHC.Num.Num n
                                         = GHC.Real.$p1Fractional @ n $dFractional2
                                       } in
                                       let {
                                         f1 :: n -> n -> n = GHC.Num.+ @ n $dNum2
                                       } in
                                       GHC.Float.sqrt
                                         @ n
                                         $dFloating
                                         (GHC.Base.foldr
                                            @ n
                                            @ (n -> n)
                                            (GHC.Base.mapFB
                                               @ n
                                               @ (n -> n)
                                               @ n
                                               (\ (ds3 :: n)
                                                  (ds4 :: n -> n)[OneShot]
                                                  (v :: n)[OneShot] ->
                                                ds4 (f1 v ds3))
                                               (\ (i :: n) -> GHC.Num.* @ n $dNum2 i i))
                                            (GHC.Base.id @ n)
                                            rr
                                            (GHC.Num.fromInteger @ n $dNum2 0)))
                                      tol of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Real./
                                           @ n
                                           $dFractional1
                                           (let {
                                              k1 :: n -> n -> n = GHC.Num.+ @ n $dNum1
                                            } in
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ (n -> n)
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ (n -> n)
                                                 @ (n -> n)
                                                 @ n
                                                 @ n
                                                 (\ (ds3 :: n)
                                                    (ds4 :: n -> n)[OneShot]
                                                    (v :: n)[OneShot] ->
                                                  ds4 (k1 v ds3))
                                                 (GHC.Num.* @ n $dNum1))
                                              (GHC.Base.id @ n)
                                              rr
                                              z'1
                                              (GHC.Num.fromInteger @ n $dNum1 0))
                                           s'1 of bb { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.Base.foldr
                                              @ n
                                              @ b2
                                              (GHC.Base.mapFB
                                                 @ n
                                                 @ b2
                                                 @ n
                                                 c
                                                 (GHC.Num.* @ n $dNum1 bb))
                                              n2
                                              y'1) of by { DEFAULT ->
                                    case GHC.Num.fromInteger @ n $dNum1 1 of alpha4 { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c1 :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ b2
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ b2
                                                 @ b2
                                                 @ n
                                                 @ n
                                                 c1
                                                 (\ (x2 :: n) (y2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    y2
                                                    (GHC.Num.* @ n $dNum1 minus1 x2)))
                                              n2
                                              rr
                                              vec1) of xs3 { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c1 :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ b2
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ b2
                                                 @ b2
                                                 @ n
                                                 @ n
                                                 c1
                                                 (\ (x2 :: n) (y2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    y2
                                                    (GHC.Num.* @ n $dNum1 alpha4 x2)))
                                              n2
                                              xs3
                                              by) of yy { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.Base.foldr
                                              @ [n]
                                              @ b2
                                              (GHC.Base.mapFB
                                                 @ n
                                                 @ b2
                                                 @ [n]
                                                 c
                                                 (HBLAS.Level1.dot @ n $dNum1 yy))
                                              n2
                                              a2) of zz { DEFAULT ->
                                    let {
                                      k1 :: n -> n -> n = GHC.Num.+ @ n $dNum1
                                    } in
                                    case GHC.List.foldr2
                                           @ n
                                           @ n
                                           @ (n -> n)
                                           (GHC.List.zipWithFB
                                              @ n
                                              @ (n -> n)
                                              @ (n -> n)
                                              @ n
                                              @ n
                                              (\ (ds3 :: n)
                                                 (ds4 :: n -> n)[OneShot]
                                                 (v :: n)[OneShot] ->
                                               ds4 (k1 v ds3))
                                              (GHC.Num.* @ n $dNum1))
                                           (GHC.Base.id @ n)
                                           yy
                                           zz
                                           (GHC.Num.fromInteger @ n $dNum1 0) of ss { DEFAULT ->
                                    case GHC.Real./
                                           @ n
                                           $dFractional1
                                           (let {
                                              k2 :: n -> n -> n = GHC.Num.+ @ n $dNum1
                                            } in
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ (n -> n)
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ (n -> n)
                                                 @ (n -> n)
                                                 @ n
                                                 @ n
                                                 (\ (ds3 :: n)
                                                    (ds4 :: n -> n)[OneShot]
                                                    (v :: n)[OneShot] ->
                                                  ds4 (k2 v ds3))
                                                 (GHC.Num.* @ n $dNum1))
                                              (GHC.Base.id @ n)
                                              rr
                                              yy
                                              (GHC.Num.fromInteger @ n $dNum1 0))
                                           ss of tt { DEFAULT ->
                                    case GHC.Num.fromInteger @ n $dNum1 1 of alpha5 { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c1 :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ b2
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ b2
                                                 @ b2
                                                 @ n
                                                 @ n
                                                 c1
                                                 (\ (x2 :: n) (y2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    y2
                                                    (GHC.Num.* @ n $dNum1 tt x2)))
                                              n2
                                              yy
                                              vec1) of xs4 { DEFAULT ->
                                    case GHC.Base.build
                                           @ n
                                           (\ @ b2
                                              (c1 :: n -> b2 -> b2)[OneShot]
                                              (n2 :: b2)[OneShot] ->
                                            GHC.List.foldr2
                                              @ n
                                              @ n
                                              @ b2
                                              (GHC.List.zipWithFB
                                                 @ n
                                                 @ b2
                                                 @ b2
                                                 @ n
                                                 @ n
                                                 c1
                                                 (\ (x2 :: n) (y2 :: n)[OneShot] ->
                                                  GHC.Num.+
                                                    @ n
                                                    $dNum1
                                                    y2
                                                    (GHC.Num.* @ n $dNum1 alpha5 x2)))
                                              n2
                                              xs4
                                              x'1) of xx { DEFAULT ->
                                    cgm
                                      (GHC.Types.I# (GHC.Prim.-# ipv1 1#))
                                      (rr, yy, zz, ss, tt, xx) } } } } } } } } } } }
                                 GHC.Types.True -> x'1 } } } } }
                            GHC.Types.True -> x'1 } } } } } } } } }
                       GHC.Types.True
                       -> case ds1 of wild1 { (,,,,,) ds2 ds3 ds4 ds5 ds6 x' -> x' } }
                 } in
                 cgm n1 (r, y, z, s, t, x1) } } } } } } } } } } } } } } } } }) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $wcreateSymSq @ Float" [orphan] [0] forall (w :: GHC.Num.Num
                                                              GHC.Types.Float)
  HBLAS.IO.List.$wcreateSymSq @ GHC.Types.Float w
  = Main.$s$wcreateSymSq
"SPEC/Main $wcreateVecX @ Float" [orphan] [0] forall (w :: GHC.Num.Num
                                                             GHC.Types.Float)
  HBLAS.IO.List.$wcreateVecX @ GHC.Types.Float w
  = Main.$s$wcreateVecX
"SPEC/Main dot @ Float" [orphan] forall ($dNum :: GHC.Num.Num
                                                    GHC.Types.Float)
  HBLAS.Level1.dot @ GHC.Types.Float $dNum = Main.$sdot
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

