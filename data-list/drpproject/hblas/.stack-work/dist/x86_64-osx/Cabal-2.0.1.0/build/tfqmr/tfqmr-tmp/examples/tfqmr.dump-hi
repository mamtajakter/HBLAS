
==================== FINAL INTERFACE ====================
2020-05-19 10:00:46.551379 UTC

interface main:Main 8022
  interface hash: 3caa036468129531ca29f1242ffdcedc
  ABI hash: b6e96335ef7eb8a93f117beafedcfca9
  export-list hash: cf4ae2f4739fae8300f6fdb1fd6c9795
  orphan hash: dccc54abcbef32c48fb1f052c1964d45
  flag hash: 72fb87d46060a9f3402ccd845664b3a1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.repeatNTimes
  Main.round4dp
  Main.tfqmr
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 hblas-0.0.0.0 integer-gmp-1.0.1.0 loop-0.3.0
                      matrix-0.3.5.0 primitive-0.6.3.0 time-1.8.0.2 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hblas-0.0.0.0:HBLAS.Class 4610295a6fba69f91f0316e9de344d57
import  -/  hblas-0.0.0.0:HBLAS.IO.List 00f4537849fc164c4d5fa78c59442f7f
import  -/  hblas-0.0.0.0:HBLAS.Level1 0d0408d05a653a0c62d18c63e70eedd6
import  -/  hblas-0.0.0.0:HBLAS.Level2 a8785bc7fbe636afab71813b32636e39
import  -/  time-1.8.0.2:Data.Time 94c4b97ca0ea17df29bc6210fb9e1b2b
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a07e012374f68f0eec645405302031bb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9bbc4ffee03d887b4be58f486cb9ae4c
1cd3ec76cb3ca93603c766826ae99dda
  $s$wcreateUnSymSq ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [[GHC.Types.Double]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [~] -}
07a793720161b20e800ad7786dbf614c
  $s$wcreateVecX ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Types.Double]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [~] -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
74786aa012f83ec9e7813f2d5d443ed5
  $wround4dp :: GHC.Real.RealFrac n => n -> n
  {- Arity: 2,
     Strictness: <S(LS(LC(C(S))LL)LLLLL),U(1*U(1*U(A,A,1*C1(C1(U)),A,A,A,1*C1(U)),A,A),1*U(A,1*C1(C1(U)),A,C(U)),A,A,1*C1(C1(U)),A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ n (w :: GHC.Real.RealFrac n) (w1 :: n) ->
                 let {
                   $dFractional :: GHC.Real.Fractional n = GHC.Real.$p2RealFrac @ n w
                 } in
                 GHC.Real./
                   @ n
                   $dFractional
                   (let {
                      $dReal :: GHC.Real.Real n = GHC.Real.$p1RealFrac @ n w
                    } in
                    let {
                      $dNum :: GHC.Num.Num n = GHC.Real.$p1Real @ n $dReal
                    } in
                    GHC.Num.fromInteger
                      @ n
                      $dNum
                      (GHC.Real.round
                         @ n
                         w
                         @ GHC.Integer.Type.Integer
                         GHC.Real.$fIntegralInteger
                         (GHC.Num.*
                            @ n
                            $dNum
                            w1
                            (GHC.Real.fromRational @ n $dFractional Main.round4dp1))))
                   (GHC.Real.fromRational @ n $dFractional Main.round4dp1)) -}
ed4e3e94f49cbfdd07a23724ebee2767
  $wtfqmr ::
    (GHC.Real.Fractional n, GHC.Classes.Ord n, GHC.Float.Floating n) =>
    [[n]] -> [n] -> n -> [n] -> [n]
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),C(C1(U)),C(C1(U)),1*C1(U),A,A,C(U)),A,A,A)><S(S(C(C(S))L)LLLLLLL),U(1*U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A)><L,U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7866af0e1b7fab078746ec150f87130c
  repeatNTimes ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) =>
    t -> m a -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ t
                   @ m :: * -> *
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($dNum :: GHC.Num.Num t)
                   ($dEq :: GHC.Classes.Eq t)
                   (eta :: t)
                   (eta1 :: m a) ->
                 let {
                   lvl14 :: t = GHC.Num.fromInteger @ t $dNum Main.repeatNTimes2
                 } in
                 let {
                   lvl15 :: m () = GHC.Base.return @ m $dMonad @ () GHC.Tuple.()
                 } in
                 let {
                   lvl16 :: t = GHC.Num.fromInteger @ t $dNum Main.repeatNTimes1
                 } in
                 letrec {
                   repeatNTimes3 :: t -> m a -> m ()
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (ds :: t) (ds1 :: m a) ->
                     case GHC.Classes.== @ t $dEq ds lvl16 of wild {
                       GHC.Types.False
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ a
                            @ ()
                            ds1
                            (repeatNTimes3 (GHC.Num.- @ t $dNum ds lvl14) ds1)
                       GHC.Types.True -> lvl15 }
                 } in
                 repeatNTimes3 eta eta1) -}
a8e58077f9de008ff68268134a31a753
  repeatNTimes1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0af2260242737ce5f43b5c6f8c25a647
  repeatNTimes2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
7425048495f77f03f6b8143f229fbbdc
  round4dp ::
    (GHC.Num.Num n, GHC.Real.RealFrac n, GHC.Real.Fractional n,
     GHC.Classes.Ord n, GHC.Float.Floating n) =>
    n -> n
  {- Arity: 6,
     Strictness: <L,A><S(LS(LC(C(S))LL)LLLLL),U(U(U(A,A,C(C1(U)),A,A,A,C(U)),A,A),U(A,C(C1(U)),A,C(U)),A,A,C(C1(U)),A,A)><L,A><L,A><L,A><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.RealFrac n)
                   (w2 :: GHC.Real.Fractional n)
                   (w3 :: GHC.Classes.Ord n)
                   (w4 :: GHC.Float.Floating n)
                   (w5 :: n) ->
                 Main.$wround4dp @ n w1 w5) -}
8a64b3e5994a1f4eb9874398c2bd211c
  round4dp1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.round4dp2
                   Main.repeatNTimes2) -}
d26793f60ac535d06c4551d197f7f726
  round4dp2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10000) -}
90e552b3b493519043890ad4c393195b
  tfqmr ::
    (GHC.Num.Num n, GHC.Real.Fractional n, GHC.Classes.Ord n,
     GHC.Float.Floating n) =>
    [[n]] -> [n] -> n -> [n] -> [n]
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*U(C(C1(U)),C(C1(U)),C(C1(U)),1*C1(U),A,A,C(U)),A,A,A)><S(S(C(C(S))L)LLLLLLL),U(U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A)><L,U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,A),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (8, True, True)
                (\ @ n
                   (w :: GHC.Num.Num n)
                   (w1 :: GHC.Real.Fractional n)
                   (w2 :: GHC.Classes.Ord n)
                   (w3 :: GHC.Float.Floating n)
                   (w4 :: [[n]])
                   (w5 :: [n])
                   (w6 :: n)
                   (w7 :: [n]) ->
                 Main.$wtfqmr @ n w1 w2 w3 w4 w5 w6 w7) -}
ad092d423d80273a822883f62c686e20
  tfqmr_$stfqmr ::
    [[GHC.Types.Double]]
    -> [GHC.Types.Double]
    -> GHC.Types.Double
    -> [GHC.Types.Double]
    -> [GHC.Types.Double]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),U(U)><L,U> -}
"SPEC tfqmr @ Double" forall ($dFloating :: GHC.Float.Floating
                                              GHC.Types.Double)
                             ($dOrd :: GHC.Classes.Ord GHC.Types.Double)
                             ($dFractional :: GHC.Real.Fractional GHC.Types.Double)
                             ($dNum :: GHC.Num.Num GHC.Types.Double)
  Main.tfqmr @ GHC.Types.Double $dNum $dFractional $dOrd $dFloating
  = Main.tfqmr_$stfqmr
"SPEC/Main $wcreateUnSymSq @ Double" [orphan] [0] forall (w :: GHC.Num.Num
                                                                 GHC.Types.Double)
  HBLAS.IO.List.$wcreateUnSymSq @ GHC.Types.Double w
  = Main.$s$wcreateUnSymSq
"SPEC/Main $wcreateVecX @ Double" [orphan] [0] forall (w :: GHC.Num.Num
                                                              GHC.Types.Double)
  HBLAS.IO.List.$wcreateVecX @ GHC.Types.Double w
  = Main.$s$wcreateVecX
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

