
==================== FINAL INTERFACE ====================
2019-02-26 00:17:33.000055 UTC

interface main:Main 8022
  interface hash: 7cd6f5c84e40df93e9f05270bf3d5f4c
  ABI hash: 61fe2cc40e23a9cfda17ddb1940724b1
  export-list hash: 258d09163d2aa07e529ada945ef637db
  orphan hash: 9f0b5cb46c42e829ba670d0276dd9633
  flag hash: 37f2954550733605e0a13e2c71c37733
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.conjgrad
  Main.main
  Main.repeatNTimes
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 hblas-0.0.0.0 integer-gmp-1.0.1.0 loop-0.3.0
                      matrix-0.3.5.0 primitive-0.6.3.0 time-1.8.0.2 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hblas-0.0.0.0:HBLAS.Class 4610295a6fba69f91f0316e9de344d57
import  -/  hblas-0.0.0.0:HBLAS.IO.Vector ae8dbeb260ffec444b3f19e56925a1e5
import  -/  hblas-0.0.0.0:HBLAS.Level1 d46dd99bad0e06cb8418247d1ee74354
import  -/  hblas-0.0.0.0:HBLAS.Level2 f5ae3e7c64d0c66c737fcdf7e3941dcd
import  -/  time-1.8.0.2:Data.Time 94c4b97ca0ea17df29bc6210fb9e1b2b
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a07e012374f68f0eec645405302031bb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9bbc4ffee03d887b4be58f486cb9ae4c
import  -/  vector-0.12.0.1:Data.Vector 05d09acb6f8f89c1df7193ef513155f3
508b91e7b6027f0e947b3dfae5ca8503
  $s$fShowVector ::
    GHC.Show.Show (Data.Vector.Vector GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Vector.Vector GHC.Types.Double)
                  Main.$s$fShowVector_$sshowsPrec
                  (Data.Vector.$fShowVector_$cshow
                     @ GHC.Types.Double
                     GHC.Float.$fShowDouble)
                  (Data.Vector.$fShowVector_$cshowList
                     @ GHC.Types.Double
                     GHC.Float.$fShowDouble) -}
a2eb39a54ee78d0ffcdec4c4d2bf0483
  $s$fShowVector_$sshowsPrec ::
    GHC.Types.Int
    -> Data.Vector.Vector GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Data.Vector.Vector GHC.Types.Double) ->
                 GHC.Show.showList__
                   @ GHC.Types.Double
                   GHC.Float.$fShowDouble1
                   (GHC.Base.build
                      @ GHC.Types.Double
                      (\ @ b
                         (c :: GHC.Types.Double -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       Data.Vector.Fusion.Bundle.toListFB
                         @ GHC.Types.Double
                         @ b
                         @ Data.Vector.Vector
                         c
                         n1
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Vector
                            @ GHC.Types.Double
                            (Data.Vector.$fVectorVectora @ GHC.Types.Double)
                            x)))) -}
1b908b12453b0829f6cd995021ccb093
  $sreplicateHBlas1 ::
    (GHC.Base.Applicative Data.Vector.Vector,
     HBLAS.Class.Mappable Data.Vector.Vector,
     HBLAS.Class.Zippable Data.Vector.Vector,
     HBLAS.Class.Indexable Data.Vector.Vector,
     Data.Foldable.Foldable Data.Vector.Vector)
  {- Strictness: m,
     Unfolding: ((Data.Vector.$fApplicativeVector,
                  HBLAS.Class.$fMappableVector, HBLAS.Class.$fZippableVector,
                  HBLAS.Class.$fIndexableVector, Data.Vector.$fFoldableVector)) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3ed2ae63ee5aa70d5bf7e7c62a795dc7
  $w$sconjgrad ::
    Data.Vector.Vector (Data.Vector.Vector GHC.Types.Double)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# GHC.Types.Double
    -> Data.Vector.Vector GHC.Types.Double
  {- Arity: 4, Strictness: <L,U(U,U,U)><S,U><S,U><S,U>,
     Inline: [0] -}
4c4de9c5e593f6f8e2f6a478e8e7d11e
  $wconjgrad ::
    (GHC.Real.Fractional n, GHC.Classes.Ord n, GHC.Float.Floating n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# n
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,1*U(1*U(C(C1(U)),A,C(C1(U)),C(U),A,A,C(U)),A,A,A)><L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,1*C1(U)),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U,U,U)><S,U><S,U><S,U>,
     Inline: [0] -}
afbb4aace3ea717ae23655929bf83b60
  conjgrad ::
    (GHC.Num.Num n, GHC.Real.Fractional n, GHC.Classes.Ord n,
     GHC.Float.Floating n) =>
    Data.Vector.Vector (Data.Vector.Vector n)
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
    -> Data.Vector.Vector n
  {- Arity: 7,
     Strictness: <L,A><L,1*U(1*U(C(C1(U)),A,C(C1(U)),C(U),A,A,C(U)),A,A,A)><L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U(U(U(C(C1(U)),A,C(C1(U)),A,A,A,C(U)),C(C1(U)),A,C(U)),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,A>,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ n1
                   (w :: GHC.Num.Num n1)
                   (w1 :: GHC.Real.Fractional n1)
                   (w2 :: GHC.Classes.Ord n1)
                   (w3 :: GHC.Float.Floating n1)
                   (w4 :: Data.Vector.Vector (Data.Vector.Vector n1))
                   (w5 :: Data.Vector.Vector n1)
                   (w6 :: Data.Vector.Vector n1) ->
                 case w5 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 Main.$wconjgrad @ n1 w1 w2 w3 w4 ww1 ww2 ww3 }) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
6366ee37c22b502862d306ebe218f963
  repeatNTimes ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) =>
    t -> m a -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ t
                   @ m :: * -> *
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($dNum :: GHC.Num.Num t)
                   ($dEq :: GHC.Classes.Eq t)
                   (eta :: t)
                   (eta1 :: m a) ->
                 let {
                   lvl18 :: t = GHC.Num.fromInteger @ t $dNum Main.repeatNTimes2
                 } in
                 let {
                   lvl19 :: m () = GHC.Base.return @ m $dMonad @ () GHC.Tuple.()
                 } in
                 let {
                   lvl20 :: t = GHC.Num.fromInteger @ t $dNum Main.repeatNTimes1
                 } in
                 letrec {
                   repeatNTimes3 :: t -> m a -> m ()
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (ds :: t) (ds1 :: m a) ->
                     case GHC.Classes.== @ t $dEq ds lvl20 of wild {
                       GHC.Types.False
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ a
                            @ ()
                            ds1
                            (repeatNTimes3 (GHC.Num.- @ t $dNum ds lvl18) ds1)
                       GHC.Types.True -> lvl19 }
                 } in
                 repeatNTimes3 eta eta1) -}
a8e58077f9de008ff68268134a31a753
  repeatNTimes1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0af2260242737ce5f43b5c6f8c25a647
  repeatNTimes2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
"SPEC/Main $fShowVector @ Double" [orphan] forall (v :: GHC.Show.Show
                                                          GHC.Types.Double)
  Data.Vector.$fShowVector @ GHC.Types.Double v = Main.$s$fShowVector
"SPEC/Main showsPrec @ Vector @ Double" [orphan] forall ($dShow :: GHC.Show.Show
                                                                     GHC.Types.Double)
                                                        ($dVector :: Data.Vector.Generic.Base.Vector
                                                                       Data.Vector.Vector
                                                                       GHC.Types.Double)
  Data.Vector.Generic.showsPrec @ Data.Vector.Vector
                                @ GHC.Types.Double
                                $dVector
                                $dShow
  = Main.$s$fShowVector_$sshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

